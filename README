===========================================================================
                        GENERAL DESCRIPTION
===========================================================================

This is the formalized LLVM IR.

    * Formalism (the Coq code):
        http://www.cis.upenn.edu/~jianzhou/Vellvm/release.tgz
    * LLVM 3.0 with extended OCaml-LLVM bindings:
        http://www.cis.upenn.edu/~jianzhou/Vellvm/llvm-3.0.src.tgz

===========================================================================
                              CONTENTS
===========================================================================

decompress release.tgz to $(WHERE_RELEASE_IS)

VOL = $(WHERE_RELEASE_IS)/vol

in $(WHERE_RELEASE_IS)

theory/metatheory_8.3 :
  The Penn Metatheory library, which can also be downloaded from
  * http://www.cis.upenn.edu/~jianzhou/Vellvm/metatheory.tgz

vol/extralibs : Coq plug-ins -- Float and Equations

vol/src3.0/Vellvm        : The Formalisms of LLVM IR
  See the README in the directory

vol/src3.0/Vellvm/Dominators : The dominance analysis
  See the README in the directory.

vol/src3.0/Vellvm/compcert : The modified Compcert Memory Model (1.8)
  http://compcert.inria.fr/release/compcert-1.8.tgz

vol/src3.0/Vellvm/ott : The modified coq libraries from Ott installation,
  which define properties of lists generated by Ott, but fixed some bugs.

vol/src3.0/Vellvm/monads : Monads operations for 'imperative' programming

vol/src3.0/Vellvm/GraphBasics : Graph theory libraries from
  http://coq.inria.fr/pylons/contribs/view/GraphBasics/v8.3

vol/src3.0/Interpreter : Extracted interpreter
  main.ml           : The main entry that reads in an LLVM IR, converts it into
                      the Coq representation, and interpretes it.
  testcases         : Simple test cases of this interpreter, run 'make'

vol/src3.0/llvm-3.0.src : the changed LLVM 3.0 code for extending bindings

vol/src3.0/SoftBound   : A verified Softbound pass.
  See the README in the directory

vol/src3.0/TV/         : A simple trivial translation validator (eq_tv*), which only
                      checks equivalence between corresponding blocks of an input
                      program and the transformed program. The optimization under
                      validation cannot change CFGs.
  See the README in the directory

vol/src3.0/Vminus      : A subset of Vellvm for studying SSA-based optimizations.
  See the README in the directory

vol/src3.0/Transforms   : Optimizations for Vellvm
  See the README in the directory

vol/src3.0/Extraction  : Coq extractions.
  See the README in the directory

===========================================================================
                              DEPENDENCIES
===========================================================================

* OCaml 3.12.0, 3.12.1

* Coq 8.3pl1, Coq 8.4beta

* Two plug-ins of Coq 8.3 to install
  1) Float  $(VOL)/extralibs/Float8.2-1.2r.tgz
     A modified version from (https://lipforge.ens-lyon.fr/projects/pff/) to
     compile in 8.3
  2) Equations $(VOL)/extralibs/mattam82-Coq-Equations-e52679e.tgz
     Same to https://github.com/mattam82/Coq-Equations/tree/8.3

* Ott, which generates Coq definitions from *.ott in $(VOL)/src3.0/Vellvm
  * Download http://www.cl.cam.ac.uk/~pes20/ott/ott_distro_0.20.1.tar.gz
  * Download http://www.cl.cam.ac.uk/~pes20/ott/ott_distro_0.21.2.tar.gz
  * Install following its instructions
  * Add Ott to PATH

* The Penn Metatheory library:
  * $WHERE_RELEASE_IS$/theory/metatheory_8.3
  * or download from http://www.cis.upenn.edu/~jianzhou/Vellvm/metatheory.tgz

* libffi
  http://sourceware.org/libffi/
  The extracted interpreter needs libffi to call external functions.
  This is optional if you don't call the extracted interpreter with external
  fuctions.

  If you install libffi after installing LLVM, you need re-configure and
  recompile the LLVM.

* The modified LLVM 3.0
    * Download the http://www.cis.upenn.edu/~jianzhou/Vellvm/ssa/llvm-3.0.src.tgz
    * tar zfxv llvm-3.0.src.tgz
    * mkdir llvm-3.0-obj
    * mkdir $WHERE_TO_INSTALL
    * cd llvm-3.0-obj
    * ../llvm-3.0.src/configure --prefix=$WHERE_TO_INSTALL --enable-libffi
    * make ENABLE_OPTIMIZED=0    // this is to build a debugging version of
                                 // llvm, in case the modification is buggy...
                                 // 'make' or 'make ENABLE_OPTIMIZED=1' will
                                 // build a release version
    * make ENABLE_OPTIMIZED=0 install

* OcaIDE (Optional)
  http://www.algo-prog.info/ocaide/
  It could be used as a GUI for OCaml extractions.

* LNgen (Optional)
  www.cis.upenn.edu/~baydemir/papers/lngen
  It is used in $(VOL)/src3.0/BigSmallStep, but LNgen only works with Ott (<=0.17).
  If using Ott 0.17, we need to removed '-i' and '-o' options for Ott in
  the corresponding Makefiles.

===========================================================================
                              COMPILING
===========================================================================

In $(VOL)/../theory/metatheory_8.3, make

In $(VOL)/src3.0/, 
  cp Makefile.config.sample Makefile.config
  set the variables in Makefile.config in term of your system.
Then, make

NOTE that our main developement needs ott 0.21.2 (OTT in Makefile.config), while
the proofs of Vminus needs ott 0.20.1 (OTT201 in Makefile.config)

===========================================================================
                              LLVM TestSuite
===========================================================================

* 
  Our repository stores the changed files in the LLVM testsuite
    at $(VOL)/src3.0/llvm-3.0.src/projects/testsuite
  Download http://www.llvm.org/releases/3.0/llvm-test-3.0.tar.gz
  Unzip them at (VOL)/src3.0/llvm-3.0.src/projects/testsuite w/o overwriting 
    those changed files.
  cd $(VOL)/src3.0/llvm-3.0-obj/projects/testsuite
  $(VOL)/src3.0/llvm-3.0-obj/projects/testsuite/configure --prefix=$WHERE_TO_INSTALL --enable-libffi
  make TEST=lynx report report.html

  Most testcases in SingleSource are passed.
  However, only a few of the test cases in MultiSource can be passed.

===========================================================================
                              EDITING
===========================================================================

In $(VOL)/src3.0/, 
  cp .dir-locals.el.sample .dir-locals.el
  set the variables in .dir-locals.el in term of your system.
Then, emacs Coq files in $(VOL)/src3.0/

===========================================================================
                              NOTE
===========================================================================

If OcaIDE is installed, at $(VOL)/src3.0, you can open three eclipse projects :
Parser, SoftBound, and Transforms.
   Setting: Property -> project
    -libs: llvm,llvm_analysis,llvm_executionengine,llvm_target,llvm_bitreader,llvm_bitwriter,llvm_scalar_opts,sub_tv,coq2llvm,coq_pretty_printer,eq_tv
    -cflags: -I /home/jianzhou/Tools/llvm-2.6/lib/ocaml/ -I /home/jianzhou/SVN/sol/vol/src3.0/_build/Extraction/
    -lflags: -cc g++ -I,/home/jianzhou/Tools/llvm-2.6/lib/ocaml/,-I,/home/jianzhou/SVN/sol/vol/src3.0/_build/Extraction/,-cclib,-lffi,-cclib,-L/home/jianzhou/Tools/llvm-2.6/lib/

If you want to run the files inside Emacs, you have to change the load
path settings in src3.0/.dir-locals.el to reflect your local
configuration.
