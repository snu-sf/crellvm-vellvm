===========================================================================
                        GENERAL DESCRIPTION
===========================================================================

This is the source code of the CPP12 submission. The main source code 
submitted to CPP12 is at release/vol/src3.0/Vellvm/Dominators/README.

    * Formalism (the Coq code): 
        http://www.cis.upenn.edu/~jianzhou/Vellvm/dominance/cpp12.tgz
    * LLVM 3.0 with extended OCaml-LLVM bindings: 
        http://www.cis.upenn.edu/~jianzhou/Vellvm/llvm-3.0.src.tgz

===========================================================================
                              CONTENTS
===========================================================================

decompress cpp12.tgz to $(WHERE_RELEASE_IS)

VOL = $(WHERE_RELEASE_IS)/vol

in $(WHERE_RELEASE_IS)

theory/metatheory_8.3 : 
  The Penn Metatheory library, which can also be downloaded from
  * http://www.cis.upenn.edu/~jianzhou/Vellvm/metatheory.tgz

vol/extralibs : Coq plug-ins -- Float and Equations

vol/src3.0/Vellvm/compcert : The modified Compcert Memory Model (1.8)
  http://compcert.inria.fr/release/compcert-1.8.tgz 

vol/src3.0/Vellvm/ott : The modified coq libraries from Ott installation,
  which define properties of lists generated by Ott, but fixed some bugs.

vol/src3.0/Vellvm/monads : Monads operations for 'imperative' programming

vol/src/Vellvm/GraphBasics : Graph theory libraries from
  http://coq.inria.fr/pylons/contribs/view/GraphBasics/v8.3

vol/src3.0/Vellvm        : The Formalisms of LLVM IR

  syntax.ott       : The definitions of LLVM IR in Ott

  infrastructure.v : Operations over LLVM IR, such as, returning types and
                      operands of an instruction, classifying instructions, 
                      traversing functions, checking if an instruction dominates
                      others, building explicit CFGs, ...

  infrastructure_props.v : Properties of LLVM IR, such as, decidability of 
        	     equivalence over types, instructions, and other components,
                     uniqueness of IDs, inclusion between functions and modules,
                     ...
                      
  targetdata.v	    : Calculating bitsize, alignment, padding information in 
                      term of user-defined data layout in IR.

  genericvalues.v   : Representations of run-time values used in the operational
                      semantics, and the LLVM memory model, which is actually a 
                      wrapper of the CompCert memory model, with conversion 
                      between LLVM datatypes and datatypes that CompCert memory 
                      model can handle.

  analysis          : Domination/reachability analysis

  typings.ott       : LLVM IR typings

  opsem.v           : A generic semantics (small-step/big-step) that can be 
                      instantiated as either a deterministic version or a non-
                      deterministic version.

  dopsem.v          : A deterministic instance of Opsem.

  opsem_inst.v      : deterministic instances are included by non-deterministic 
                      instances.

  tactics.v         : Tacticals 

  opsem_props/wf.v  : Progress and preservation of operational semantics

  interpreter.v     : An interpreter that is consistent with small-step 
                      deterministic operational semantics.

vol/src3.0/Vellvm/Dominators : The dominance analysis submitted to CPP12
  See the README in the directory.

vol/src3.0/Extraction  :
  extraction_core.v                  : Extracting an OCaml interpreter
  extraction_dom.v                   : Extracting an OCaml Dominance analysis
  llvm_aux.ml/llvm_pretty_printer.ml : printing LLVM AST
  coq_pretty_printer.ml              : printing Coq AST
  coq2llvm.ml                        : Translating Coq AST to LLVM AST
  llvm2coq.ml                        : Translating LLVM AST to Coq AST
  llvmcaml.ml/Camlcoq.ml             : Realizing performance-sensitive operations
      into C++ definitions, for example, memory operations, int/float operations

===========================================================================
                              DEPENDENCIES
===========================================================================

* OCaml 3.12.0, 3.12.1
  http://caml.inria.fr/pub/distrib/ocaml-3.12/ocaml-3.12.0.tar.gz

* Coq 8.3pl1, Coq 8.4beta

* Two plug-ins of Coq 8.3 to install
  1) Float  $(VOL)/extralibs/Float8.2-1.2r.tgz  
     A modified version from (https://lipforge.ens-lyon.fr/projects/pff/) to 
     compile in 8.3
  2) Equations $(VOL)/extralibs/mattam82-Coq-Equations-e52679e.tgz
     Same to https://github.com/mattam82/Coq-Equations/tree/8.3

* Ott, which generates Coq definitions from *.ott in $(VOL)/src/Vellvm
  * Download http://www.cl.cam.ac.uk/~pes20/ott/ott_distro_0.20.1.tar.gz
  * Install following its instructions
  * Add Ott to PATH

* The Penn Metatheory library: 
  * $WHERE_RELEASE_IS$/theory/metatheory_8.3
  * or download from http://www.cis.upenn.edu/~jianzhou/Vellvm/metatheory.tgz

* libffi
  http://sourceware.org/libffi/
  The extracted interpreter needs libffi to call external functions.
  This is optional if you don't call the extracted interpreter with external
  fuctions.

  If you install libffi after installing LLVM, you need re-configure and 
  recompile the LLVM. 
 
* The modified LLVM 3.0 
    * Download the http://www.cis.upenn.edu/~jianzhou/Vellvm/llvm-3.0.src.tgz
    * tar zfxv llvm-3.0.src.tgz
    * mkdir llvm-3.0-obj
    * mkdir $WHERE_TO_INSTALL
    * cd llvm-3.0-obj
    * ../llvm-3.0.src/configure --prefix=$WHERE_TO_INSTALL --enable-libffi
    * make ENABLE_OPTIMIZED=0    // this is to build a debugging version of
                                 // llvm, in case the modification is buggy...
                                 // 'make' or 'make ENABLE_OPTIMIZED=1' will
                                 // build a release version
    * make ENABLE_OPTIMIZED=0 install

===========================================================================
                              COMPILING
===========================================================================

In $(VOL)/../theory/metatheory_8.3, make

In $(VOL)/src3.0/, 
  cp Makefile.config.sample Makefile.config
  set the variables in Makefile.config in term of your system.
Then, make

===========================================================================
                              EDITING
===========================================================================

In $(VOL)/src3.0/, 
  cp .dir-locals.el.sample .dir-locals.el
  set the variables in .dir-locals.el in term of your system.
Then, emacs Coq files in $(VOL)/src3.0/

