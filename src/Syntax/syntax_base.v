(* generated by Ott 0.25 from: syntax_base.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import ott_list_core.


Require Import ListSet.
Require Import Logic_Type.
Require Import monad.
Require Import Metatheory.
Require Import datatype_base.
Require Import alist.

Module LLVMsyntax_base.

Section Lists.

  Variable A : Type.

  Fixpoint last_opt (l:list A) {struct l} : option A :=
  match l with
    | nil => None
    | a :: nil => Some a
    | a :: l' => last_opt l'
  end.

End Lists.

Local Open Scope nat_scope.


Definition Int := INTEGER.t. (*r Int *)
Definition Float := FLOAT.t. (*r FLOAT *)
Definition sz := Size.t. (*r sz *)
Definition id := atom. (*r identities *)
Definition l := atom. (*r labels *)
Definition align := Align.t. (*r align *)
Definition i := nat. (*r index *)

Inductive floating_point : Set :=  (*r floating point types *)
 | fp_float : floating_point (*r float *)
 | fp_double : floating_point (*r double *)
 | fp_fp128 : floating_point (*r fp128 *)
 | fp_x86_fp80 : floating_point (*r x86fp80 *)
 | fp_ppc_fp128 : floating_point (*r ppcfp128 *).

Definition varg : Set := option sz.

Inductive castop : Set :=  (*r cast operators *)
 | castop_fptoui : castop (*r fptoui *)
 | castop_fptosi : castop (*r fptosi *)
 | castop_uitofp : castop (*r uitofp *)
 | castop_sitofp : castop (*r sitofp *)
 | castop_ptrtoint : castop (*r ptrtoint *)
 | castop_inttoptr : castop (*r inttoptr *)
 | castop_bitcast : castop (*r bitcast *).

Inductive bop : Set :=  (*r binary operators *)
 | bop_add : bop (*r add *)
 | bop_sub : bop (*r sub *)
 | bop_mul : bop (*r mul *)
 | bop_udiv : bop (*r udiv *)
 | bop_sdiv : bop (*r sdiv *)
 | bop_urem : bop (*r urem *)
 | bop_srem : bop (*r srem *)
 | bop_shl : bop (*r shl *)
 | bop_lshr : bop (*r lshr *)
 | bop_ashr : bop (*r ashr *)
 | bop_and : bop (*r and *)
 | bop_or : bop (*r or *)
 | bop_xor : bop (*r xor *).

Inductive extop : Set :=  (*r ext operators *)
 | extop_z : extop (*r zext *)
 | extop_s : extop (*r sext *)
 | extop_fp : extop (*r fpext *).

Inductive typ : Set :=  (*r type *)
 | typ_int (sz5:sz) (*r integer *)
 | typ_floatpoint (floating_point5:floating_point) (*r floating point types *)
 | typ_void : typ (*r void *)
 | typ_label : typ (*r label *)
 | typ_metadata : typ (*r metadata *)
 | typ_array (sz5:sz) (typ5:typ) (*r array *)
 | typ_function (typ_5:typ) (_:list typ) (varg5:varg) (*r function *)
 | typ_struct (_:list typ) (*r structure *)
 | typ_pointer (typ5:typ) (*r pointer *)
 | typ_namedt (id5:id) (*r namedt *).

Definition inbounds : Set := bool.

Inductive truncop : Set :=  (*r trunc operators *)
 | truncop_int : truncop (*r trunc *)
 | truncop_fp : truncop (*r fptrunc *).

Inductive fcond : Set :=  (*r float condition code *)
 | fcond_false : fcond (*r false *)
 | fcond_oeq : fcond (*r oeq *)
 | fcond_ogt : fcond (*r ogt *)
 | fcond_oge : fcond (*r oge *)
 | fcond_olt : fcond (*r olt *)
 | fcond_ole : fcond (*r ole *)
 | fcond_one : fcond (*r one *)
 | fcond_ord : fcond (*r ord *)
 | fcond_ueq : fcond (*r ueq *)
 | fcond_ugt : fcond (*r ugt *)
 | fcond_uge : fcond (*r uge *)
 | fcond_ult : fcond (*r ult *)
 | fcond_ule : fcond (*r ule *)
 | fcond_une : fcond (*r une *)
 | fcond_uno : fcond (*r uno *)
 | fcond_true : fcond (*r true *).

Inductive cond : Set :=  (*r condition code *)
 | cond_eq : cond (*r eq *)
 | cond_ne : cond (*r ne *)
 | cond_ugt : cond (*r ugt *)
 | cond_uge : cond (*r uge *)
 | cond_ult : cond (*r ult *)
 | cond_ule : cond (*r ule *)
 | cond_sgt : cond (*r sgt *)
 | cond_sge : cond (*r sge *)
 | cond_slt : cond (*r slt *)
 | cond_sle : cond (*r sle *).

Inductive fbop : Set :=  (*r floating point binops *)
 | fbop_fadd : fbop (*r fadd *)
 | fbop_fsub : fbop (*r fsub *)
 | fbop_fmul : fbop (*r fmul *)
 | fbop_fdiv : fbop (*r fdiv *)
 | fbop_frem : fbop (*r frem *).

Inductive const : Set :=  (*r constant *)
 | const_zeroinitializer (typ5:typ) (*r zeroinitializer *)
 | const_int (sz5:sz) (Int5:Int) (*r int *)
 | const_floatpoint (floating_point5:floating_point) (Float5:Float) (*r floatpoint *)
 | const_undef (typ5:typ) (*r undef *)
 | const_null (typ5:typ) (*r null *)
 | const_arr (typ5:typ) (_:list const) (*r array *)
 | const_struct (typ5:typ) (_:list const) (*r struct *)
 | const_gid (typ5:typ) (id5:id) (*r gid *)
 | const_truncop (truncop5:truncop) (const5:const) (typ5:typ) (*r truncop *)
 | const_extop (extop5:extop) (const5:const) (typ5:typ) (*r extop *)
 | const_castop (castop5:castop) (const5:const) (typ5:typ) (*r castop *)
 | const_gep (inbounds5:inbounds) (const_5:const) (_:list const) (*r gep *)
 | const_select (const0:const) (const1:const) (const2:const) (*r select *)
 | const_icmp (cond5:cond) (const1:const) (const2:const) (*r icmp *)
 | const_fcmp (fcond5:fcond) (const1:const) (const2:const) (*r fcmp *)
 | const_extractvalue (const_5:const) (_:list const) (*r extractvalue *)
 | const_insertvalue (const_5:const) (const':const) (_:list const) (*r extractvalue *)
 | const_bop (bop5:bop) (const1:const) (const2:const) (*r bop *)
 | const_fbop (fbop5:fbop) (const1:const) (const2:const) (*r fbop *).

Inductive attribute : Set :=  (*r attribute *)
 | attribute_zext : attribute
 | attribute_sext : attribute
 | attribute_noreturn : attribute
 | attribute_inreg : attribute
 | attribute_structret : attribute
 | attribute_nounwind : attribute
 | attribute_noalias : attribute
 | attribute_byval : attribute
 | attribute_nest : attribute
 | attribute_readnone : attribute
 | attribute_readonly : attribute
 | attribute_noinline : attribute
 | attribute_alwaysinline : attribute
 | attribute_optforsize : attribute
 | attribute_stackprotect : attribute
 | attribute_stackprotectreq : attribute
 | attribute_nocapture : attribute
 | attribute_noredzone : attribute
 | attribute_implicitfloat : attribute
 | attribute_naked : attribute.

Inductive value : Type :=  (*r values *)
 | value_id (id5:id) (*r id *)
 | value_const (const5:const) (*r constant *).

Definition attributes : Set := (list attribute).

Definition tailc : Set := bool.

Inductive callconv : Set :=  (*r calling convention *)
 | callconv_ccc : callconv
 | callconv_fast : callconv
 | callconv_cold : callconv
 | callconv_x86_stdcall : callconv
 | callconv_x86_fastcall : callconv.

Definition param : Set := (typ * attributes * value)%type.

Inductive clattrs : Set :=  (*r call attributtes *)
 | clattrs_intro (tailc5:tailc) (callconv5:callconv) (attributes1:attributes) (attributes2:attributes).

Definition params : Set := (list (typ * attributes * value)).

Definition noret : Set := bool.

Inductive cmd : Set :=  (*r commands *)
 | insn_bop (id5:id) (bop5:bop) (sz5:sz) (value1:value) (value2:value) (*r bop *)
 | insn_fbop (id5:id) (fbop5:fbop) (floating_point5:floating_point) (value1:value) (value2:value) (*r fbop *)
 | insn_extractvalue (id5:id) (typ5:typ) (value5:value) (_:list const) (typ':typ) (*r extractvalue *)
 | insn_insertvalue (id5:id) (typ5:typ) (value5:value) (typ':typ) (value':value) (_:list const) (*r insertvalue *)
 | insn_malloc (id5:id) (typ5:typ) (value5:value) (align5:align) (*r malloc *)
 | insn_free (id5:id) (typ5:typ) (value5:value) (*r free *)
 | insn_alloca (id5:id) (typ5:typ) (value5:value) (align5:align) (*r alloca *)
 | insn_load (id5:id) (typ5:typ) (value1:value) (align5:align) (*r load *)
 | insn_store (id5:id) (typ5:typ) (value1:value) (value2:value) (align5:align) (*r store *)
 | insn_gep (id5:id) (inbounds5:inbounds) (typ5:typ) (value_5:value) (_:list (sz*value)) (typ':typ) (*r getelementptr *)
 | insn_trunc (id5:id) (truncop5:truncop) (typ1:typ) (value1:value) (typ2:typ) (*r trunc *)
 | insn_ext (id5:id) (extop5:extop) (typ1:typ) (value5:value) (typ2:typ) (*r ext *)
 | insn_cast (id5:id) (castop5:castop) (typ1:typ) (value1:value) (typ2:typ) (*r cast *)
 | insn_icmp (id5:id) (cond5:cond) (typ5:typ) (value1:value) (value2:value) (*r icmp *)
 | insn_fcmp (id5:id) (fcond5:fcond) (floating_point5:floating_point) (value1:value) (value2:value) (*r fcmp *)
 | insn_select (id5:id) (value0:value) (typ5:typ) (value1:value) (value2:value) (*r select *)
 | insn_call (id5:id) (noret5:noret) (clattrs5:clattrs) (typ5:typ) (varg5:varg) (value0:value) (params5:params) (*r call *).

Inductive phinode : Set :=  (*r phinodes *)
 | insn_phi (id5:id) (typ5:typ) (_:list (value*l)) (*r def *).

Definition cmds : Set := (list cmd).

Inductive terminator : Set :=  (*r termniators *)
 | insn_return (id5:id) (typ5:typ) (value5:value) (*r return *)
 | insn_return_void (id5:id) (*r return void *)
 | insn_br (id5:id) (value5:value) (l1:l) (l2:l) (*r br *)
 | insn_br_uncond (id5:id) (l5:l) (*r unconditional br *)
 | insn_unreachable (id5:id) (*r unreachable *).

Definition phinodes : Set := (list phinode).

Definition arg : Set := (typ * attributes * id)%type.

Inductive linkage : Set :=  (*r linkage *)
 | linkage_external : linkage
 | linkage_available_externally : linkage
 | linkage_link_once : linkage
 | linkage_link_once_odr : linkage
 | linkage_weak : linkage
 | linkage_weak_odr : linkage
 | linkage_appending : linkage
 | linkage_internal : linkage
 | linkage_private : linkage
 | linkage_linker_private : linkage
 | linkage_dllimport : linkage
 | linkage_dllexport : linkage
 | linkage_external_weak : linkage
 | linkage_ghost : linkage
 | linkage_common : linkage.

Inductive visibility : Set :=  (*r visibility *)
 | visibility_default : visibility
 | visibility_hidden : visibility
 | visibility_protected : visibility.

Inductive stmts : Set :=  (*r statements *)
 | stmts_intro (phinodes5:phinodes) (cmds5:cmds) (terminator5:terminator).

Definition args : Set := (list (typ*attributes*id)).

Inductive fnattrs : Set :=  (*r function attributtes *)
 | fnattrs_intro (linkage5:linkage) (visibility5:visibility) (callconv5:callconv) (attributes1:attributes) (attributes2:attributes).

Definition block : Set := (prod l stmts).

Inductive external_id : Set :=  (*r external ids *)
 | eid_malloc : external_id
 | eid_free : external_id
 | eid_io : external_id
 | eid_other : external_id.

Inductive intrinsic_id : Set :=  (*r intrinsic ids *)
 | iid_expect : intrinsic_id
 | iid_setjmp : intrinsic_id
 | iid_sigsetjmp : intrinsic_id
 | iid_longjmp : intrinsic_id
 | iid_siglongjmp : intrinsic_id
 | iid_ctpop : intrinsic_id
 | iid_bswap : intrinsic_id
 | iid_ctlz : intrinsic_id
 | iid_cttz : intrinsic_id
 | iid_stacksave : intrinsic_id
 | iid_stackrestore : intrinsic_id
 | iid_returnaddress : intrinsic_id
 | iid_frameaddress : intrinsic_id
 | iid_prefetch : intrinsic_id
 | iid_pcmarker : intrinsic_id
 | iid_readcyclecounter : intrinsic_id
 | iid_dbg_declare : intrinsic_id
 | iid_eh_exception : intrinsic_id
 | iid_eh_selector : intrinsic_id
 | iid_eh_typeidfor : intrinsic_id
 | iid_var_annotation : intrinsic_id
 | iid_memcpy : intrinsic_id
 | iid_memmove : intrinsic_id
 | iid_memset : intrinsic_id
 | iid_sqrt : intrinsic_id
 | iid_log : intrinsic_id
 | iid_log2 : intrinsic_id
 | iid_log10 : intrinsic_id
 | iid_exp : intrinsic_id
 | iid_exp2 : intrinsic_id
 | iid_pow : intrinsic_id
 | iid_flt_rounds : intrinsic_id
 | iid_invariantstart : intrinsic_id
 | iid_lifetimestart : intrinsic_id
 | iid_invariantend : intrinsic_id
 | iid_lifetimeend : intrinsic_id
 | iid_unsupported : intrinsic_id.

Inductive gvar_spec : Set :=  (*r the specification of global variables *)
 | gvar_spec_global : gvar_spec (*r global *)
 | gvar_spec_constant : gvar_spec (*r constant *).

Inductive fheader : Set :=  (*r function headers *)
 | fheader_intro (fnattrs5:fnattrs) (typ5:typ) (id5:id) (args5:args) (varg5:varg).

Definition blocks : Set := (list block).

Inductive deckind : Set :=  (*r declaration kinds *)
 | deckind_intrinsic (intrinsic_id5:intrinsic_id)
 | deckind_external (external_id5:external_id).

Inductive gvar : Set :=  (*r global variables *)
 | gvar_intro (id5:id) (linkage5:linkage) (gvar_spec5:gvar_spec) (typ5:typ) (const5:const) (align5:align) (*r intro *)
 | gvar_external (id5:id) (gvar_spec5:gvar_spec) (typ5:typ) (*r external *).

Inductive fdef : Set :=  (*r function definitions *)
 | fdef_intro (fheader5:fheader) (blocks5:blocks).

Inductive fdec : Set :=  (*r function declarations *)
 | fdec_intro (fheader5:fheader) (deckind5:deckind).

Inductive layout : Set :=  (*r data layout *)
 | layout_be : layout (*r bigendian *)
 | layout_le : layout (*r littleendian *)
 | layout_ptr (sz5:sz) (align0:align) (align1:align) (*r ptr *)
 | layout_int (sz5:sz) (align0:align) (align1:align) (*r int *)
 | layout_float (sz5:sz) (align0:align) (align1:align) (*r float *)
 | layout_aggr (sz5:sz) (align0:align) (align1:align) (*r aggregate *)
 | layout_stack (sz5:sz) (align0:align) (align1:align) (*r stack *)
 | layout_vector (sz5:sz) (align0:align) (align1:align) (*r vector *).

Inductive product : Set :=  (*r products *)
 | product_gvar (gvar5:gvar) (*r global variable *)
 | product_fdec (fdec5:fdec) (*r function declaration *)
 | product_fdef (fdef5:fdef) (*r function definition *).

Definition namedt : Set := (prod id (list typ)).

Definition layouts : Set := (list layout).

Definition products : Set := (list product).

Definition namedts : Set := (list namedt).

Inductive module : Set :=  (*r modules *)
 | module_intro (layouts5:layouts) (namedts5:namedts) (products5:products) (*r prods *).

Inductive insn : Set :=  (*r instructions *)
 | insn_phinode (phinode5:phinode) (*r phinodes *)
 | insn_cmd (cmd5:cmd) (*r commands *)
 | insn_terminator (terminator5:terminator) (*r terminator *).

Definition modules : Set := (list module).

Definition ls : Set := (list l).

Definition insns : Set := (list insn).

Definition opt_id : Set := option id.

Inductive opt_stmts : Set :=  (*r option stmt *)
.

Inductive id_binding : Set :=  (*r id bindings *)
 | id_binding_none : id_binding (*r none *)
 | id_binding_cmd (cmd5:cmd) (*r cmd *)
 | id_binding_phinode (phinode5:phinode) (*r phinode *)
 | id_binding_terminator (terminator5:terminator) (*r terminator *)
 | id_binding_gvar (gvar5:gvar) (*r gvar *)
 | id_binding_fdec (fdec5:fdec) (*r fdec *)
 | id_binding_arg (arg5:arg) (*r arg *).

Definition opt_value : Set := option value.

Definition system : Set := modules.

Definition opt_block : Set := option block.

Definition ids : Set := (list id).

Definition opt_fdec : Set := option fdec.

Definition opt_fdef : Set := option fdef.

Definition targetdata : Set := (prod (list layout) (list namedt)).

Definition opt_l : Set := option l.

Definition opt_Int : Set := option Int.

Definition opt_typ : Set := option typ.
(** induction principles *)
Section typ_rect.

Variables
  (P_list_typ : list typ -> Prop)
  (P_typ : typ -> Prop).

Hypothesis
  (H_typ_int : forall (sz5:sz), P_typ (typ_int sz5))
  (H_typ_floatpoint : forall (floating_point5:floating_point), P_typ (typ_floatpoint floating_point5))
  (H_typ_void : P_typ typ_void)
  (H_typ_label : P_typ typ_label)
  (H_typ_metadata : P_typ typ_metadata)
  (H_typ_array : forall (sz5:sz), forall (typ5:typ), P_typ typ5 -> P_typ (typ_array sz5 typ5))
  (H_typ_function : forall (typ_list:list typ), P_list_typ typ_list -> forall (typ_5:typ), P_typ typ_5 -> forall (varg5:varg), P_typ (typ_function typ_5 typ_list varg5))
  (H_typ_struct : forall (typ_list:list typ), P_list_typ typ_list -> P_typ (typ_struct typ_list))
  (H_typ_pointer : forall (typ5:typ), P_typ typ5 -> P_typ (typ_pointer typ5))
  (H_typ_namedt : forall (id5:id), P_typ (typ_namedt id5))
  (H_list_typ_nil : P_list_typ nil)
  (H_list_typ_cons : forall (typ0:typ), P_typ typ0 -> forall (typ_l:list typ), P_list_typ typ_l -> P_list_typ (cons typ0 typ_l)).

Fixpoint typ_ott_ind (n:typ) : P_typ n :=
  match n as x return P_typ x with
  | (typ_int sz5) => H_typ_int sz5
  | (typ_floatpoint floating_point5) => H_typ_floatpoint floating_point5
  | typ_void => H_typ_void 
  | typ_label => H_typ_label 
  | typ_metadata => H_typ_metadata 
  | (typ_array sz5 typ5) => H_typ_array sz5 typ5 (typ_ott_ind typ5)
  | (typ_function typ_5 typ_list varg5) => H_typ_function typ_list (((fix typ_list_ott_ind (typ_l:list typ) : P_list_typ typ_l := match typ_l as x return P_list_typ x with nil => H_list_typ_nil | cons typ1 xl => H_list_typ_cons typ1(typ_ott_ind typ1)xl (typ_list_ott_ind xl) end)) typ_list) typ_5 (typ_ott_ind typ_5) varg5
  | (typ_struct typ_list) => H_typ_struct typ_list (((fix typ_list_ott_ind (typ_l:list typ) : P_list_typ typ_l := match typ_l as x return P_list_typ x with nil => H_list_typ_nil | cons typ2 xl => H_list_typ_cons typ2(typ_ott_ind typ2)xl (typ_list_ott_ind xl) end)) typ_list)
  | (typ_pointer typ5) => H_typ_pointer typ5 (typ_ott_ind typ5)
  | (typ_namedt id5) => H_typ_namedt id5
end.

End typ_rect.


Section const_rect.

Variables
  (P_list_const : list const -> Prop)
  (P_const : const -> Prop).

Hypothesis
  (H_const_zeroinitializer : forall (typ5:typ), P_const (const_zeroinitializer typ5))
  (H_const_int : forall (sz5:sz), forall (Int5:Int), P_const (const_int sz5 Int5))
  (H_const_floatpoint : forall (floating_point5:floating_point), forall (Float5:Float), P_const (const_floatpoint floating_point5 Float5))
  (H_const_undef : forall (typ5:typ), P_const (const_undef typ5))
  (H_const_null : forall (typ5:typ), P_const (const_null typ5))
  (H_const_arr : forall (const_list:list const), P_list_const const_list -> forall (typ5:typ), P_const (const_arr typ5 const_list))
  (H_const_struct : forall (const_list:list const), P_list_const const_list -> forall (typ5:typ), P_const (const_struct typ5 const_list))
  (H_const_gid : forall (typ5:typ), forall (id5:id), P_const (const_gid typ5 id5))
  (H_const_truncop : forall (truncop5:truncop), forall (const5:const), P_const const5 -> forall (typ5:typ), P_const (const_truncop truncop5 const5 typ5))
  (H_const_extop : forall (extop5:extop), forall (const5:const), P_const const5 -> forall (typ5:typ), P_const (const_extop extop5 const5 typ5))
  (H_const_castop : forall (castop5:castop), forall (const5:const), P_const const5 -> forall (typ5:typ), P_const (const_castop castop5 const5 typ5))
  (H_const_gep : forall (const_list:list const), P_list_const const_list -> forall (inbounds5:inbounds), forall (const_5:const), P_const const_5 -> P_const (const_gep inbounds5 const_5 const_list))
  (H_const_select : forall (const0:const), P_const const0 -> forall (const1:const), P_const const1 -> forall (const2:const), P_const const2 -> P_const (const_select const0 const1 const2))
  (H_const_icmp : forall (cond5:cond), forall (const1:const), P_const const1 -> forall (const2:const), P_const const2 -> P_const (const_icmp cond5 const1 const2))
  (H_const_fcmp : forall (fcond5:fcond), forall (const1:const), P_const const1 -> forall (const2:const), P_const const2 -> P_const (const_fcmp fcond5 const1 const2))
  (H_const_extractvalue : forall (const_list:list const), P_list_const const_list -> forall (const_5:const), P_const const_5 -> P_const (const_extractvalue const_5 const_list))
  (H_const_insertvalue : forall (const_list:list const), P_list_const const_list -> forall (const_5:const), P_const const_5 -> forall (const':const), P_const const' -> P_const (const_insertvalue const_5 const' const_list))
  (H_const_bop : forall (bop5:bop), forall (const1:const), P_const const1 -> forall (const2:const), P_const const2 -> P_const (const_bop bop5 const1 const2))
  (H_const_fbop : forall (fbop5:fbop), forall (const1:const), P_const const1 -> forall (const2:const), P_const const2 -> P_const (const_fbop fbop5 const1 const2))
  (H_list_const_nil : P_list_const nil)
  (H_list_const_cons : forall (const0:const), P_const const0 -> forall (const_l:list const), P_list_const const_l -> P_list_const (cons const0 const_l)).

Fixpoint const_ott_ind (n:const) : P_const n :=
  match n as x return P_const x with
  | (const_zeroinitializer typ5) => H_const_zeroinitializer typ5
  | (const_int sz5 Int5) => H_const_int sz5 Int5
  | (const_floatpoint floating_point5 Float5) => H_const_floatpoint floating_point5 Float5
  | (const_undef typ5) => H_const_undef typ5
  | (const_null typ5) => H_const_null typ5
  | (const_arr typ5 const_list) => H_const_arr const_list (((fix const_list_ott_ind (const_l:list const) : P_list_const const_l := match const_l as x return P_list_const x with nil => H_list_const_nil | cons const1 xl => H_list_const_cons const1(const_ott_ind const1)xl (const_list_ott_ind xl) end)) const_list) typ5
  | (const_struct typ5 const_list) => H_const_struct const_list (((fix const_list_ott_ind (const_l:list const) : P_list_const const_l := match const_l as x return P_list_const x with nil => H_list_const_nil | cons const2 xl => H_list_const_cons const2(const_ott_ind const2)xl (const_list_ott_ind xl) end)) const_list) typ5
  | (const_gid typ5 id5) => H_const_gid typ5 id5
  | (const_truncop truncop5 const5 typ5) => H_const_truncop truncop5 const5 (const_ott_ind const5) typ5
  | (const_extop extop5 const5 typ5) => H_const_extop extop5 const5 (const_ott_ind const5) typ5
  | (const_castop castop5 const5 typ5) => H_const_castop castop5 const5 (const_ott_ind const5) typ5
  | (const_gep inbounds5 const_5 const_list) => H_const_gep const_list (((fix const_list_ott_ind (const_l:list const) : P_list_const const_l := match const_l as x return P_list_const x with nil => H_list_const_nil | cons const3 xl => H_list_const_cons const3(const_ott_ind const3)xl (const_list_ott_ind xl) end)) const_list) inbounds5 const_5 (const_ott_ind const_5)
  | (const_select const0 const1 const2) => H_const_select const0 (const_ott_ind const0) const1 (const_ott_ind const1) const2 (const_ott_ind const2)
  | (const_icmp cond5 const1 const2) => H_const_icmp cond5 const1 (const_ott_ind const1) const2 (const_ott_ind const2)
  | (const_fcmp fcond5 const1 const2) => H_const_fcmp fcond5 const1 (const_ott_ind const1) const2 (const_ott_ind const2)
  | (const_extractvalue const_5 const_list) => H_const_extractvalue const_list (((fix const_list_ott_ind (const_l:list const) : P_list_const const_l := match const_l as x return P_list_const x with nil => H_list_const_nil | cons const4 xl => H_list_const_cons const4(const_ott_ind const4)xl (const_list_ott_ind xl) end)) const_list) const_5 (const_ott_ind const_5)
  | (const_insertvalue const_5 const' const_list) => H_const_insertvalue const_list (((fix const_list_ott_ind (const_l:list const) : P_list_const const_l := match const_l as x return P_list_const x with nil => H_list_const_nil | cons const5 xl => H_list_const_cons const5(const_ott_ind const5)xl (const_list_ott_ind xl) end)) const_list) const_5 (const_ott_ind const_5) const' (const_ott_ind const')
  | (const_bop bop5 const1 const2) => H_const_bop bop5 const1 (const_ott_ind const1) const2 (const_ott_ind const2)
  | (const_fbop fbop5 const1 const2) => H_const_fbop fbop5 const1 (const_ott_ind const1) const2 (const_ott_ind const2)
end.

End const_rect.

End LLVMsyntax_base.




