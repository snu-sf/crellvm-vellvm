Require Import Ensembles.
Require Import syntax.
Require Import infrastructure.
Require Import List.
Require Import Arith.
Require Import monad.
Require Import Metatheory.
Require Import genericvalues.
Require Import alist.
Require Import Values.
Require Import Memory.
Require Import Integers.
Require Import events.
Require Import Integers.
Require Import Coqlib.
Require Import targetdata.
Require Import infrastructure_props.
Require Import typings.
Require Import genericvalues_inject.
Require Import vellvm_tactics.

Import LLVMsyntax.
Import LLVMtd.
Import LLVMinfra.
Import LLVMgv.
Import LLVMtypings.

Definition find_symbol TD (ge:list (id * GenericValue)) (gid:id) 
  : option Values.block :=
match lookupAL _ ge gid with 
| Some gv =>
    match GV2ptr TD (getPointerSize TD) gv with
    | Some (Vptr b _) => Some b
    | _ => None
    end
| None => None
end.

Definition find_var_info TD (ge:list (id * GenericValue)) (b:Values.block) 
  : option GenericValue :=
List.fold_left 
  (fun acc elt =>
   let '(_, gv) := elt in
   match acc with
   | Some _ => acc
   | None =>
       match GV2ptr TD (getPointerSize TD) gv with
       | Some (Vptr b' _) =>
           if peq b b' then Some gv else None
       | _ => None
       end
   end
  ) ge None.

Lemma GV2ptr_inv: forall TD sz gv v,
  GV2ptr TD sz gv = Some v ->
  exists b, exists ofs, exists m, v = Vptr b ofs /\ gv = (v,m)::nil.
Proof.
  unfold GV2ptr.
  intros.
  destruct gv as [|[[]]]; tinv H.
  destruct gv as [|]; inv H.
  eauto.
Qed.

(* Originally Copied from CompCert Events.v 1.9.1 START *)

(** * Semantics of external functions *)

(** For each external function, its behavior is defined by a predicate relating:
- the global environment
- the values of the arguments passed to this function
- the memory state before the call
- the result value of the call
- the memory state after the call
- the trace generated by the call (can be empty).
*)

(** We now specify the expected properties of this predicate. *)

Set Implicit Arguments.

Inductive option_f2 (A B:Type) (f: A -> B -> Prop)
  : option A -> option B -> Prop :=
| option_f2_Some: forall a b, f a b -> option_f2 f (Some a) (Some b)
| option_f2_None: option_f2 f None None.


(** ** Semantics of IO system calls. *)

(** ** Semantics of other system calls. *)

(* Originally Copied from CompCert Events.v 1.9.1 END *)

(* FIXME: Because memory only stores concrete values, the semantics branches when
   storing data. However, at rule malloc/free/load/store/call/..., the rules also 
   branch. Thoses rules should do what bop/fop/trunc do by lifting det-rules to 
   non-det rules!!! *)

Parameter callIOFunction : TargetData -> list (atom*GenericValue) -> mem -> 
  id -> typ -> list typ -> list GenericValue -> 
  option ((option GenericValue)*trace*mem).

Parameter callExternalFunction : TargetData -> list (atom*GenericValue) -> 
  mem -> id -> typ -> list typ -> list GenericValue -> 
  option ((option GenericValue)*mem).

Parameter callIntrinsics : TargetData -> list (atom*GenericValue) -> mem -> 
  intrinsic_id -> typ -> list typ -> list GenericValue -> 
  option ((option GenericValue)*mem).

Definition callMalloc (TD:TargetData) (M:mem) (parameters: list GenericValue) 
  : option ((option GenericValue)*mem) :=
match parameters with
| gn::_ => 
    match malloc TD M Size.One gn Align.Four with
    | Some (M', mb) => Some (Some (blk2GV TD mb), M')
    | _ => None
    end
| _ => 
   (* We should prove that given a well-formed program, this case won't happen
      because malloc must have one parameters *)
   None
end.

Definition callFree (TD:TargetData) (M:mem) (parameters: list GenericValue) 
  : option ((option GenericValue)*mem) :=
match parameters with
| ptr::_ => 
    match free TD M ptr with
    | Some M' => Some (None, M')
    | _ => None
    end
| _ => 
   (* We should prove that given a well-formed program, this case won't happen
      because free must have one parameters *)
   None
end.

Definition add_empty_trace (input: option ((option GenericValue)*mem)):
  option ((option GenericValue)*trace*mem) :=
match input with
| None => None
| Some (or, M') => Some (or, E0, M')
end.

Definition callExternalOrIntrinsics (TD:TargetData) 
  (gl:list (atom*GenericValue)) (M:mem) (fid:id) 
  (tret: typ) (targs: list typ) (dck:deckind) 
  (parameters: list GenericValue) : option ((option GenericValue)*trace*mem) :=
let targs' := targs in
match dck with
| deckind_intrinsic iid => 
    add_empty_trace (callIntrinsics TD gl M iid tret targs' parameters)
| deckind_external eid_malloc => add_empty_trace (callMalloc TD M parameters)
| deckind_external eid_free => add_empty_trace (callFree TD M parameters)
| deckind_external eid_io => callIOFunction TD gl M fid tret targs' parameters
| deckind_external eid_other => 
    add_empty_trace (callExternalFunction TD gl M fid tret targs' parameters)
end.

