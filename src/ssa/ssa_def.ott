
% Syntax of Static Single Assignment(SSA)

embed 
{{ coq
Require Import ListSet.
Require Import Logic_Type.
Require Import monad.
Require Import Metatheory.

Module LLVMsyntax.

Section Lists.

  Variable A : Type.

  Fixpoint last_opt (l:list A) {struct l} : option A := 
  match l with 
    | nil => None 
    | a :: nil => Some a 
    | a :: l' => last_opt l'
  end.

End Lists. 
}}

metavar INT ::= {{ com a natural number }}
  {{ coq nat }} {{ lex numeral  }}
metavar id ::= {{ com identities }}
  {{ coq atom }} {{ lex numeral  }}
metavar l ::= {{ com labels }}
  {{ coq atom }} {{ lex numeral  }}
metavar align ::= {{ com align }}
  {{ coq nat }} {{ lex numeral }}
metavar sz ::= {{ com sz }}
  {{ coq nat }} {{ lex numeral }}
indexvar i, j, n ::= {{ com index }}
  {{ coq nat }}
 
grammar

opt_INT {{ tex \mathit{opt_{INT} } }} :: 'opt_INT_'	::=			{{ com option INT }} {{ coq option INT }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  INT						:: M :: some  		{{ com some }} {{ coq (Some [[INT]]) }}

opt_l {{ tex \mathit{opt_{l} } }} :: 'opt_l_'		::=			{{ com option l }} {{ coq option l }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  l							:: M :: some  		{{ com some }} {{ coq (Some [[l]]) }}

opt_id {{ tex \mathit{opt_{id} } }} :: 'opt_id_'	::=			{{ com option id }} {{ coq option id }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  id							:: M :: some  		{{ com some }} {{ coq (Some [[id]]) }}

ids {{ tex \mathit{\{id\} } }} :: 'ids_'		::=			{{ com id set }}
       	   			      	 					{{ coq (list id) }}
  | empty						::   :: empty		{{ coq (empty_set id) }}
  | id1 .. idn						::   :: set		{{ coq [[id1 .. idn]] }}
  | ids , id						::   :: cons		{{ coq (set_add eq_dec [[id]] [[ids]]) }}
  | ids ; ids'						::   :: append		{{ coq (set_union eq_dec [[ids]] [[ids']]) }}
  | ( ids )						:: S :: paren		{{ coq [[ ids ]] }}

layout :: 'layout_'					::=  			{{ com data layout }}
  | bigendian						::   :: be 		{{ com bigendian }}
  | littleendian					::   :: le	 	{{ com littleendian }}
  | ptr sz align0 align1				::   :: ptr		{{ com ptr }}
  | int sz align0 align1				::   :: int		{{ com int }}
  | aggr sz align0 align1			     	::   :: aggr		{{ com aggregate }}
  | stack sz align0 align1				::   :: stack		{{ com stack }}

layouts {{ tex \mathit{\overline{layout} } }} :: 'layouts_'	::=  		{{ com layouts }}
     	    			     	   					{{ coq (list layout) }}
  | []   		 				::   :: nil		{{ coq nil }}
  | layouts , layout					::   :: cons		{{ coq ([[layout]]::[[lists]]) }}
  | layouts ; layouts'					::   :: append		{{ coq ([[lists]]++[[lists']]) }}
  | ( layouts )						:: S :: paren           {{ coq [[ lists ]] }}

typ :: 'typ_'						::=			{{ com type }}
  | int sz                    				::   :: int         	{{ com integer }}
  %| float						::   :: float		{{ com float }}
  %| double						::   :: double          {{ com double }}
  %| fp128						::   :: fp128           {{ com fp128 }}
  | void                      				::   :: void        	{{ com void }}
  | label                                               ::   :: label           {{ com label }}
  | metadata                                            ::   :: metadata        {{ com metadata }}
  | [ sz * typ ]              				::   :: array       	{{ com array }}
  | typ ( </ typj // j /> )  				::   :: function    	{{ com function }}
  | { </ typj // j /> }       				::   :: struct      	{{ com structure }}
  | typ *                     				::   :: pointer     	{{ com pointer }}
  %| < sz * typ >             				::   :: vector       	{{ com vector }}
  %| opaque  						::   :: opaque          {{ com opaque }}
  % x86_fp80
  % ppc_fp128
  % union
  | ( typ )						:: S :: paren           {{ coq [[ typ ]] }}

opt_typ {{ tex \mathit{opt_{typ} } }} :: 'opt_typ_'	::=			{{ com option typ }} {{ coq option typ }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  typ						:: M :: some  		{{ com some }} {{ coq (Some [[typ]]) }}

const :: 'const_'					::=  			{{ com constant }}
  | ( int sz ) INT					::   :: int		{{ com int }}	
  | typ undef						::   :: undef		{{ com undef }}
  | ( typ * ) null					::   :: null		{{ com null }}
  | [ </ constj // j /> ]				::   :: arr             {{ com array }}
  | { </ constj // j /> }				::   :: struct          {{ com struct }}
  | typ * id						::   :: gid		{{ com gid }}
  | ( const )						:: S :: paren           {{ coq [[ const ]] }}

value :: 'value_'					::=  			{{ com values }}
  | id	 						::   :: id		{{ com id }}
  | const						::   :: const   	{{ com constant }}
  | ( value )						:: S :: paren           {{ coq [[ value ]] }}

arg :: 'arg_'  						::=  			{{ com argument }}
       										{{ coq (prod typ id) }}
  | typ id						::   :: def		{{ coq ([[typ]],[[id]]) }}
  | ( arg )						:: S :: paren		{{ coq [[ arg ]] }} 			

args {{ tex \mathit{\overline{arg} } }} :: 'args_'	::=  			{{ com arguments }}
     	    			     	   					{{ coq (list (typ*id)) }}
  | []   		 				::   :: nil		{{ coq nil }}
  | args , arg 						::   :: cons		{{ coq ([[arg]]::[[args]]) }}
  | args ; args'					::   :: append		{{ coq ([[args]]++[[args']]) }}
  | ( args )						:: S :: paren           {{ coq [[ args ]] }}

param :: 'param_'  					::=  			{{ com argument }}
       										{{ coq (prod typ value) }}
  | typ value						::   :: def		{{ coq ([[typ]],[[value]]) }}
  | ( param )						:: S :: paren		{{ coq [[ param ]] }} 			

params {{ tex \mathit{\overline{param} } }} :: 'params_'::=			{{ com parameters }}
       	      			       	       					{{ coq (list (typ*value)) }}
  | []  						::   :: nil		{{ coq nil }}
  | params , param           				::   :: cons		{{ coq (([[param]])::[[params]]) }}
  | params ; params'				     	::   :: append		{{ coq ([[params]]++[[params']]) }}
  | ( params )						:: S :: paren           {{ coq [[ params ]] }}

ls {{ tex \mathit{\{l\} } }} :: 'ls_'			::=			{{ com label set }}
       	   			      	 					{{ coq (list l) }}
  | empty						::   :: empty		{{ coq (empty_set l) }}
  | l1 .. ln						::   :: set		{{ coq [[l1 .. ln]] }}
  | ls , l						::   :: cons		{{ coq (set_add eq_dec [[l]] [[ls]]) }}
  | ls ; ls'						::   :: append		{{ coq (set_union eq_dec [[ls]] [[ls']]) }}
  | ( ls )						:: S :: paren		{{ coq [[ ls ]] }}

cond :: 'cond_'						::=			{{ com condition code }}
  | eq							::   :: eq		{{ com eq }}
  | ne							::   :: ne		{{ com ne }}
  | ugt							::   :: ugt		{{ com ugt }}
  | uge							::   :: uge		{{ com uge }}
  | ult							::   :: ult		{{ com ult }}
  | ule							::   :: ule		{{ com ule }}
  | sgt							::   :: sgt		{{ com sgt }}
  | sge							::   :: sge		{{ com sge }}
  | slt							::   :: slt		{{ com slt }}
  | sle							::   :: sle		{{ com sle }}

bop :: 'bop_'						::=  			{{ com binary operators }}
  | add							::   :: add             {{ com add }}
  | lshr						::   :: lshr            {{ com lshr }}
  | and							::   :: and             {{ com and }}
  | or							::   :: or              {{ com or }}

extop :: 'extop_'					::=  			{{ com ext operators }}
  | zext						::   :: z               {{ com zext }}
  | sext						::   :: s               {{ com sext }}

castop :: 'castop_'					::=  			{{ com cast operators }}
  | fptoui 						::   :: fptoui		{{ com fptoui }}
  | fptosi 						::   :: fptosi		{{ com fptosi }}
  | uitofp 						::   :: uitofp		{{ com uitofp }}
  | sitofp 						::   :: sitofp		{{ com sitofp }}
  | ptrtoint						::   :: ptrtoint	{{ com ptrtoint }}
  | inttoptr						::   :: inttoptr	{{ com inttoptr }}
  | bitcast 						::   :: bitcast		{{ com bitcast }}

inbounds :: 'inbounds_'					::=  			{{ com inbounds }} {{ coq bool }}
  | inbounds_yes					::   :: yes		{{ com yes }} {{ coq true }}
  | inbounds_no						::   :: no              {{ com no }} {{ coq false }}

tailc :: 'tailc_'					::=  			{{ com tailcall }} {{ coq bool }}
  | tailc_yes						::   :: yes		{{ com yes }} {{ coq true }}
  | tailc_no						::   :: no              {{ com no }} {{ coq false }}

noret :: 'noret_'					::=  			{{ com noret }} {{ coq bool }}
  | noret_yes						::   :: yes		{{ com yes }} {{ coq true }}
  | noret_no						::   :: no              {{ com no }} {{ coq false }}

cmd :: 'insn_'					    	::=			{{ com commands }}
%% Binary Operations and Bitwise Binary Operations
  | id = bop ( int sz ) value1 value2			::   :: bop		{{ com bop }}
%% Vector Operations
  %| id = extractelement typ0 value0 , const1		::   :: extractelement  {{ com extractelement }}
  %| id = insertelement typ0 value0 , typ1 value1 , const2	::   :: insertelement   {{ com insertelement }}
%% Aggregate Operations
  | id = extractvalue typ value </ constj // j />       ::   :: extractvalue	        {{ com extractvalue }}
  | id = insertvalue typ value typ' value' </ constj // j /> ::   :: insertvalue	{{ com insertvalue }}
%% Memory Access and Addressing Operations
  | id = malloc typ sz align  	         	     	::   :: malloc		{{ com malloc }}
  | id = free ( typ * ) value     	       	     	::   :: free		{{ com free }}
  | id = alloca typ sz align     	       	     	::   :: alloca		{{ com alloca }}
  | id = load ( typ * ) value1				::   :: load		{{ com load }}
  | id = store typ value1 value2			::   :: store		{{ com store }}
  | id = getelementptr inbounds ( typ * ) value </ valuej // j />    	      ::  :: gep        {{ com getelementptr }}
%% Conversion Operations
  %| id = trunc typ1 value1 to typ2			::   :: trunc		{{ com trunc }}
  | id = extop typ1 value to typ2                   	::   :: ext             {{ com ext }}
  | id = castop typ1 value1 to typ2		    	::   :: cast		{{ com cast }}
%% Other Operations
  | id = icmp cond typ value1 value2			::   :: icmp		{{ com icmp }}
  %| id = fcmp cond typ value1 , value2			::   :: fcmp		{{ com fcmp }}
  | id = select value0 typ value1 value2                ::   :: select          {{ com select }}
  | id = noret tailc call typ0 id0 params  	 	::   :: call		{{ com call }} 
  | ( insn )						:: S :: paren           {{ coq [[ insn ]] }}

terminator :: 'insn_'					::=  			{{ com termniators }}
  | id = ret typ value        			    	::   :: return      	{{ com return }}
  | id = ret void   					::   :: return_void  	{{ com return void }}
  | id = br value l1 l2		 			::   :: br              {{ com br }}        
  | id = br l        	    	  			::   :: br_uncond       {{ com unconditional br }}        
  %| id = switch typ value , l </ [ constj , lj ] // j />	::   :: switch		{{ com switch }}
  %| id = invoke typ0 id0 list_param to l1 unwind l2 	::   :: invoke		{{ com invoke }} 
  | id = unreachable   	   	     	 		::   :: unreachable	{{ com unreachable }}
  | ( terminator )					:: S :: paren1          {{ coq [[ terminator ]] }}

phinode :: 'insn_'					::=  			{{ com phinodes }}
  | id = phi typ </ [ idj , lj ] // j />		::   :: phi  	    	{{ com def }}
  | ( phinode )						:: S :: paren2          {{ coq [[ phinode ]] }}

insn :: 'insn_'						::=  			{{ com instructions }}
  | phinode						::   :: phinode         {{ com phinodes }}
  | cmd							::   :: cmd		{{ com commands }}
  | terminator						::   :: terminator	{{ com terminator }}

insns {{ tex \mathit{\overline{insn} } }} :: 'insns_'	::=			{{ com insns }}
      	     			       	     					{{ coq (list insn) }}
  | []	                  				::   :: nil		{{ coq nil }}
  | insns , insn           				::   :: cons		{{ coq ([[insn]]::[[insns]]) }}
  | insns ; insns'					::   :: append		{{ coq ([[insns]]++[[insns']]) }}
  | ( insns )						:: S :: paren           {{ coq [[ insns]] }}

cmds {{ tex \mathit{\overline{cmd} } }} :: 'cmds_'	::=			{{ com cmds }}
      	     			       	     					{{ coq (list cmd) }}
  | []	                  				::   :: nil		{{ coq nil }}
  | cmds , cmd           				::   :: cons		{{ coq ([[cmd]]::[[cmds]]) }}
  | cmds ; cmds'					::   :: append		{{ coq ([[cmds]]++[[cmds']]) }}
  | ( cmds )						:: S :: paren           {{ coq [[ cmds ]] }}

phinodes {{ tex \mathit{\overline{phinode} } }} :: 'phinodes_'	::=		{{ com phinodes }}
      	     			       	     					{{ coq (list phinode) }}
  | []	                  				::   :: nil		{{ coq nil }}
  | phinodes , phinode     				::   :: cons		{{ coq ([[phinode]]::[[phinodes]]) }}
  | phinodes ; phinodes'				::   :: append		{{ coq ([[phindes]]++[[phinodes']]) }}
  | ( phinodes )					:: S :: paren           {{ coq [[ phinodes ]] }}

block :: 'block_' 					::=			{{ com block }}
  | l phinodes cmds terminator				::   :: intro
  | ( block )						:: S :: paren           {{ coq [[ block ]] }}

opt_block {{ tex \mathit{opt_{block} } }} :: 'opt_block_' ::=			{{ com option block }} {{ coq option block }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  block						:: M :: some  		{{ com some }} {{ coq (Some [[block]]) }}
		   
blocks {{ tex \mathit{\overline{block} } }} :: 'blocks_'::=			{{ com blocks }}
      	     			       	     					{{ coq (list block) }}
  | []  						::   :: nil		{{ coq nil }}
  | blocks , block					::   :: cons		{{ coq ([[block]]::[[blocks]]) }}
  | blocks ; blocks'					::   :: append		{{ coq ([[blocks]]++[[blocks']]) }}
  | ( blocks )						:: S :: paren           {{ coq [[ blocks ]] }}

fheader :: 'fheader_'    				::=			{{ com function header }}
  | typ id ( args ) 					::   :: intro
  | ( fheader )						:: S :: paren           {{ coq [[ fheader ]] }}

fdec :: 'fdec_'       					::=			{{ com function declaration }}
  | declare fheader     				::   :: intro
  | ( fdec )						:: S :: paren           {{ coq [[ fdec ]] }}

fdef :: 'fdef_'          				::=			{{ com function definition }}
  | define fheader { blocks } 				::   :: intro
  | ( fdef )						:: S :: paren           {{ coq [[ fdef ]] }}

opt_fdec {{ tex \mathit{opt_{fdec} } }} :: 'opt_fdec_'	::=  			{{ com option fdec }} {{ coq option fdec }}
  | none 						::   :: none		{{ coq None }}
  | fdec						::   :: fdec		{{ coq (Some [[fdec]]) }}
  | ( opt_fdec )					:: S :: paren		{{ coq [[ opt_fdec ]] }}

opt_fdef {{ tex \mathit{opt_{fdef} } }} :: 'opt_fdef_'	::=  			{{ com option fdef }} {{ coq option fdef }}
  | none 						::   :: none		{{ coq None }}
  | fdef						::   :: fdec		{{ coq (Some [[fdef]]) }}
  | ( opt_fdef )					:: S :: paren		{{ coq [[ opt_fdef ]] }}

% namedt :: 'namedt_'         				::=			{{ com named type }}
%   | id = type typ   					::   :: intro 
%   | ( namedt )						:: S :: paren		{{ coq [[ namedt ]] }}

% global id is also taken as constant addresses
gvar :: 'gvar_'   	 				::=			{{ com global variables }}
  | id = global typ const align				::   :: intro           
  | ( gvar )	    					:: S :: paren		{{ coq [[ gvar ]] }}

id_binding :: 'id_binding_'  				::=			{{ com id binding }} 
  |  none 						::  :: none		{{ com none }} 
  |  cmd						::  :: cmd  		{{ com cmd }} 
  |  phinode						::  :: phinode		{{ com phinode }}
  |  terminator						::  :: terminator	{{ com terminator }}
  |  gvar						::  :: gvar             {{ com gvar }} 
  |  fdec						::  :: fdec		{{ com fdec }}
  |  arg 						::  :: arg		{{ com arg }}
		   
product  :: 'product_'					::=			{{ com prodoct }}
  | gvar						::   :: gvar     	{{ com global variable }}
  | fdec             					::   :: fdec   		{{ com function declaration }}
  | fdef             					::   :: fdef		{{ com function definition }}
%  | namedt           					::   :: namedtype     	{{ com named types }}

products {{ tex \mathit{\overline{product} } }} :: 'products_'::=		{{ com products }}
	    				     	   				{{ coq (list product) }}	   
  | []   						::   :: nil        	{{ com nil }}
    							     			{{ coq nil }}
  | products , product				::   :: cons            {{ com cons }}
    	       						     			{{ coq ([[product]]::[[products]]) }}
  | ( products )					:: S :: paren		{{ coq [[ products ]] }}			

module :: 'module_'					::=  			{{ com module }}
  | layouts products 					::   :: intro		{{ com prods }}
  | ( module )					        :: S :: paren           {{ coq [[ module ]] }}

modules {{ tex \mathit{\overline{module} } }} :: 'modules_'::=  		{{ com modules }}
      	     			       	     					{{ coq (list module) }}
  | []  						::   :: nil		{{ coq nil }}
  | modules , module					::   :: cons		{{ coq ([[module]]::[[modules]]) }}
  | modules ; modules'					::   :: append		{{ coq ([[modules]]++[[modules']]) }}
  | ( modules )						:: S :: paren           {{ coq [[ modules ]] }}

system :: 'system_'					::=  			{{ com system }}
       	  									{{ coq modules }}
  | modules						::   :: def		{{ com list of modules }}
    							     			{{ coq [[modules]] }}

dt :: 'dt_'						::=  			{{ com dominator }}
       										{{ coq (l -> list l) }}

usedef_id :: 'usedef_id_'				::=			{{ com id usedef }}
       	  									{{ coq (id -> (list id)) }} 

usedef_block :: 'usedef_block_'				::=			{{ com label usedef }}
       	  									{{ coq (block -> (list block)) }} 

module_info :: 'module_info_'				::=			{{ com module information }}
	       									{{ coq (prod module (prod usedef_id usedef_block)) }}		
  | module , usedef_id , usedef_block			::   ::	def		{{ com def }} 
   	     		  				     			{{ coq ([[module]], ([[usedef_id]], [[usedef_block]])) }}	
  | ( module_info )					:: S :: paren           {{ coq [[ module_info ]] }}

fdef_info :: 'fdef_info_'				::=  			{{ com fdef information }}
	     									{{ coq (prod fdef dt) }}
  | fdef , dt						::   :: def		{{ com def }}
    	   						     			{{ coq ([[fdef]], [[dt]]) }}
  | ( fdef_info )					:: S :: paren		{{ coq [[ fdef_info ]] }}						

intrinsic_funs :: 'intrinsic_funs_'			::=  			{{ com intrinsic functions }}
	      	 								{{ coq ids }}

terminals :: 'terminals_' ::=
  | =                   ::   :: assignment      {{ tex = }}
  | <->                 ::   :: alias		{{ tex <-> }}
  | == 			::   :: eq		{{ tex == }}
  | |-			::   :: shows           {{ tex \vdash }}
  | |-i			::   :: ishows          {{ tex \vdash_{i} }}
  | |-t			::   :: tshows          {{ tex \vdash_{t} }}
  | |-f			::   :: fshows          {{ tex \vdash_{f} }}
  | in			::   :: in		{{ tex \in }}
  | ;			::   :: colon		{{ tex ; }}

embed 
{{ coq

Tactic Notation "cmd_cases" tactic(first) tactic(c) :=
  first;
  [ c "insn_bop" | c "insn_extractvalue" | c "insn_insertvalue" |
    c "insn_malloc" | c "insn_free" |
    c "insn_alloca" | c "insn_load" | c "insn_store" | c "insn_gep" |
    c "insn_ext" | c "insn_cast" | c "insn_icmp" |  c "insn_select" |
    c "insn_call" ].

End LLVMsyntax.

}}
