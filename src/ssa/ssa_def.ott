
% Syntax of Static Single Assignment(SSA)

embed 
{{ coq
Require Import ListSet.
Require Import List.

Section Lists.

  Variable A : Type.

  Fixpoint last_opt (l:list A) {struct l} : option A := 
  match l with 
    | nil => None 
    | a :: nil => Some a 
    | a :: l' => last_opt l'
  end.

End Lists. 
}}

metavar N ::= {{ com a natural number }}
  {{ coq nat }} {{ lex numeral  }}
metavar id ::= {{ com identities }}
  {{ coq nat }} {{ lex numeral  }}
metavar l ::= {{ com labels }}
  {{ coq nat }} {{ lex numeral  }}
indexvar index, i, j, n ::= {{ com index }}
  {{ coq nat }}
 
grammar

opt_id {{ tex \mathit{opt_{id} } }} :: 'opt_id_'	::=			{{ com option id }} {{ coq option id }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  id							:: M :: some  		{{ com some }} {{ coq (Some [[id]]) }}

ids {{ tex \mathit{\{id\} } }} :: 'ids_'		::=			{{ com id set }}
       	   			      	 					{{ coq (list id) }}
  | empty						::   :: empty		{{ coq (empty_set id) }}
  | id1 .. idn						::   :: set		{{ coq [[id1 .. idn]] }}
  | ids , id						::   :: cons		{{ coq (set_add eq_nat_dec [[id]] [[ids]]) }}
  | ids ; ids'						::   :: append		{{ coq (set_union eq_nat_dec [[ids]] [[ids']]) }}
  | ( ids )						:: S :: paren		{{ coq [[ ids ]] }}

const :: 'const_'					::=  			{{ com constant }}
  | N 	 						::   :: val		{{ com val }}	
  | undef						::   :: undef		{{ com undef }}
  | ( const )						:: S :: paren           {{ coq [[ const ]] }}

value :: 'value_'					::=  			{{ com values }}
  | id	 						::   :: id		{{ com id }}
  | const						::   :: constant	{{ com constant }}
  | ( value )						:: S :: paren           {{ coq [[ value ]] }}

typ :: 'typ_'						::=			{{ com type }}
  | int N                    				::   :: int         	{{ com integer }}
  | float						::   :: float		{{ com float }}
  | double						::   :: double          {{ com double }}
  | fp128						::   :: fp128           {{ com fp128 }}
  | void                      				::   :: void        	{{ com void }}
  | label                                               ::   :: label           {{ com label }}
  | metadata                                            ::   :: metadata        {{ com metadata }}
  | [ N * typ ]               				::   :: array       	{{ com array }}
  | typ ( </ typj // j /> )  				::   :: function    	{{ com function }}
  | { </ typj // j /> }       				::   :: struct      	{{ com structure }}
  | typ *                     				::   :: pointer     	{{ com pointer }}
  | < N * typ >               				::   :: vector       	{{ com vector }}
  | opaque  						::   :: opaque          {{ com opaque }}
  % x86_fp80
  % ppc_fp128
  % union
  | ( typ )						:: S :: paren           {{ coq [[ typ ]] }}

opt_typ {{ tex \mathit{opt_{typ} } }} :: 'opt_typ_'	::=			{{ com option typ }} {{ coq option typ }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  typ						:: M :: some  		{{ com some }} {{ coq (Some [[typ]]) }}

list_arg {{ tex \mathit{\overline{arg} } }} :: 'list_arg_'	::=  			{{ com argument list }}
     	    			     	   					{{ coq (list typ) }}
  | []   		 				::   :: nil		{{ coq nil }}
  | list_arg , typ 					::   :: cons		{{ coq ([[typ]]::[[list_arg]]) }}
  | list_arg ; list_arg'				::   :: append		{{ coq ([[list_arg]]++[[list_arg']]) }}
  | ( list_arg )					:: S :: paren           {{ coq [[ list_arg ]] }}

list_param {{ tex \mathit{\overline{param} } }} :: 'list_param_'::=			{{ com parameter list }}
       	      			       	       					{{ coq (list (typ*value)) }}
  | []  						::   :: nil		{{ coq nil }}
  | list_param , typ value                              ::   :: cons		{{ coq (([[typ]],[[value]])::[[list_param]]) }}
  | list_param ; list_param'				::   :: append		{{ coq ([[list_param]]++[[list_param']]) }}
  | ( list_param )					:: S :: paren           {{ coq [[ list_param ]] }}

ls {{ tex \mathit{\{l\} } }} :: 'ls_'			::=			{{ com label set }}
       	   			      	 					{{ coq (list l) }}
  | empty						::   :: empty		{{ coq (empty_set l) }}
  | l1 .. ln						::   :: set		{{ coq [[l1 .. ln]] }}
  | ls , l						::   :: cons		{{ coq (set_add eq_nat_dec [[l]] [[ls]]) }}
  | ls ; ls'						::   :: append		{{ coq (set_union eq_nat_dec [[ls]] [[ls']]) }}
  | ( ls )						:: S :: paren		{{ coq [[ ls ]] }}

cond :: 'cond_'						::=			{{ com condition code }}
  | eq							::   :: eq		{{ com eq }}
  | ne							::   :: ne		{{ com ne }}
  | ugt							::   :: ugt		{{ com ugt }}
  | uge							::   :: uge		{{ com uge }}
  | ult							::   :: ult		{{ com ult }}
  | ule							::   :: ule		{{ com ule }}
  | sgt							::   :: sgt		{{ com sgt }}
  | sge							::   :: sge		{{ com sge }}
  | slt							::   :: slt		{{ com slt }}
  | sle							::   :: sle		{{ com sle }}

insn :: 'insn_'					    	::=			{{ com insnruction }}
  | ret typ value             			    	::   :: return      	{{ com return }}
  | ret void                   			    	::   :: return_void  	{{ com return void }}
  | br typ value , l1 , l2				::   :: br              {{ com br }}        
  | br l        	    	  			::   :: br_uncond       {{ com unconditional br }}        
  | switch typ value , l </ [ constj , lj ] // j />	::   :: switch		{{ com switch }}
  | id = invoke typ0 id0 list_param to l1 unwind l2 	::   :: invoke		{{ com invoke }} 
  | id = call typ0 id0 list_param	       	 	::   :: call		{{ com call }} 
  | unreachable	     	   	     	 		::   :: unreachable	{{ com unreachable }}
  | id = add typ value1 value2				::   :: add		{{ com add }}
  | id = fadd typ value1 value2				::   :: fadd		{{ com fadd }}
  | id = udiv typ value1 value2				::   :: udiv		{{ com udiv }}
  | id = fdiv typ value1 value2				::   :: fdiv		{{ com fdiv }}
  | id = or typ value1 value2				::   :: or 		{{ com or }}
  | id = and typ value1 value2				::   :: and 		{{ com and }}
  | id = extractelement typ0 value0 , const1		::   :: extractelement  {{ com extractelement }}
  | id = insertelement typ0 value0 , typ1 value1 , const2	::   :: insertelement   {{ com insertelement }}
  | id = extractvalue typ0 value0 , const1             	::   :: extractvalue	{{ com extractvalue }}
  | id = insertvalue typ0 value0 , typ1 value1 , const2 	::   :: insertvalue	{{ com insertvalue }}
  | id = alloca typ N  	     	       	     	       	::   :: alloca		{{ com alloca }}
  | id = load typ1 value1				::   :: load		{{ com load }}
  | store typ1 value1 , typ2 value2			::   :: store		{{ com store }}
  | id = trunc typ1 value1 to typ2			::   :: trunc		{{ com trunc }}
  | id = fptrunc typ1 value1 to typ2			::   :: fptrunc		{{ com fptrunc }}
  | id = fptoui typ1 value1 to typ2			::   :: fptoui		{{ com fptoui }}
  | id = fptosi typ1 value1 to typ2			::   :: fptosi		{{ com fptosi }}
  | id = uitofp typ1 value1 to typ2			::   :: uitofp		{{ com uitofp }}
  | id = sitofp typ1 value1 to typ2			::   :: sitofp		{{ com sitofp }}
  | id = ptrtoint typ1 value1 to typ2			::   :: ptrtoint	{{ com ptrtoint }}
  | id = inttoptr typ1 value1 to typ2			::   :: inttoptr	{{ com inttoptr }}
  | id = bitcast typ1 value1 to typ2			::   :: bitcast		{{ com bitcast }}
  | id = icmp cond typ value1 , value2			::   :: icmp		{{ com icmp }}
  | id = fcmp cond typ value1 , value2			::   :: fcmp		{{ com fcmp }}
  | id = phi typ </ [ idj , lj ] // j />		::   :: phi  	    	{{ com phi }}
  | ( insn )						:: S :: paren           {{ coq [[ insn ]] }}

opt_insn {{ tex \mathit{opt_{insn} } }} :: 'opt_insn_'  ::=			{{ com option insn }} {{ coq option insn }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  insn						:: M :: some  		{{ com some }} {{ coq (Some [[insn]]) }}
		   
list_insn {{ tex \mathit{\overline{insn} } }} :: 'list_insn_'	::=			{{ com insnruction list }}
      	     			       	     					{{ coq (list insn) }}
  | []	                  				::   :: nil		{{ coq nil }}
  | list_insn , insn           				::   :: cons		{{ coq ([[insn]]::[[list_insn]]) }}
  | list_insn ; list_insn'				::   :: append		{{ coq ([[list_insn]]++[[list_insn']]) }}
%  | insn1 .. insnn					::   :: def		{{ coq ([[ insn1 .. insnn ]]) }}
  | ( list_insn )					:: S :: paren           {{ coq [[ list_insn ]] }}

block :: 'block_' 					::=			{{ com block }}
  | l list_insn						::   :: with_label
  | list_insn						::   :: without_label
  | ( block )						:: S :: paren           {{ coq [[ block ]] }}

opt_block {{ tex \mathit{opt_{block} } }} :: 'opt_block_' ::=			{{ com option block }} {{ coq option block }}
  |  none 						:: M :: none		{{ com none }} {{ coq None }}
  |  block						:: M :: some  		{{ com some }} {{ coq (Some [[block]]) }}
		   
list_block {{ tex \mathit{\overline{block} } }} :: 'list_block_'::=			{{ com block list }}
      	     			       	     					{{ coq (list block) }}
  | []  						::   :: nil		{{ coq nil }}
  | list_block , block					::   :: cons		{{ coq ([[block]]::[[list_block]]) }}
  | list_block ; list_block'				::   :: append		{{ coq ([[list_block]]++[[list_block']]) }}
%  | block1 ... blockn					::   :: def		{{ coq ([[ block1 ... blockn ]]) }}
  | ( list_block )					:: S :: paren           {{ coq [[ list_block ]] }}

fheader :: 'fheader_'    				::=			{{ com function header }}
  | typ id ( list_arg ) 				::   :: intro
  | ( fheader )						:: S :: paren           {{ coq [[ fheader ]] }}

fdec :: 'fdec_'       					::=			{{ com function declaration }}
  | declare fheader     				::  :: intro
  | ( fdec )						:: S :: paren           {{ coq [[ fdec ]] }}

fdef :: 'fdef_'          				::=			{{ com function definition }}
  | define fheader { list_block } 			::  :: intro
  | ( fdef )						:: S :: paren           {{ coq [[ fdef ]] }}

namedt :: 'namedt_'         				::=			{{ com named type }}
  | id = type typ   					::   :: intro 
  | ( namedt )						:: S :: paren		{{ coq [[ namedt ]] }}

g :: 'g_'   	 					::=			{{ com global }}
  | id = global typ const				::   :: intro  
  | ( g )	    					:: S :: paren		{{ coq [[ g ]] }}

id_binding :: 'id_binding_'  				::=			{{ com id binding }} 
  |  none 						::  :: none		{{ com none }} 
  |  insn						::  :: insn  		{{ com insn }} 
  |  g							::  :: g  		{{ com g }} 
		   
product  :: 'product_'					::=			{{ com prodoct }}
  | g							::   :: global_var      {{ com global variable }}
  | fdec             					::   :: function_dec   	{{ com function declaration }}
  | fdef             					::   :: function_def   	{{ com function definition }}
  | namedt           					::   :: namedtype     	{{ com named types }}

list_product {{ tex \mathit{\overline{product} } }} :: 'list_product_'::=	{{ com list product }}
	    				     	   				{{ coq (list product) }}	   
  | []   						::   :: nil        	{{ com nil }}
    							     			{{ coq nil }}
  | list_product , product				::   :: cons            {{ com cons }}
    	       						     			{{ coq ([[product]]::[[list_product]]) }}
%  | product1 ... productn				::   :: def		{{ coq ([[ product1 ... productn ]]) }}
  | ( list_product )					:: S :: paren		{{ coq [[ list_product ]] }}			

module :: 'module_'					::=  			{{ com module }}
       	  									{{ coq list_product }}
  | list_product 					::   :: products	{{ com prods }}
    							     			{{ coq [[list_product]] }} 

list_module {{ tex \mathit{\overline{module} } }} :: 'list_module_'::=  	{{ com list module }}
      	     			       	     					{{ coq (list module) }}
  | []  						::   :: nil		{{ coq nil }}
  | list_module , module				::   :: cons		{{ coq ([[module]]::[[list_module]]) }}
  | list_module ; list_module'				::   :: append		{{ coq ([[list_module]]++[[list_module']]) }}
%  | module1 ... modulen					::   :: def		{{ coq ([[ module1 ... modulen ]]) }}
  | ( list_module )					:: S :: paren           {{ coq [[ list_module ]] }}

system :: 'system_'					::=  			{{ com system }}
       	  									{{ coq list_module }}
  | list_module						::   :: def		{{ com list of modules }}
    							     			{{ coq [[list_module]] }}

dt :: 'dt_'						::=  			{{ com dominator }}
       										{{ coq (l -> list l) }}

usedef_insn :: 'usedef_insn_'				::=			{{ com insn usedef }}
       	  									{{ coq (insn -> (list insn)) }} 

usedef_block :: 'usedef_block_'				::=			{{ com block usedef }}
       	  									{{ coq (block -> (list block)) }} 

module_info :: 'module_info_'				::=			{{ com module information }}
	       									{{ coq (prod module (prod usedef_insn usedef_block)) }}		
  | module , usedef_insn , usedef_block			::   ::	def		{{ com def }} 
   	     		  				     			{{ coq ([[module]], ([[usedef_insn]], [[usedef_block]])) }}	
  | ( module_info )					:: S :: paren           {{ coq [[ module_info ]] }}

fdef_info :: 'fdef_info_'				::=  			{{ com fdef information }}
	     									{{ coq (prod fdef dt) }}
  | fdef , dt						::   :: def		{{ com def }}
    	   						     			{{ coq ([[fdef]], [[dt]]) }}
  | ( fdef_info )					:: S :: paren		{{ coq [[ fdef_info ]] }}						
terminals :: 'terminals_' ::=
  | =                   ::   :: assignment      {{ tex = }}
  | <->                 ::   :: alias		{{ tex <-> }}
  | == 			::   :: eq		{{ tex == }}
  | |-			::   :: shows           {{ tex \vdash }}
  | |-i			::   :: ishows          {{ tex \vdash_{i} }}
  | |-t			::   :: tshows          {{ tex \vdash_{t} }}
  | |-f			::   :: fshows          {{ tex \vdash_{f} }}
  | in			::   :: in		{{ tex \in }}

formula :: 'formula_' ::=
  | judgement			::   :: judgement
  | formula1 ... formulan     	::   :: dots
  | not formula                 :: M :: not
      				{{ tex \neg [[formula]] }}
				{{ coq (not ([[formula]])) }}
  | ( formula )                 :: M :: brackets
      	      			{{ tex ([[formula]]\!) }} 
      				{{ coq ([[ formula ]]) }}
  | exists u . formula          ::   :: exists 
      	       			{{ tex \exists [[u]]. [[formula]] }}
      				{{ coq ( exists [[ u ]] , [[ formula ]] ) }}
  | formula /\ formula'         :: M :: and
               			{{ tex [[formula]] \wedge [[formula']] }}
	  			{{ coq [[formula]] /\ [[ formula' ]] }}
  | foreach C . formula         :: M :: forall 
              			{{ tex \forall [[C]]. [[ formula ]] }}
	  			{{ coq ( forall [[C]], [[ formula ]] ) }}
  | formula implies formula'    :: M :: implies
            	    		{{ tex [[formula]] \mathit{implies} [[formula']] }}
	  			{{ coq [[formula]] -> [[ formula' ]] }}
  | formula \/ formula'         :: M :: or
               			{{ tex [[formula]] \vee [[formula']] }}
	  			{{ coq [[formula]] \/ [[ formula' ]] }} 
  | N1 == N2 			::   :: eqN
				{{ tex [[N1]] == [[N2]] }}
				{{ coq [[N1]] = [[N2]] }}
  | l1 == l2 			::   :: eqLabel
				{{ tex [[l1]] == [[l2]] }}
				{{ coq [[l1]] = [[l2]] }}
  | id1 == id2 			::   :: eqID
				{{ tex [[id1]] == [[id2]] }}
				{{ coq [[id1]] = [[id2]] }}
  | l notin ls			::   :: l_notin_ls
      	    			{{ tex [[l]] \not\in [[ls]] }}
				{{ coq ( ~ set_In [[l]] [[ls]]) }}
  | l in ls			::   :: l_in_ls
      	    			{{ tex [[l]] \in [[ls]] }}
				{{ coq ( set_In [[l]] [[ls]]) }}
  | id in ids			::   :: id_in_ids
      	    			{{ tex [[id]] \in [[ids]] }}
				{{ coq ( set_In [[id]] [[ids]]) }}
  | module in system		::   :: module_in_system
    	       			{{ tex [[module]] \in [[system]] }}
				{{ coq In [[module]] [[system]] }}
  | product in module		::   :: product_in_module
    	       			{{ tex [[product]] \in [[module]] }}
				{{ coq In [[product]] [[module]] }}
  | block in list_block		::   :: block_in_blocks
    	       			{{ tex [[block]] \in [[list_block]] }}
				{{ coq In [[block]] [[list_block]] }}
  | insn in list_insn		::   :: insn_in_insns
    	       			{{ tex [[insn]] \in [[list_insn]] }}
				{{ coq In [[insn]] [[list_insn]] }}
  | module <-> module'          :: M :: module_alias
    	     			{{ com module alias }} 
				{{ coq [[module]] = [[module']] }}
  | system <-> system'          :: M :: system_alias
    	     			{{ com system alias }} 
				{{ coq [[system]] = [[system']] }}
  | list_arg <-> </ typj // j /> :: M :: args_alias
    	       			{{ com args alias }}
				{{ coq [[list_arg]] = [[ </ typj // j /> ]] }}
  | ids <-> </ idj // j /> 	:: M :: ids_alias
    	      	   	        {{ com ids alias }}
				{{ coq [[ids]] = [[ </ idj // j /> ]] }}
  | ls <-> </ lj // j /> 	:: M :: ls_alias
    	      	   	        {{ com ls alias }}
				{{ coq [[ls]] = [[ </ lj // j /> ]] }}
  | list_insn <-> </ insnj // j /> :: M :: insns_alias
    	      	   	        {{ com insns alias }}
				{{ coq [[list_insn]] = [[ </ insnj // j /> ]] }}
  | list_block <-> </ blockj // j /> :: M :: blocks_alias
    	      	   	        {{ com blocks alias }}
				{{ coq [[list_block]] = [[ </ blockj // j /> ]] }}
  | list_product <-> </ productj // j /> :: M :: products_alias
    	      	   	        {{ com products alias }}
				{{ coq [[list_product]] = [[ </ productj // j /> ]] }}
  | list_module <-> </ modulej // j /> :: M :: modules_alias
    	      	   	        {{ com modules alias }}
				{{ coq [[list_module]] = [[ </ modulej // j /> ]] }}
  | getNthTyp </ typj // j /> N = opt_typ ::   :: getNthTyp
    	      	       	   	{{ com getNthTyp }}
				{{ coq nth_error [[ </ typj // j /> ]] [[N]] = [[opt_typ]] }}  
  | insn =id= insn'        :: M :: getInsnID_eq
    	      	      	      	{{ tex [[insn]] =id= [[insn']] }}
				{{ coq getInsnID [[insn]] = getInsnID [[insn']] }}

parsing
formula_and left formula_and
formula_or left formula_or
formula_not left formula_or
formula_not left formula_and

 
