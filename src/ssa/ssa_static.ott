
% Static Semantics of Static Single Assignment(SSA)

defns
Jwf_typ :: '' ::=
      defn
      |- typ :: :: wf_typ :: '' {{ com [[typ]] is well-formed }} by  

      -------------------- :: wf_typ_int
      |- int N

      -------------------- :: wf_typ_float
      |- float

      -------------------- :: wf_typ_double
      |- double

      -------------------- :: wf_typ_fp128
      |- fp128

      -------------------- :: wf_typ_void
      |- void

      -------------------- :: wf_typ_label
      |- label

      -------------------- :: wf_typ_metadate
      |- metadata

      -------------------- :: wf_typ_opaque
      |- opaque

      isValidReturnType typ     
      |- typ
      </ isValidArgumentType typj // j />
      </ |- typj // j /> 
      -------------------------------------------------- :: wf_typ_function
      |- typ ( </ typj // j /> ) 
     
      </ isValidElementType typj // j />
      </ |- typj // j /> 
      -------------------------------------------------- :: wf_typ_structure
      |- { </ typj // j /> }

      |- typ
      isValidElementType typ
      ------------------- :: wf_typ_array
      |- [ N * typ ]

      |- typ
      isValidElementType typ
      ------------------- :: wf_typ_pointer
      |- typ * 

      |- typ
      isValidElementType typ
      ------------------- :: wf_typ_vector
      |- < N * typ >


defns
Jtyping :: '' ::=
      defn
      system , module_info , fdef_info , block |-i insn :: :: wf_insn_base :: '' 
      {{ com [[insn]] is well-formed w.r.t [[block]] in [[fdef_info]] in [[module_info]] [[system]] }} by  
      % Verifier::visitInstruction

      insn in system , module_info , (fdef, dt) , block
      (isPhiNode insn) implies (isReachableFromEntry (fdef, dt) block)
      ----------------------------------------------------------------- :: wf_insn_base_intro
      system , module_info , (fdef, dt) , block |-i insn

      defn
      system , module_info , fdef_info , block |- insn :: :: wf_insn :: '' 
      {{ com [[insn]] is well-formed w.r.t [[block]] in [[fdef_info]] in [[module_info]] [[system]] }} by  

      system , module_info , (fdef, dt) , block |-i ret typ value
      getReturnType fdef = typ
      not typ == void
      ------------------------------------------------------ :: wf_insn_return
      system , module_info , (fdef, dt) , block |- ret typ value

      system , module_info , (fdef, dt) , block |-i ret void
      getReturnType fdef = void
      ------------------------------------------------------ :: wf_insn_return_void
      system , module_info , (fdef, dt) , block |- ret void

      system , (module, usedef_insn, usedef_block), fdef_info , block |-i br value , l1 , l2				        
      blockDominates dt block block
      insnDominates (ret void) (ret void)
      -------------------------------------------------------------------------------------- :: wf_insn_br
      system , (module, usedef_insn, usedef_block), fdef_info , block |- br value , l1 , l2				        

      defn
      system , module_info , fdef_info , block |- list_insn :: :: wf_list_insn :: ''
      {{ com [[list_insn]] is well-formed w.r.t [[block]] in [[fdef_info]] in [[module_info]] [[system]] }} by  

      ----------------------------------------------- :: wf_list_insn_nil
      system , module_info , fdef_info , block |- []

      system , module_info , fdef_info , block |- insn 
      system , module_info , fdef_info , block |- list_insn
      ------------------------------------------------------------- :: wf_list_insn_cons
      system , module_info , fdef_info , block |- list_insn , insn


      defn
      system , module_info , fdef_info |- block :: :: wf_block :: '' 
      {{ com [[block]] is well-formed w.r.t. [[fdef_info]] in [[module_info]] [[system]] }} by

      (l list_insn) in system , module_info , fdef_info
      system , module_info , fdef_info , l list_insn |- list_insn 
      insnsChecksTerminatorInsn list_insn
      insnsStartsWithPhiNode list_insn
      --------------------------------------------------------- :: wf_block_with_label
      system , module_info , fdef_info |- l list_insn

      list_insn in system , module_info , fdef_info
      system , module_info , fdef_info , list_insn |- list_insn 
      insnsChecksTerminatorInsn list_insn
      insnsStartsWithPhiNode list_insn
      --------------------------------------------------------- :: wf_block_without_label
      system , module_info , fdef_info |- list_insn

      defn
      system , module_info , fdef_info |- list_block :: :: wf_list_block :: ''
      {{ com [[list_block]] is well-formed w.r.t. [[fdef_info]] in [[module_info]] [[system]] }} by

      --------------------------------------- :: wf_list_block_nil
      system , module_info , fdef_info |- []

      system , module_info , fdef_info |- block
      system , module_info , fdef_info |- list_block
      ------------------------------------------------------- :: wf_list_block_cons
      system , module_info , fdef_info |- list_block , block
 

      defn
      system , module_info |-f fdef :: :: wf_fdef :: ''
      {{ com [[fdef]] is well-formed w.r.t. [[module_info]] [[system]] }} by

      (define fheader { list_block} ) in system , (module, usedef_insn, usedef_block)
      genDominatorTree (define fheader { list_block }) module = dt
      system , (module, usedef_insn, usedef_block) , (define fheader { list_block }, dt) |- list_block      
      ------------------------------------------------------ :: wf_fdef_intro
      system , (module, usedef_insn, usedef_block) |-f define fheader { list_block }

      defn
      system , module_info |- product :: :: wf_prod :: ''
      {{ com [[product]] is well-formed w.r.t. [[module_info]] [[system]]}} by 

      ----------------------------- :: wf_prod_global_var
      system , module_info |- g

      ----------------------------- :: wf_prod_function_dec
      system , module_info |- fdec

      system , module_info |-f fdef
      ----------------------------- :: wf_prod_function_def
      system , module_info |- fdef   

      -------------------------------------- :: wf_prod_namedtype
      system , module_info |- namedt     

      defn
      system , module_info |- list_product :: :: wf_prods :: ''
      {{ com [[list_product]] is well-formed w.r.t. [[module_info]] [[system]]}} by 

      --------------------------- :: wf_prods_nil
      system , module_info |- []

      system , module_info |- list_product
      system , module_info |- product
      ------------------------------------------- :: wf_prods_cons
      system , module_info |- list_product , product

      defn
      system |- module :: :: wf_module :: ''
      {{ com [[module]] is well-formed w.r.t. [[system]] }} by

      list_product in system
      genInsnUseDef list_product = usedef_insn
      genBlockUseDef list_product = usedef_block
      system , (list_product, usedef_insn, usedef_block) |- list_product
      ----------------------------------------------------- :: wf_module_intro
      system |- list_product

      defn
      system |- list_module :: :: wf_list_module :: ''
      {{ com [[list_module]] is well-formed w.r.t. [[system]] }} by  

      ------------------------ :: wf_list_module_nil
      system |- []

      system |- module 
      system |- list_module
      ---------------------------------- :: wf_list_module_cons
      system |- list_module , module
 
      defn
      |- system :: :: wf_system :: ''
      {{ com [[system]] is well-formed }} by

      list_module |- list_module
      uniqSystem list_module
      ------------------------------ :: wf_system_intro
      |- list_module 
     

% insn :: 'insn_'					    	::=			{{ com insnruction }}
%   | ret typ value             			    	::   :: return      	{{ com return }}
%   | ret void                   			    	::   :: return_void  	{{ com return void }}
%   | br value , ll1 , ll2				::   :: br              {{ com br }}        
%   | br ll        	    	  			::   :: br_uncond       {{ com unconditional br }}        
%   | switch value , ll </ [ constj , llj ] // j />	::   :: switch		{{ com switch }}
%   | id = invoke t id0 paraml to ll1 unwind ll2   	::   :: invoke		{{ com invoke }} 
%   | unreachable	     	   	     	 		::   :: unreachable	{{ com unreachable }}
%   | id = add typ value1 value2				::   :: add		{{ com add }}
%   | id = fadd typ value1 value2				::   :: fadd		{{ com fadd }}
%   | id = udiv typ value1 value2				::   :: udiv		{{ com udiv }}
%   | id = fdiv typ value1 value2				::   :: fdiv		{{ com fdiv }}
%   | id = or typ value1 value2				::   :: or 		{{ com or }}
%   | id = and typ value1 value2				::   :: and 		{{ com and }}
%   | id = extractelement < N0 * typ0 > id0 , const1	::   :: extractelement  {{ com extractelement }}
%   | id = insertelement < N0 * typ0 > id0 , typ1 value1 , const2	    ::   :: insertelement       {{ com insertelement }}
%   | id = extractvalue { </ typj // j /> } id0 , const1              ::   :: extractvalue	{{ com extractvalue }}
%   | id = insertvalue { </ typj // j /> } id0 , typ1 value1 , const2 ::   :: insertvalue		{{ com insertvalue }}
%   | id = alloca typ N  	     	       	     	       	::   :: alloca		{{ com alloca }}
%   | id = load typ1 id1					::   :: load		{{ com load }}
%   | store typ1 value1 , typ2 id2			::   :: store		{{ com store }}
%   | id = trunc typ1 value1 to typ2			::   :: trunc		{{ com trunc }}
%   | id = fptrunc typ1 value1 to typ2			::   :: fptrunc		{{ com fptrunc }}
%   | id = fptoui typ1 value1 to typ2			::   :: fptoui		{{ com fptoui }}
%   | id = fptosi typ1 value1 to typ2			::   :: fptosi		{{ com fptosi }}
%   | id = uitofp typ1 value1 to typ2			::   :: uitofp		{{ com uitofp }}
%   | id = sitofp typ1 value1 to typ2			::   :: sitofp		{{ com sitofp }}
%   | id = ptrtoint typ1 value1 to typ2			::   :: ptrtoint	{{ com ptrtoint }}
%   | id = inttoptr typ1 value1 to typ2			::   :: inttoptr	{{ com inttoptr }}
%   | id = bitcast typ1 value1 to typ2			::   :: bitcase		{{ com bitcast }}
%   | id = icmp cond typ value1 , value2			::   :: icmp		{{ com icmp }}
%   | id = fcmp cond typ value1 , value2			::   :: fcmp		{{ com fcmp }}
%   | id = phi typ </ [ idj , llj ] // j />		::   :: phi  	    	{{ com phi }}
