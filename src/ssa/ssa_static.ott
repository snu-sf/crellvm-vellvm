
% Static Semantics of Static Single Assignment(SSA)

defns
Jwf_typ :: '' ::=
      defn
      |- typ :: :: wf_typ :: '' {{ com [[typ]] is well-formed }} by  

      -------------------- :: wf_typ_int
      |- int N

      -------------------- :: wf_typ_float
      |- float

      -------------------- :: wf_typ_double
      |- double

      -------------------- :: wf_typ_fp128
      |- fp128

      -------------------- :: wf_typ_void
      |- void

      -------------------- :: wf_typ_label
      |- label

      -------------------- :: wf_typ_metadate
      |- metadata

      -------------------- :: wf_typ_opaque
      |- opaque

      isValidReturnType typ     
      |- typ
      </ isValidArgumentType typj // j />
      </ |- typj // j /> 
      -------------------------------------------------- :: wf_typ_function
      |- typ ( </ typj // j /> ) 
     
      </ isValidElementType typj // j />
      </ |- typj // j /> 
      -------------------------------------------------- :: wf_typ_structure
      |- { </ typj // j /> }

      |- typ
      isValidElementType typ
      ------------------- :: wf_typ_array
      |- [ N * typ ]

      |- typ
      isValidElementType typ
      ------------------- :: wf_typ_pointer
      |- typ * 

      |- typ
      isValidElementType typ
      ------------------- :: wf_typ_vector
      |- < N * typ >

defns
Jtyping :: '' ::=
      defn
      module , fdef , block |- insn :: :: wf_insn :: '' 
      {{ com [[insn]] is well-formed w.r.t [[block]] in [[fdef]] in [[module]] }} by  

      getReturnType fdef = typ
      not typ == void
      ------------------------------------------------------ :: wf_insn_return
      module , fdef , block |- ret typ value

      getReturnType fdef = void
      ------------------------------------------------------ :: wf_insn_return_void
      module , fdef , block |- ret void


      genDominatorTree fdef module = dt
      blockDominates dt block block
      insnDominates (ret void) (ret void)
      ------------------------------------------------------ :: wf_insn_br
      module , fdef , block |- br value , l1 , l2				        

      defn
      module , fdef , block |- list_insn :: :: wf_list_insn :: ''
      {{ com [[list_insn]] is well-formed w.r.t [[block]] in [[fdef]] in [[module]] }} by  

      ------------------------ :: wf_list_insn_nil
      module , fdef , block |- []

      module , fdef , block |- insn 
      module , fdef , block |- list_insn
      ---------------------------------- :: wf_list_insn_cons
      module , fdef , block |- list_insn , insn


      defn
      module , fdef |- block :: :: wf_block :: '' 
      {{ com [[block]] is well-formed w.r.t. [[fdef]] in [[module]] }} by

      module , fdef , l list_insn |- list_insn 
      insnsChecksTerminatorInsn list_insn
      insnsStartsWithPhiNode list_insn
      ---------------------------------------- :: wf_block_intro
      module , fdef |- l list_insn


      defn
      module , fdef |- list_block :: :: wf_list_block :: ''
      {{ com [[list_block]] is well-formed w.r.t. [[fdef]] in [[module]] }} by

      ------------------------ :: wf_list_block_nil
      module , fdef |- []

      module , fdef |- block
      module , fdef |- list_block
      ---------------------------------- :: wf_list_block_cons
      module , fdef |- list_block , block
 

      defn
      module |- fdef :: :: wf_fdef :: ''
      {{ com [[fdef]] is well-formed w.r.t. [[module]] }} by

      module , define fheader { list_block } |- list_block      
      ------------------------------------------------------ :: wf_fdef_intro
      module |- define fheader { list_block }

      defn
      |- module :: :: wf_module :: ''
      {{ com [[module]] is well-formed }} by 

      ------------------------ :: wf_module_nil
      |- nil

      |- module 
      ------------------------ :: wf_module_global_var
      |- module , g

      module |- fdef
      ------------------------ :: wf_module_function_def
      |- module , fdef   

      |- module
      genInsnUseDef module = usedef_insn	
      genBlockUseDef module = usedef_block
      -------------------------------------- :: wf_module_namedtype
      |- module , namedt     

% insn :: 'insn_'					    	::=			{{ com insnruction }}
%   | ret typ value             			    	::   :: return      	{{ com return }}
%   | ret void                   			    	::   :: return_void  	{{ com return void }}
%   | br value , ll1 , ll2				::   :: br              {{ com br }}        
%   | br ll        	    	  			::   :: br_uncond       {{ com unconditional br }}        
%   | switch value , ll </ [ constj , llj ] // j />	::   :: switch		{{ com switch }}
%   | id = invoke t id0 paraml to ll1 unwind ll2   	::   :: invoke		{{ com invoke }} 
%   | unreachable	     	   	     	 		::   :: unreachable	{{ com unreachable }}
%   | id = add typ value1 value2				::   :: add		{{ com add }}
%   | id = fadd typ value1 value2				::   :: fadd		{{ com fadd }}
%   | id = udiv typ value1 value2				::   :: udiv		{{ com udiv }}
%   | id = fdiv typ value1 value2				::   :: fdiv		{{ com fdiv }}
%   | id = or typ value1 value2				::   :: or 		{{ com or }}
%   | id = and typ value1 value2				::   :: and 		{{ com and }}
%   | id = extractelement < N0 * typ0 > id0 , const1	::   :: extractelement  {{ com extractelement }}
%   | id = insertelement < N0 * typ0 > id0 , typ1 value1 , const2	    ::   :: insertelement       {{ com insertelement }}
%   | id = extractvalue { </ typj // j /> } id0 , const1              ::   :: extractvalue	{{ com extractvalue }}
%   | id = insertvalue { </ typj // j /> } id0 , typ1 value1 , const2 ::   :: insertvalue		{{ com insertvalue }}
%   | id = alloca typ N  	     	       	     	       	::   :: alloca		{{ com alloca }}
%   | id = load typ1 id1					::   :: load		{{ com load }}
%   | store typ1 value1 , typ2 id2			::   :: store		{{ com store }}
%   | id = trunc typ1 value1 to typ2			::   :: trunc		{{ com trunc }}
%   | id = fptrunc typ1 value1 to typ2			::   :: fptrunc		{{ com fptrunc }}
%   | id = fptoui typ1 value1 to typ2			::   :: fptoui		{{ com fptoui }}
%   | id = fptosi typ1 value1 to typ2			::   :: fptosi		{{ com fptosi }}
%   | id = uitofp typ1 value1 to typ2			::   :: uitofp		{{ com uitofp }}
%   | id = sitofp typ1 value1 to typ2			::   :: sitofp		{{ com sitofp }}
%   | id = ptrtoint typ1 value1 to typ2			::   :: ptrtoint	{{ com ptrtoint }}
%   | id = inttoptr typ1 value1 to typ2			::   :: inttoptr	{{ com inttoptr }}
%   | id = bitcast typ1 value1 to typ2			::   :: bitcase		{{ com bitcast }}
%   | id = icmp cond typ value1 , value2			::   :: icmp		{{ com icmp }}
%   | id = fcmp cond typ value1 , value2			::   :: fcmp		{{ com fcmp }}
%   | id = phi typ </ [ idj , llj ] // j />		::   :: phi  	    	{{ com phi }}
