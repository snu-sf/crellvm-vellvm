
% Supporting Defs of Static Single Assignment(SSA)

defns
args2Typs_def :: '' ::=
     defn
     args2Typs list_arg = list_typ :: :: args2Typs :: ''
     {{ com convert [[list_arg]] into [[list_typ]] }} by

     -------------------- :: args2Typs_nil 
     args2Typs [] = []

     args2Typs list_arg = list_typ
     ---------------------------------------------- :: args2Typs_cons 
     args2Typs (list_arg, typ id) = list_typ, typ


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                inversion                                     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getIDLabelsFromPhiNode_def :: '' ::=
      defn
      getIDLabelsFromPhiNode insn = id_labels :: :: getIDLabelsFromPhiNode :: ''
      {{ com [[id_labels]] from [[insn]] }} by

      id_labels <-> </ [ idj , lj ] // j />
      -------------------------------------------------------------------------- :: getIDLableFromPhiNode_intro
      getIDLabelsFromPhiNode (id = phi typ </ [ idj , lj ] // j />) = id_labels


defns
getLabelViaIDFromIDLabels_def :: '' ::=
      defn
      getLabelViaIDFromIDLabels id_labels id = opt_l :: :: getLabelViaIDFromIDLabels :: ''
      {{ com return [[id]]'s label from [[id_labels]] }} by

      --------------------------------------- :: getLabelViaIDFromIDLabels_nil
      getLabelViaIDFromIDLabels [] id = none

      id = id'
      ---------------------------------------------------- :: getLabelViaIDFromIDLabels_cons_true
      getLabelViaIDFromIDLabels (id_labels, id l) id' = l

      not id = id'
      getLabelViaIDFromIDLabels id_labels id' = opt_l
      --------------------------------------------------------- :: getLabelViaIDFromIDLabels_cons_false
      getLabelViaIDFromIDLabels (id_labels, id l) id' = opt_l

defns
getLabelViaIDPhiNode_def :: '' ::=
      defn
      getLabelViaIDPhiNode insn id' = opt_l :: :: getLabelViaIDPhiNode :: ''
      {{ com get the label w.r.t [[id']] from [[insn]] }} by

      id_labels <-> </ [ idj , lj ] // j />
      getLabelViaIDFromIDLabels id_labels id' = opt_l
      ----------------------------------------------------------------------- :: getLabelViaIDPhiNode_intro
      getLabelViaIDPhiNode (id = phi typ </ [ idj , lj ] // j />) id' = opt_l

defns
getReturnTyp_def :: '' ::=
      defn
      getReturnTyp fdef = typ :: :: getReturnTyp :: '' 
      {{ com [[fdef]]'s return type is [[typ]] }} by

      ----------------------------------------------------------------- :: getReturnTyp_intro
      getReturnTyp (define (typ id (list_arg)) { list_block }) = typ


defns
getInsnsFromBlock_def :: '' ::=
      defn
      getInsnsFromBlock block = list_insn :: :: getInsnsFromBlock :: ''
      {{ com return [[list_insn]] in [[block]] }} by

      ------------------------------------------- :: getInsnsFromBlock_def
      getInsnsFromBlock (l list_insn) = list_insn

defns
getFheaderID_def :: '' ::=
     defn
     getFheaderID fheader = id :: :: getFheaderID :: ''
     {{ com return [[id]] from [[fheader]] }} by

     ---------------------------------------- :: getFheaderID_intro
     getFheaderID (typ id ( list_arg )) = id

defns
getFdecID_def :: '' ::=
     defn
     getFdecID fdec = id :: :: getFdecID :: ''
     {{ com return [[id]] from [[fdec]] }} by

     getFheaderID fheader = id
     ---------------------------------------- :: getFdecID_intro
     getFdecID (declare fheader) = id

defns
getFdefID_def :: '' ::=
     defn
     getFdefID fdef = id :: :: getFdefID :: ''
     {{ com return [[id]] from [[fdef]] }} by

     getFheaderID fheader = id
     ---------------------------------------------- :: getFdefID_intro
     getFdefID (define fheader {list_block}) = id

% defns
% getNamedtID_def :: '' ::=
%      defn
%      getNamedtID namedt = id :: :: getNamedtID :: ''
%      {{ com return [[id]] from [[namedt]] }} by

%      ----------------------------------- :: getNamedtID_intro
%      getNamedtID (id = type typ) = id   			

defns
getGID_def :: '' ::=
     defn
     getGID gvar = id :: :: getGID :: ''
     {{ com return [[id]] from [[gvar]] }} by

     ------------------------------------ :: getGID_intro
     getGID (id = global typ value) = id 

defns
getFheaderTyp_def :: '' ::=
     defn
     getFheaderTyp fheader = typ :: :: getFheaderTyp :: ''
     {{ com get [[fheader]]'s [[typ]] }} by

     args2Typs list_arg = list_typ
     list_typ <-> </ typj // j />
     ------------------------------------------------------------------- :: getFheaderTyp_intro
     getFheaderTyp (typ id ( list_arg)) = typ ( </ typj // j /> )

defns
getFdecTyp_def :: '' ::=
     defn
     getFdecTyp fdec = typ :: :: getFdecTyp :: ''
     {{ com get [[fdec]]'s [[typ]] }} by

     getFheaderTyp fheader = typ
     ------------------------------------------------------------------- :: getFdecTyp_intro
     getFdecTyp (declare fheader) = typ

defns
getFdefTyp_def :: '' ::=
     defn
     getFdefTyp fdef = typ :: :: getFdefTyp :: ''
     {{ com get [[fdef]]'s [[typ]] }} by

     getFheaderTyp fheader = typ
     ------------------------------------------------------------------- :: getFdefTyp_intro
     getFdefTyp (define fheader {list_block}) = typ

defns
getPointerEltTyp_def :: '' ::=
     defn
     getPointerEltTyp typ = typ' :: :: getPointerEltTyp :: '' 
     {{ com the pointer typ [[typ]] points to [[typ']] }} by

     ------------------------------- :: getPointerEltTyp_intro
     getPointerEltTyp (typ *) = typ

defns
getValueIDs_def :: '' ::=
     defn
     getValueIDs value = ids :: :: getValueIDs :: '' 
     {{ com the [[ids]] from [[value]] }} by

     getValueID value = none
     ------------------------------- :: getValueIDs_none
     getValueIDs value = empty

     getValueID value = id
     ------------------------------- :: getValueIDs_id
     getValueIDs value = id

defns
getParamsOperand_def :: '' ::=
     defn
     getParamsOperand list_param = ids :: :: getParamsOperand :: ''
     {{ com return operands of [[list_param]] }} by

     ---------------------------- :: getParamsOperand_nil
     getParamsOperand [] = empty

     getValueIDs value = ids
     getParamsOperand list_param = ids'
     ------------------------------------------------- :: getParamsOperand_cons
     getParamsOperand (list_param, typ value) = ids;ids'

defns
getBindingTyp_def :: '' ::=
      defn
      getBindingTyp id_binding = opt_typ :: :: getBindingTyp :: ''
      {{ com get [[id_binding]]'s return typ [[opt_typ]] }} by

      getInsnTyp insn = opt_typ
      ---------------------------- :: getBindingTyp_insn
      getBindingTyp insn = opt_typ

      --------------------------------------------- :: getBindingTyp_g
      getBindingTyp (id = global typ value) = typ *

      ---------------------------- :: getBindingTyp_arg
      getBindingTyp (typ id) = typ

      getFdecTyp fdec = typ      
      ---------------------------- :: getBindingTyp_fdec
      getBindingTyp fdec = typ

      ---------------------------- :: getBindingTyp_none
      getBindingTyp none = none

defns
getCallName_def :: '' ::=
     defn
     getCallName insn = id :: :: getCallName :: '' {{ com }} by

     ------------------------------------------------ :: getCallName_def
     getCallName (id = call typ id0 list_param) = id0

% defns
% getNormalDestFromInvokeInsn_def :: '' ::=
%      defn
%      getNormalDestFromInvokeInsn insn = l :: :: getNormalDestFromInvokeInsn :: '' 
%      {{ com return normal dest of this invoke [[insn]] }} by

%      ----------------------------------------------------------------------------------- :: getNormalDestFromInvokeInsn_intro
%      getNormalDestFromInvokeInsn (id = invoke typ0 id0 list_param to l1 unwind l2) = l1

% defns
% getUnwindDestFromInvokeInsn_def :: '' ::=
%      defn
%      getUnwindDestFromInvokeInsn insn = l :: :: getUnwindDestFromInvokeInsn :: '' 
%      {{ com return unwind dest of this invoke [[insn]] }} by

%      ----------------------------------------------------------------------------------- :: getUnwindDestFromInvokeInsn_intro
%      getUnwindDestFromInvokeInsn (id = invoke typ0 id0 list_param to l1 unwind l2) = l2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 classes                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
isPointerTyp_def :: '' ::=
     defn
     isPointerTyp typ :: :: isPointerTyp :: '' {{ com is [[typ]] a pointer typ }} by

     ------------------------------------------------------------- :: isPointerTyp_intro
     isPointerTyp (typ *) 

% defns
% isInvokeInsn_def :: '' ::=
%      defn
%      isInvokeInsn insn :: :: isInvokeInsn :: '' {{ com is [[insn]] an invoke instruction }} by

%      ------------------------------------------------------------- :: isInvokeInsn_intro
%      isInvokeInsn (id = invoke typ0 id0 list_param to l1 unwind l2) 

defns
isReturnInsn_def :: '' ::=
     defn
     isReturnInsn insn :: :: isReturnInsn :: '' {{ com is [[insn]] a return instruction }} by

     --------------------------------- :: isReturnInsn_nonvoid
     isReturnInsn (ret typ value) 

     % --------------------------------- :: isReturnInsn_void
     % isReturnInsn (ret void) 

defns
isCallInsn_def :: '' ::=
     defn
     isCallInsn insn :: :: isCallInsn :: '' {{ com is [[insn]] a call instruction }} by

     ------------------------------------------------------------- :: isCallInsn_intro
     isCallInsn (id = call typ0 id0 list_param) 

defns
isTerminatorInsn_def :: '' ::=
     defn
     isTerminatorInsn insn :: :: isTerminatorInsn :: '' {{ com is [[insn]] a terminator instruction }} by

     --------------------------------- :: isTerminator_ret
     isTerminatorInsn (ret typ value)

     % --------------------------------- :: isTerminator_ret_void
     % isTerminatorInsn (ret void)

     ---------------------------------------- :: isTerminator_br
     isTerminatorInsn (br value , l1, l2)

     ----------------------- :: isTerminator_br_uncond
     isTerminatorInsn (br l)
 
%      ------------------------------------------------------------------ :: isTerminator_invoke
%      isTerminatorInsn (id = invoke typ0 id0 list_param to l1 unwind l2)

     ------------------------------------------------ :: isTerminator_call
     isTerminatorInsn (id = call typ0 id0 list_param)

     ----------------------------- :: isTerminator_unreachable
     isTerminatorInsn unreachable

% isValidReturnTyp - Return true if the specified type is valid as a return type. 
% lib/VMCore/Typ
defns
isNotValidReturnTyp_def :: '' ::=
      defn
      isNotValidReturnTyp typ :: :: isNotValidReturnTyp :: '' {{ com [[typ]] isnt a valid return type }} by  
      
      --------------------------------- :: isNotValidReturnTyp_label
      isNotValidReturnTyp label


      --------------------------------- :: isNotValidReturnTyp_metadata
      isNotValidReturnTyp metadata      

defns
isValidReturnTyp_def :: '' ::=
      defn
      isValidReturnTyp typ :: :: isValidReturnTyp :: '' {{ com [[typ]] is a valid return type }} by  

      not isNotValidReturnTyp typ
      --------------------------------- :: isValidReturnTyp_intro
      isValidReturnTyp typ

% isFirstClassTyp - Return true if the type is "first class", meaning it is a valid 
% type for a Value. lib/VMCore/Typ 
defns
isNotFirstClassTyp_def :: '' ::=
      defn
      isNotFirstClassTyp typ :: :: isNotFirstClassTyp :: '' {{ com [[typ]] isnt a first class type }} by

      ---------------------------------- :: isNotFirstClassTyp_void
      isNotFirstClassTyp void

%       ---------------------------------- :: isNotFirstClassTyp_opaque
%       isNotFirstClassTyp opaque

       --------------------------------------------- :: isNotFirstClassTyp_function
       isNotFirstClassTyp typ ( </ typj // j /> )

defns
isFirstClassTyp_def :: '' ::=
      defn
      isFirstClassTyp typ :: :: isFirstClassTyp :: '' {{ com [[typ]] is a first class type }} by

      not isNotFirstClassTyp typ
      ----------------------------------- :: isFirstClassTyp_intro
      isFirstClassTyp typ

% isValidArgumentTyp - Return true if the specified type is valid as an
% argument type. lib/VMCore/Typ.cpp
defns
isValidArgumentTyp_def :: '' ::=
      defn
      isValidArgumentTyp typ :: :: isValidArgumentTyp :: '' {{ com [[typ]] is a valid argument type }} by
 
%       ----------------------------------- :: isValidArgumentTyp_opaque
%       isValidArgumentTyp opaque

      isFirstClassTyp typ
      ----------------------------------- :: isValidArgumentTyp_firstclass
      isValidArgumentTyp typ

defns 
isNotValidElementTyp_def :: '' ::=
      defn
      isNotValidElementTyp typ :: :: isNotValidElementTyp :: '' {{ com [[typ]] isnt a valid elment type }} by

      ----------------------------------- :: isNotValidElementTyp_void
      isNotValidElementTyp void

      ----------------------------------- :: isNotValidElementTyp_label
      isNotValidElementTyp label
 
      ----------------------------------- :: isNotValidElementTyp_metadata
      isNotValidElementTyp metadata

      --------------------------------------------- :: isNotValidElementTyp_function
      isNotValidElementTyp typ ( </ typj // j /> )

defns 
isValidElementTyp_def :: '' ::=
      defn
      isValidElementTyp typ :: :: isValidElementTyp :: '' {{ com [[typ]] is a valid elment type }} by

      not isNotValidElementTyp typ
      ----------------------------------- :: isValidElementTyp_intro
      isValidElementTyp typ

defns
isPhiNode_def :: '' ::= {{coq-universe Type}} 
      defn
      isPhiNode insn :: :: isPhiNode :: ''
      {{ com check is [[insn]] is a phi node }} by

      --------------------------------------- :: isPhiNode_intro
      isPhiNode (id = phi typ </ [ idj , lj ] // j />) 
      
defns
isTerminatorInsn_def :: '' ::=
      defn
      isTerminatorInsn insn :: :: isTerminatorInsn :: ''
      {{ com check is [[insn]] is a terminator insn }} by

      --------------------------------------- :: isTerminatorInsn_return
      isTerminatorInsn (ret typ value) 
      
      % --------------------------------------- :: isTerminatorInsn_return_void
      % isTerminatorInsn (ret void)

      --------------------------------------- :: isTerminatorInsn_br
      isTerminatorInsn (br value , l1 , l2)

      --------------------------------------- :: isTerminatorInsn_br_uncond
      isTerminatorInsn (br l)

%      ----------------------------------------------------------------- :: isTerminatorInsn_switch
%      isTerminatorInsn (switch typ value , l </ [ constj , lj ] // j />)

%       ----------------------------------------------------------------- :: isTerminatorInsn_invoke
%       isTerminatorInsn (id = invoke typ id0 list_param to l1 unwind l2)

      ----------------------------------------------------------------- :: isTerminatorInsn_unreachable
      isTerminatorInsn unreachable

defns
isBindingFdec_def :: '' ::=
      defn
      isBindingFdec id_binding = fdec :: :: isBindingFdec :: ''
      {{ com is [[id_binding]] a [[fdec]] }} by

      ------------------------- :: isBindingFdec_intro
      isBindingFdec fdec = fdec

defns
isBindingArg_def :: '' ::=
      defn
      isBindingArg id_binding = arg :: :: isBindingArg :: ''
      {{ com is [[id_binding]] an [[arg]] }} by

      ------------------------- :: isBindingArg_intro
      isBindingArg arg = arg

defns
isBindingGvar_def :: '' ::=
      defn
      isBindingGvar id_binding = gvar :: :: isBindingGvar :: ''
      {{ com is [[id_binding]] a [[gvar]] }} by

      ------------------------- :: isBindingGvar_intro
      isBindingGvar gvar = gvar

defns
isBindingInsn_def :: '' ::=
      defn
      isBindingInsn id_binding = insn :: :: isBindingInsn :: ''
      {{ com is [[id_binding]] an [[insn]] }} by

      ------------------------- :: isBindingInsn_intro
      isBindingInsn insn = insn

defns
isAggregateTyp_def :: '' ::=
      defn
      isAggregateTyp typ :: :: isAggregateTyp :: '' {{ com [[typ]] is an aggregate type }} by

      -------------------------------------------- :: isAggregateTyp_struct
      isAggregateTyp {</ typj // j />}

      --------------------------------------------- :: isAggregateTyp_array
      isAggregateTyp [sz * typ] 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Eq              						 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
typEq_def :: '' ::=
       defn
       typ == typ' :: :: typEq :: ''
       {{ com check if [[typ]] equals to [[typ']] }} by

       sz = sz'
       ------------------------- :: typeEq_int
       int sz == int sz'

       % ------------------------- :: typeEq_float
       % float == float

       % ------------------------- :: typeEq_double
       % double == double

       % ------------------------- :: typeEq_fp128
       % fp128 == fp128

       ------------------------- :: typeEq_void       
       void == void

       ------------------------- :: typeEq_label
       label == label

       ------------------------- :: typeEq_metadata
       metadata == metadata

       % ------------------------- :: typeEq_opaque
       % opaque == opaque

       sz = sz'
       typ == typ'
       --------------------------------- :: typeEq_array
       [ sz * typ ] == [ sz' * typ' ] 

       % INT == INT'
       % typ == typ'
       % --------------------------------- :: typeEq_vector
       % < INT * typ > == < INT' * typ' > 

       typ == typ'
       --------------------------------- :: typeEq_pointer
       typ * == typ' *

       typ == typ'
       </ typj == typ'j // j />
       ----------------------------------------------------- :: typeEq_function
       typ ( </ typj // j /> ) == typ' ( </ typ'j // j /> )  

       </ typj == typ'j // j />
       ----------------------------------------------------- :: typeEq_structure
       { </ typj // j /> } == { </ typ'j // j /> }  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Check Terminator						 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnsEndsWithTerminatorInsn_def :: '' ::=
      defn
      insnsEndsWithTerminatorInsn list_insn :: :: insnsEndsWithTerminatorInsn :: ''
      {{ com [[list_insn]] ends with terminator insnruction }} by
      
      {{ last_opt insn [[:user_syntax__list_insn: list_insn]] = [[:user_syntax__opt_insn: insn]] }}
      isTerminatorInsn insn
      ----------------------------------------------- :: insnsEndsWithTerminatorInsn_intro
      insnsEndsWithTerminatorInsn list_insn 
    
defns
insnsDoesntContainTerminatorInsn_def :: '' ::=
      defn
      insnsDoesntContainTerminatorInsn list_insn :: :: insnsDoesntContainTerminatorInsn :: ''
      {{ com [[list_insn]] doesnt contain terminator insnruction }} by

      --------------------------------------- :: insnsDoesntContainTerminatorInsn_nil
      insnsDoesntContainTerminatorInsn []

      insnsDoesntContainTerminatorInsn list_insn
      not isTerminatorInsn insn
      ----------------------------------------------- :: insnsDoesntContainTerminatorInsn_cons
      insnsDoesntContainTerminatorInsn list_insn , insn

defns
insnsChecksTerminatorInsn_def :: '' ::=
      defn
      insnsChecksTerminatorInsn list_insn :: :: insnsChecksTerminatorInsn :: ''
      {{ com check if [[list_insn]] is well-formed }} by

      insnsEndsWithTerminatorInsn list_insn
      {{ removelast [[:user_syntax__list_insn:list_insn]] = [[:user_syntax__list_insn:list_insn']] }}
      insnsDoesntContainTerminatorInsn list_insn'
      ----------------------------------------------- :: insnsChecksTerminatorInsn_intro
      insnsChecksTerminatorInsn list_insn

defns
blockChecksTerminatorInsn_def :: '' ::=
      defn
      blockChecksTerminatorInsn block :: :: blockChecksTerminatorInsn :: ''
      {{ com [[block]] checks terminator instructions }} by

      insnsChecksTerminatorInsn list_insn
      ----------------------------------------------- :: blockChecksTerminatorInsn_def
      blockChecksTerminatorInsn (l list_insn)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%        Check Phi							%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnsStartsWithPhiNode_def :: '' ::=
      defn
      insnsStartsWithPhiNode list_insn :: :: insnsStartsWithPhiNode :: ''
      {{ com [[list_insn]] starts with phi insnruction }} by

      ----------------------------------------------- :: insnsStartsWithPhiNode_nil
      insnsStartsWithPhiNode []

      insnsStartsWithPhiNode list_insn      
      isPhiNode insn
      ---------------------------------------------------------------------- :: insnsStartsWithPhiNode_cons_phi
      insnsStartsWithPhiNode (list_insn, insn)
      
      insnsDoesntContainPhiNode list_insn      
      notT isPhiNode insn
      ---------------------------------------------------------------------- :: insnsStartsWithPhiNode_cons_nophi
      insnsStartsWithPhiNode (list_insn, insn)

      defn
      insnsDoesntContainPhiNode list_insn :: :: insnsDoesntContainPhiNode :: ''
      {{ com [[list_insn]] doesnt contain phi insnruction }} by

      --------------------------------------- :: insnsDoesntContainPhiNode_nil
      insnsDoesntContainPhiNode []

      insnsDoesntContainPhiNode list_insn
      notT isPhiNode insn 
      ----------------------------------------------------- :: insnsDoesntContainPhiNode_cons
      insnsDoesntContainPhiNode list_insn , insn

defns
blockStartsWithPhiNode_def :: '' ::=
      defn
      blockStartsWithPhiNode block :: :: blockStartsWithPhiNode :: ''
      {{ com [[block]] starts with phi insnruction }} by

      insnsStartsWithPhiNode list_insn
      ----------------------------------------------- :: blockStartsWithPhiNode_def
      blockStartsWithPhiNode (l list_insn)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get block from label                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getBlockAtLableFromBlocks_def :: '' ::=
      defn 
      getBlockAtLableFromBlocks list_block l = opt_block :: :: getBlockAtLableFromBlocks :: ''
      {{ com [[opt_block]] is of label [[l]] in [[list_block]] }} by

      ---------------------------------------------------- :: getBlockAtLableFromBlocks_nil
      getBlockAtLableFromBlocks [] l = none

      l1 = l2 
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_true
      getBlockAtLableFromBlocks (list_block, (l1 list_insn1)) l2 = l1 list_insn1

      not l1 = l2
      getBlockAtLableFromBlocks list_block l2 = opt_block
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_rec1
      getBlockAtLableFromBlocks (list_block, (l1 list_insn1)) l2 = opt_block
			      
    
defns
getBlockAtLableFromFdef_def :: '' ::=
      defn
      getBlockAtLableFromFdef fdef l = opt_block :: :: getBlockAtLableFromFdef :: ''
      {{ com [[opt_block]] is of label [[l]] in [[fdef]] }} by

      getBlockAtLableFromBlocks list_block l = opt_block
      ---------------------------------------------------- :: getBlockAtLableFromFdef_intro
      getBlockAtLableFromFdef (define fheader { list_block }) l = opt_block


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         phi                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getPhiNodesFromListInsn_def :: '' ::=
      defn
      getPhiNodesFromListInsn list_insn = list_insn' :: :: getPhiNodesFromListInsn :: ''
      {{ com [[list_insn']] are the Phi nodes in [[list_insn]] }} by
 
      -------------------------------- :: getPhiNodesFromListInsn_nil
      getPhiNodesFromListInsn [] = []

      getPhiNodesFromListInsn list_insn = list_insn'
      isPhiNode insn       
      --------------------------------------------------- :: getPhiNodesFromListInsn_rec_true
      getPhiNodesFromListInsn (list_insn, insn) = list_insn', insn

      getPhiNodesFromListInsn list_insn = list_insn'
      notT isPhiNode insn       
      --------------------------------------------------- :: getPhiNodesFromListInsn_rec_false
      getPhiNodesFromListInsn (list_insn, insn) = list_insn'

defns
getPhiNodesFromBlock_def :: '' ::=
      defn
      getPhiNodesFromBlock block = list_insn :: :: getPhiNodesFromBlock :: ''
      {{ com [[list_insn]] are the Phi nodes in [[block]] }} by
 
      getInsnsFromBlock block = list_insn
      getPhiNodesFromListInsn list_insn = list_insn'
      ---------------------------------------- :: getPhiNodesFromBlocks_intro
      getPhiNodesFromBlock block = list_insn'

defns
getLabelsFromPhiNode_def :: '' ::=
      defn
      getLabelsFromPhiNode insn = ls :: :: getLabelsFromPhiNode :: ''
      {{ com [[ls]] is the set of labels from phi [[insn]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNode_intro
      getLabelsFromPhiNode (id = phi typ </ [ idj , lj ] // j />) = </lj//j/> 
 
defns
getLabelsFromPhiNodes_def :: '' ::=
      defn
      getLabelsFromPhiNodes list_insn = ls :: :: getLabelsFromPhiNodes :: ''
      {{ com [[ls]] is the set of labels from phis [[list_insn]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_nil
      getLabelsFromPhiNodes [] = empty

      getLabelsFromPhiNodes list_insn = ls
      getLabelsFromPhiNode insn = ls'
      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_cons
      getLabelsFromPhiNodes (list_insn, insn) = ls ; ls' 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         Uniq                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnNotinInsns_def :: '' ::=
     defn
     insnNotinInsns insn list_insn :: :: insnNotinInsns :: ''
     {{ com the ID of [[insn]] isnt in Ids of [[list_insn]] }} by

     getInsnID insn = none
     ------------------------------ :: insnNotinInsns_none
     insnNotinInsns insn list_insn    	      

     getInsnID insn = id
     ----------------------- :: insnNotinInsns_some_nil
     insnNotinInsns insn []    	      

     getInsnID insn = id
     getInsnID insn' = none
     insnNotinInsns insn list_insn'
     ------------------------------------ :: insnNotinInsns_some_none_cons
     insnNotinInsns insn (list_insn', insn')    	      

     getInsnID insn = id
     getInsnID insn' = id'
     not id = id'
     insnNotinInsns insn list_insn'
     ------------------------------------ :: insnNotinInsns_some_cons
     insnNotinInsns insn (list_insn', insn')    	      

defns
uniqInsns_def :: '' ::=
     defn
     uniqInsns list_insn :: :: uniqInsns :: ''
     {{ com IDs in [[list_insn]] are uniq }} by

     --------------------- :: uniqInsns_nil
     uniqInsns []

     insnNotinInsns insn list_insn
     uniqInsns list_insn
     ---------------------------- :: uniqInsns_cons
     uniqInsns (list_insn, insn)


defns
getInsnsFromBlocks_def :: '' ::=
     defn
     getInsnsFromBlocks list_block = list_insn :: :: getInsnsFromBlocks :: ''
     {{ com the instructions of [[list_block]] are [[list_insn]] }} by

     ---------------------------- :: getInsnsFromBlocks_nil
     getInsnsFromBlocks [] = []

     getInsnsFromBlocks list_block = list_insn
     getInsnsFromBlock block = list_insn' 
     ------------------------------------------------- :: getInsnsFromBlocks_cons
     getInsnsFromBlocks (list_block, block) = list_insn;list_insn'

defns
blockNotinBlocks_def :: '' ::=
     defn
     blockNotinBlocks block list_block :: :: blockNotinBlocks :: ''
     {{ com the label of [[block]] isnt in labels of [[list_block]] }} by

%     ------------------------------------ :: blockNotinBlocks_none
%     blockNotinBlocks list_insn list_block    	     

     --------------------------------- :: blockNotinBlocks_some_nil
     blockNotinBlocks (l list_insn) []    	      

%     blockNotinBlocks (l list_insn) list_block'
%     ------------------------------------ :: blockNotinBlocks_some_none_cons
%     blockNotinBlocks (l list_insn) (list_block', list_insn')    	      

     not l = l'
     blockNotinBlocks (l list_insn) list_block'
     ------------------------------------ :: blockNotinBlocks_some_cons
     blockNotinBlocks (l list_insn) (list_block', l' list_insn')    	      


defns 
uniqLabels_def :: '' ::=
     defn
     uniqLabels list_block :: :: uniqLabels :: ''
     {{ com the labels in [[list_block]] are uniq}} by

     --------------------- :: uniqLabels_nil
     uniqLabels []

     blockNotinBlocks block list_block
     uniqLabels list_block
     ---------------------------- :: uniqLabels_cons
     uniqLabels (list_block, block)

defns
uniqBlocks_def :: '' ::=
     defn
     uniqBlocks list_block :: :: uniqBlocks :: ''
     {{ com the IDs and labels in [[list_block]] are uniq}} by
     
     getInsnsFromBlocks list_block = list_insn
     uniqInsns list_insn
     uniqLabels list_block
     ------------------------------------------------ :: uniqBlocks_intro
     uniqBlocks list_block

defns
uniqFdef_def :: '' ::=
     defn
     uniqFdef fdef :: :: uniqFdef :: ''
     {{ com the IDs in [[fdef]] are uniq}} by
   
     uniqBlocks list_block	
     ------------------------------------------------ :: uniqFdef_intro
     uniqFdef (define fheader { list_block })

defns
getProductID_def :: '' ::=
     defn 
     getProductID product = id :: :: getProductID :: ''
     {{ com return [[id]] from [[product]] }} by

%      getGID g = id
%      ------------------------------------ :: getProductID_fdec_g
%      getProductID g = id

     getFdecID fdec = id
     ------------------------------------ :: getProductID_fdec
     getProductID fdec = id
   
     ------------------------------------ :: getProductID_fdef
     getProductID fdef = id

%      getNamedtID namedt = id
%      ------------------------------------ :: getProductID_namedt
%      getProductID namedt = id

defns
productNotinProducts_def :: '' ::=
     defn
     productNotinProducts product list_product :: :: productNotinProducts :: ''
     {{ com the ID of [[product]] isnt in Ids of [[list_product]] }} by

     ------------------------------- :: productNotinProducts_nil
     productNotinProducts product []    	      

     getProductID product = id
     getProductID product' = id'
     not id = id'
     productNotinProducts product list_product'
     ------------------------------------ :: productNotinProducts_cons
     productNotinProducts product (list_product', product')    	      

defns
uniqProduct_def :: '' ::=
     defn 
     uniqProduct product :: :: uniqProduct :: ''
     {{ com ids in [[product]] are uniq }} by

%      ------------------------------------ :: uniqProduct_g
%      uniqProduct g 

     ------------------------------------ :: uniqProduct_fdec
     uniqProduct fdec 

     uniqFdef fdef     
     ------------------------------------ :: uniqProduct_fdef
     uniqProduct fdef

%      ------------------------------------ :: uniqProduct_namedt
%      uniqProduct namedt


defns
uniqProducts_def :: '' ::=
     defn
     uniqProducts list_product :: :: uniqProducts :: ''
     {{ com IDs in [[list_product]] are uniq }} by

     --------------------- :: uniqProducts_nil
     uniqProducts []

     productNotinProducts product list_product
     uniqProducts list_product
     uniqProduct product
     -------------------------------------- :: uniqProducts_cons
     uniqProducts (list_product, product)

defns 
uniqModule_def :: '' ::=
     defn
     uniqModule module :: :: uniqModule :: ''
     {{ com IDs in [[module]] are uniq }} by
       
     uniqProducts list_product
     ---------------------------- :: uniqModule_intro
     uniqModule (list_layout list_product)

defns 
uniqModules_def :: '' ::=
     defn
     uniqModules list_module :: :: uniqModules :: ''
     {{ com IDs in [[list_module]] are uniq }} by
      
     ---------------------- :: uniqModules_nil
     uniqModules []

     uniqModules list_module
     uniqModule module
     ----------------------------------- :: uniqModules_cons
     uniqModules (list_module, module)

defns
uniqSystem_def :: '' ::=
     defn
     uniqSystem system :: :: uniqSystem :: ''
     {{ com IDs in [[system]] are uniq }} by

     system = list_module
     uniqModules list_module
     --------------------------- :: uniqSystem_intro
     uniqSystem system

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    inclusion                                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnInBlock_def :: '' ::=
     defn
     insnInBlock insn block :: :: insnInBlock :: ''
     {{ com [[block]] includes [[insn]] }} by

     getInsnsFromBlock block = list_insn
     insn in list_insn
     ------------------------------------------------- :: insnInBlock_intro
     insnInBlock insn block

defns
argInFheader_def :: '' ::=
     defn
     argInFheader arg fheader :: :: argInFheader :: ''
     {{ com [[fheader]] includes [[arg]] }} by

     arg in list_arg
     ------------------------------------- :: argInFheader_intro
     argInFheader arg (typ id ( list_arg )) 
 
defns
argInFdec_def :: '' ::=
     defn
     argInFdec arg fdec :: :: argInFdec :: ''
     {{ com [[fdec]] includes [[arg]] }} by

     argInFheader arg fheader
     ------------------------------------------------- :: argInFdec_intro
     argInFdec arg (declare fheader)

defns
argInFdef_def :: '' ::=
     defn
     argInFdef arg fdef :: :: argInFdef :: ''
     {{ com [[fdef]] includes [[arg]] }} by

     argInFheader arg fheader
     ------------------------------------------------- :: argInFdef_intro
     argInFdef arg (define fheader {list_block})

defns
blockInFdef_def :: '' ::=
     defn
     blockInFdef block fdef :: :: blockInFdef :: ''
     {{ com [[fdef]] includes [[block]] }} by

     block in list_block
     ------------------------------------------------- :: blockInFdef_intro
     blockInFdef block (define fheader {list_block})

defns
productInSystemModule_info :: '' ::=
     defn
     product in system , module_info :: :: productInSystemModule :: ''
     {{ com [[system]] [[module_info]] includes [[product]] }} by

     (list_layout list_product) in system
     product in list_product
     --------------------------------------------------------------------------- :: productInSystemModule_intro
     product in system , ((list_layout list_product), usedef_insn, usedef_block)   

defns
blockInSystemModuleFdef_info :: '' ::=
     defn
     block in system , module_info , fdef_info :: :: blockInSystemModuleFdef :: ''
     {{ com [[system]] [[module_info]] [[fdef_info]] includes [[block]] }} by

     blockInFdef block fdef
     fdef in system , module_info
     ------------------------------------------------------- :: blockInSystemModuleFdef_intro
     block in system , module_info , (fdef, dt) 

defns
insnInSystemModuleFdefBlock_info :: '' ::=
     defn
     insn in system , module_info , fdef_info , block :: :: insnInSystemModuleFdefBlock :: ''
     {{ com [[system]] [[module_info]] [[fdef_info]] [[block]] includes [[insn]] }} by

     insnInBlock insn block
     block in system , module_info , fdef_info
     ------------------------------------------------------- :: insnInSystemModuleFdefBlock_intro
     insn in system , module_info , fdef_info , block 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Fun type lookup                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupFdecTypViaIDFromProduct_def :: '' ::=
     defn
     lookupFdecTypViaIDFromProduct product id = opt_typ :: :: lookupFdecTypViaIDFromProduct :: ''
     {{ com look up [[id]]'s typ from [[product]] }} by

     % ------------------------------------------- :: lookupFdecTypViaIDFromProduct_g
     % lookupFdecTypViaIDFromProduct g id = none

     % ------------------------------------------------ :: lookupFdecTypViaIDFromProduct_namedt
     % lookupFdecTypViaIDFromProduct namedt id = none

     getFdecID fdec = id'
     id = id'
     getFdecTyp fdec = typ
     ------------------------------------------------ :: lookupFdecTypViaIDFromProduct_fdec_true
     lookupFdecTypViaIDFromProduct fdec id = typ

     getFdecID fdec = id'
     not id = id'
     ------------------------------------------------ :: lookupFdecTypViaIDFromProduct_fdec_false
     lookupFdecTypViaIDFromProduct fdec id = none

     ------------------------------------------------ :: lookupFdecTypViaIDFromProduct_fdef
     lookupFdecTypViaIDFromProduct fdef id = none

defns
lookupFdefTypViaIDFromProduct_def :: '' ::=
     defn
     lookupFdefTypViaIDFromProduct product id = opt_typ :: :: lookupFdefTypViaIDFromProduct :: ''
     {{ com look up [[id]]'s typ from [[product]] }} by

     % ------------------------------------------- :: lookupFdefTypViaIDFromProduct_g
     % lookupFdefTypViaIDFromProduct g id = none

     % ------------------------------------------------ :: lookupFdefTypViaIDFromProduct_namedt
     % lookupFdefTypViaIDFromProduct namedt id = none

     getFdefID fdef = id'
     id = id'
     getFdefTyp fdef = typ
     ------------------------------------------------ :: lookupFdefTypViaIDFromProduct_fdef_true
     lookupFdefTypViaIDFromProduct fdef id = typ

     getFdefID fdef = id'
     not id = id'
     ------------------------------------------------ :: lookupFdefTypViaIDFromProduct_fdef_false
     lookupFdefTypViaIDFromProduct fdef id = none

     ------------------------------------------------ :: lookupFdefTypViaIDFromProduct_fdec
     lookupFdefTypViaIDFromProduct fdec id = none

defns
lookupFdecTypViaIDFromProducts_def :: '' ::=
     defn
     lookupFdecTypViaIDFromProducts list_product id = opt_typ :: :: lookupFdecTypViaIDFromProducts :: ''
     {{ com look up [[id]]'s fdec typ from [[list_product]] }} by

     ---------------------------------------- :: lookupFdecTypViaIDFromProducts_nil
     lookupFdecTypViaIDFromProducts [] id = none

     lookupFdecTypViaIDFromProduct product id = typ 
     ------------------------------------------------------------- :: lookupFdecTypViaIDFromProducts_true
     lookupFdecTypViaIDFromProducts (list_product, product) id = typ
     
     lookupFdecTypViaIDFromProduct product id = none
     lookupFdecTypViaIDFromProducts list_product id = opt_typ
     ---------------------------------------------------------------- :: lookupFdecTypViaIDFromProducts_false
     lookupFdecTypViaIDFromProducts (list_product, product) id = opt_typ

defns
lookupFdefTypViaIDFromProducts_def :: '' ::=
     defn
     lookupFdefTypViaIDFromProducts list_product id = opt_typ :: :: lookupFdefTypViaIDFromProducts :: ''
     {{ com look up [[id]]'s fdef typ from [[list_product]] }} by

     ---------------------------------------- :: lookupFdefTypViaIDFromProducts_nil
     lookupFdefTypViaIDFromProducts [] id = none

     lookupFdefTypViaIDFromProduct product id = typ 
     ------------------------------------------------------------- :: lookupFdefTypViaIDFromProducts_true
     lookupFdefTypViaIDFromProducts (list_product, product) id = typ
     
     lookupFdefTypViaIDFromProduct product id = none
     lookupFdefTypViaIDFromProducts list_product id = opt_typ
     ---------------------------------------------------------------- :: lookupFdefTypViaIDFromProducts_false
     lookupFdefTypViaIDFromProducts (list_product, product) id = opt_typ

defns
lookupFdecTypViaIDFromModule_def :: '' ::=
     defn
     lookupFdecTypViaIDFromModule module id = opt_typ :: :: lookupFdecTypViaIDFromModule :: ''
     {{ com look up [[id]]'s fdec typ from [[module]] }} by

     lookupFdecTypViaIDFromProducts list_product id = opt_typ
     -------------------------------------------------------- :: lookupFdecTypViaIDFromModule_intro
     lookupFdecTypViaIDFromModule (list_layout list_product) id = opt_typ
     
defns
lookupFdefTypViaIDFromModule_def :: '' ::=
     defn
     lookupFdefTypViaIDFromModule module id = opt_typ :: :: lookupFdefTypViaIDFromModule :: ''
     {{ com look up [[id]]'s fdef typ from [[module]] }} by

     lookupFdefTypViaIDFromProducts list_product id = opt_typ
     -------------------------------------------------------- :: lookupFdefTypViaIDFromModule_intro
     lookupFdefTypViaIDFromModule (list_layout list_product) id = opt_typ

defns
lookupFdecTypViaIDFromModules_def :: '' ::=
     defn
     lookupFdecTypViaIDFromModules list_module id = opt_typ :: :: lookupFdecTypViaIDFromModules :: ''
     {{ com look up [[id]]'s fdec typ from [[list_module]] }} by

     ---------------------------------------- :: lookupFdecTypViaIDFromModules_nil
     lookupFdecTypViaIDFromModules [] id = none

     lookupFdecTypViaIDFromModule module id = typ
     ------------------------------------------------------------- :: lookupFdecTypViaIDFromModules_true
     lookupFdecTypViaIDFromModules (list_module, module) id = typ

     lookupFdecTypViaIDFromModule module id = none
     lookupFdecTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------------------- :: lookupFdecTypViaIDFromModules_false
     lookupFdecTypViaIDFromModules (list_module, module) id = opt_typ

defns
lookupFdefTypViaIDFromModules_def :: '' ::=
     defn
     lookupFdefTypViaIDFromModules list_module id = opt_typ :: :: lookupFdefTypViaIDFromModules :: ''
     {{ com look up [[id]]'s fdef typ from [[list_module]] }} by

     ---------------------------------------- :: lookupFdefTypViaIDFromModules_nil
     lookupFdefTypViaIDFromModules [] id = none

     lookupFdefTypViaIDFromModule module id = typ
     ------------------------------------------------------------- :: lookupFdefTypViaIDFromModules_true
     lookupFdefTypViaIDFromModules (list_module, module) id = typ

     lookupFdefTypViaIDFromModule module id = none
     lookupFdefTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------------------- :: lookupFdefTypViaIDFromModules_false
     lookupFdefTypViaIDFromModules (list_module, module) id = opt_typ

defns
lookupFdecTypViaIDFromSystem_def :: '' ::=
     defn
     lookupFdecTypViaIDFromSystem system id = opt_typ :: :: lookupFdecTypViaIDFromSystem :: ''
     {{ com look up [[id]]'s dec typ from [[system]] }} by

     system = list_module
     lookupFdecTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------- :: lookupFdecTypViaIDFromSystem_intro
     lookupFdecTypViaIDFromSystem system id = opt_typ

defns
lookupFdefTypViaIDFromSystem_def :: '' ::=
     defn
     lookupFdefTypViaIDFromSystem system id = opt_typ :: :: lookupFdefTypViaIDFromSystem :: ''
     {{ com look up [[id]]'s def typ from [[system]] }} by

     system = list_module
     lookupFdefTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------- :: lookupFdefTypViaIDFromSystem_intro
     lookupFdefTypViaIDFromSystem system id = opt_typ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Fun lookup via ID                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupFdecViaIDFromProduct_def :: '' ::=
     defn
     lookupFdecViaIDFromProduct product id = opt_fdec :: :: lookupFdecViaIDFromProduct :: ''
     {{ com look up [[id]]'s fdec from [[product]] }} by

     % ------------------------------------------- :: lookupFdecViaIDFromProduct_g
     % lookupFdecViaIDFromProduct g id = none

     % ------------------------------------------------ :: lookupFdecViaIDFromProduct_namedt
     % lookupFdecViaIDFromProduct namedt id = none

     getFdecID fdec = id'
     id = id'
     ------------------------------------------------ :: lookupFdecViaIDFromProduct_fdec_true
     lookupFdecViaIDFromProduct fdec id = fdec

     getFdecID fdec = id'
     not id = id'
     ------------------------------------------------ :: lookupFdecViaIDFromProduct_fdec_false
     lookupFdecViaIDFromProduct fdec id = none

     ------------------------------------------------ :: lookupFdecViaIDFromProduct_fdef
     lookupFdecViaIDFromProduct fdef id = none

defns
lookupFdecViaIDFromProducts_def :: '' ::=
     defn
     lookupFdecViaIDFromProducts list_product id = opt_fdec :: :: lookupFdecViaIDFromProducts :: ''
     {{ com look up [[id]]'s fdec from [[list_product]] }} by

     ---------------------------------------- :: lookupFdecViaIDFromProducts_nil
     lookupFdecViaIDFromProducts [] id = none

     lookupFdecViaIDFromProduct product id = fdec  
     ------------------------------------------------------------- :: lookupFdecViaIDFromProducts_true
     lookupFdecViaIDFromProducts (list_product, product) id = fdec
     
     lookupFdecViaIDFromProduct product id = none
     lookupFdecViaIDFromProducts list_product id = opt_fdec
     ---------------------------------------------------------------- :: lookupFdecViaIDFromProducts_false
     lookupFdecViaIDFromProducts (list_product, product) id = opt_fdec

defns
lookupFdecViaIDFromModule_def :: '' ::=
     defn
     lookupFdecViaIDFromModule module id = opt_fdec :: :: lookupFdecViaIDFromModule :: ''
     {{ com look up [[id]]'s fdec from [[module]] }} by

     lookupFdecViaIDFromProducts list_product id = opt_fdec
     -------------------------------------------------------- :: lookupFdecViaIDFromModule_intro
     lookupFdecViaIDFromModule (list_layout list_product) id = opt_fdec
     
defns
lookupFdecViaIDFromModules_def :: '' ::=
     defn
     lookupFdecViaIDFromModules list_module id = opt_fdec :: :: lookupFdecViaIDFromModules :: ''
     {{ com look up [[id]]'s fdec from [[list_module]] }} by

     ---------------------------------------- :: lookupFdecViaIDFromModules_nil
     lookupFdecViaIDFromModules [] id = none

     lookupFdecViaIDFromModule module id = fdec
     ------------------------------------------------------------- :: lookupFdecViaIDFromModules_true
     lookupFdecViaIDFromModules (list_module, module) id = fdec

     lookupFdecViaIDFromModule module id = none
     lookupFdecViaIDFromModules list_module id = opt_fdec
     ---------------------------------------------------------------- :: lookupFdecViaIDFromModules_false
     lookupFdecViaIDFromModules (list_module, module) id = opt_fdec

defns
lookupFdecViaIDFromSystem_def :: '' ::=
     defn
     lookupFdecViaIDFromSystem system id = opt_fdec :: :: lookupFdecViaIDFromSystem :: ''
     {{ com look up [[id]]'s dec from [[system]] }} by

     system = list_module
     lookupFdecViaIDFromModules list_module id = opt_fdec
     ---------------------------------------------------- :: lookupFdecViaIDFromSystem_intro
     lookupFdecViaIDFromSystem system id = opt_fdec

defns
lookupFdefViaIDFromProduct_def :: '' ::=
     defn
     lookupFdefViaIDFromProduct product id = opt_fdef :: :: lookupFdefViaIDFromProduct :: ''
     {{ com look up [[id]]'s fdef from [[product]] }} by

     % ------------------------------------------- :: lookupFdefViaIDFromProduct_g
     % lookupFdefViaIDFromProduct g id = none

     % ------------------------------------------------ :: lookupFdefViaIDFromProduct_namedt
     % lookupFdefViaIDFromProduct namedt id = none

     ------------------------------------------------ :: lookupFdefViaIDFromProduct_fdec
     lookupFdefViaIDFromProduct fdec id = none

     getFdefID fdef = id'
     id = id'
     ------------------------------------------------ :: lookupFdefViaIDFromProduct_fdef_true
     lookupFdefViaIDFromProduct fdec id = fdef

     getFdefID fdef = id'
     not id = id'
     ------------------------------------------------ :: lookupFdefViaIDFromProduct_fdef_false
     lookupFdefViaIDFromProduct fdec id = none

defns
lookupFdefViaIDFromProducts_def :: '' ::=
     defn
     lookupFdefViaIDFromProducts list_product id = opt_fdef :: :: lookupFdefViaIDFromProducts :: ''
     {{ com look up [[id]]'s fdef from [[list_product]] }} by

     ---------------------------------------- :: lookupFdefViaIDFromProducts_nil
     lookupFdefViaIDFromProducts [] id = none

     lookupFdefViaIDFromProduct product id = fdef  
     ------------------------------------------------------------- :: lookupFdefViaIDFromProducts_true
     lookupFdefViaIDFromProducts (list_product, product) id = fdef
     
     lookupFdefViaIDFromProduct product id = none
     lookupFdefViaIDFromProducts list_product id = opt_fdef
     ---------------------------------------------------------------- :: lookupFdefViaIDFromProducts_false
     lookupFdefViaIDFromProducts (list_product, product) id = opt_fdef

defns
lookupFdefViaIDFromModule_def :: '' ::=
     defn
     lookupFdefViaIDFromModule module id = opt_fdef :: :: lookupFdefViaIDFromModule :: ''
     {{ com look up [[id]]'s fdef from [[module]] }} by

     lookupFdefViaIDFromProducts list_product id = opt_fdef
     -------------------------------------------------------- :: lookupFdefViaIDFromModule_intro
     lookupFdefViaIDFromModule (list_layout list_product) id = opt_fdef
     
defns
lookupFdefViaIDFromModules_def :: '' ::=
     defn
     lookupFdefViaIDFromModules list_module id = opt_fdef :: :: lookupFdefViaIDFromModules :: ''
     {{ com look up [[id]]'s fdef from [[list_module]] }} by

     ---------------------------------------- :: lookupFdefViaIDFromModules_nil
     lookupFdefViaIDFromModules [] id = none

     lookupFdefViaIDFromModule module id = fdef
     ------------------------------------------------------------- :: lookupFdefViaIDFromModules_true
     lookupFdefViaIDFromModules (list_module, module) id = fdef

     lookupFdefViaIDFromModule module id = none
     lookupFdefViaIDFromModules list_module id = opt_fdef
     ---------------------------------------------------------------- :: lookupFdefViaIDFromModules_false
     lookupFdefViaIDFromModules (list_module, module) id = opt_fdef

defns
lookupFdefViaIDFromSystem_def :: '' ::=
     defn
     lookupFdefViaIDFromSystem system id = opt_fdef :: :: lookupFdefViaIDFromSystem :: ''
     {{ com look up [[id]]'s fdef from [[system]] }} by

     system = list_module
     lookupFdefViaIDFromModules list_module id = opt_fdef
     ---------------------------------------------------- :: lookupFdefViaIDFromSystem_intro
     lookupFdefViaIDFromSystem system id = opt_fdef

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      ID binding lookup                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupBindingViaIDFromInsn_def :: '' ::=
     defn
     lookupBindingViaIDFromInsn insn id = id_binding :: :: lookupBindingViaIDFromInsn :: ''
     {{ com look up [[id]]'s binding from [[insn]] }} by

     getInsnID insn = none
     ------------------------------------------------ :: lookupBindingViaIDFromInsn_none
     lookupBindingViaIDFromInsn insn id = none

     getInsnID insn = id'
     id = id'
     -------------------------------------- :: lookupBindingViaIDFromInsn_true
     lookupBindingViaIDFromInsn insn id = insn

     getInsnID insn = id'
     not id = id'
     --------------------------------------- :: lookupBindingViaIDFromInsn_false
     lookupBindingViaIDFromInsn insn id = none

defns
lookupBindingViaIDFromInsns_def :: '' ::=
     defn
     lookupBindingViaIDFromInsns list_insn id = id_binding :: :: lookupBindingViaIDFromInsns :: ''
     {{ com look up [[id]]'s binding from [[list_insn]] }} by

     ------------------------------------- :: lookupBindingViaIDFromInsns_none
     lookupBindingViaIDFromInsns [] id = none

     lookupBindingViaIDFromInsn insn id = insn
     --------------------------------------------------- :: lookupBindingViaIDFromInsns_true
     lookupBindingViaIDFromInsns (list_insn, insn) id = insn

     lookupBindingViaIDFromInsn insn id = none
     lookupBindingViaIDFromInsns list_insn id = id_binding
     --------------------------------------------------- :: lookupBindingViaIDFromInsns_false
     lookupBindingViaIDFromInsns (list_insn, insn) id = id_binding

defns
lookupBindingViaIDFromBlock_def :: '' ::=
     defn
     lookupBindingViaIDFromBlock block id = id_binding :: :: lookupBindingViaIDFromBlock :: ''
     {{ com look up [[id]]'s binding from [[block]] }} by

     getInsnsFromBlock block = list_insn
     lookupBindingViaIDFromInsns list_insn id = id_binding
     ----------------------------------------------- :: lookupBindingViaIDFromBlock_intro
     lookupBindingViaIDFromBlock block id = id_binding

defns
lookupBindingViaIDFromBlocks_def :: '' ::=
     defn
     lookupBindingViaIDFromBlocks list_block id = id_binding :: :: lookupBindingViaIDFromBlocks :: ''
     {{ com look up [[id]]'s binding from [[list_block]] }} by

     ---------------------------------------------- :: lookupBindingViaIDFromBlocks_nil
     lookupBindingViaIDFromBlocks [] id = none

     lookupBindingViaIDFromBlock block id = insn
     ------------------------------------------------------ :: lookupBindingViaIDFromBlocks_true
     lookupBindingViaIDFromBlocks (list_block, block) id = insn

     lookupBindingViaIDFromBlock block id = none
     lookupBindingViaIDFromBlocks list_block id = id_binding
     ---------------------------------------------------------- :: lookupBindingViaIDFromBlocks_false
     lookupBindingViaIDFromBlocks (list_block, block) id = id_binding

defns
lookupBindingViaIDFromArg_def :: '' ::=
     defn
     lookupBindingViaIDFromArg arg id = id_binding :: :: lookupBindingViaIDFromArg :: ''
     {{ com look up [[id]]'s binding from [[arg]] }} by

     id = id'
     -------------------------------------- :: lookupBindingViaIDFromArg_true
     lookupBindingViaIDFromArg (typ id) id' = typ id

     not id = id'
     --------------------------------------- :: lookupBindingViaIDFromArg_false
     lookupBindingViaIDFromArg (typ id) id' = none

defns
lookupBindingViaIDFromArgs_def :: '' ::=
     defn
     lookupBindingViaIDFromArgs list_arg id = id_binding :: :: lookupBindingViaIDFromArgs :: ''
     {{ com look up [[id]]'s binding from [[list_arg]] }} by

     ------------------------------------- :: lookupBindingViaIDFromArgs_none
     lookupBindingViaIDFromArgs [] id = none

     lookupBindingViaIDFromArg arg id = arg'
     --------------------------------------------------- :: lookupBindingViaIDFromArgs_true
     lookupBindingViaIDFromArgs (list_arg, arg) id = arg'

     lookupBindingViaIDFromArg arg id = none
     lookupBindingViaIDFromArgs list_arg id = id_binding
     --------------------------------------------------- :: lookupBindingViaIDFromArgs_false
     lookupBindingViaIDFromArgs (list_arg, arg) id = id_binding

defns
lookupBindingViaIDFromFdec_def :: '' ::=
     defn
     lookupBindingViaIDFromFdec fdec id = id_binding :: :: lookupBindingViaIDFromFdec :: ''
     {{ com look up [[id]]'s binding from [[fdec]] }} by

     id0 = id
     -------------------------------------------------------------------- :: lookupBindingViaIDFromFdec_fdec
     lookupBindingViaIDFromFdec (declare (typ id0 (list_arg))) id = (declare (typ id0 (list_arg)))

     not id0 = id
     lookupBindingViaIDFromArgs list_arg id = id_binding
     -------------------------------------------------------------------- :: lookupBindingViaIDFromFdec_args
     lookupBindingViaIDFromFdec (declare (typ id0 (list_arg))) id = id_binding

defns
lookupBindingViaIDFromFdef_def :: '' ::=
     defn
     lookupBindingViaIDFromFdef fdef id = id_binding :: :: lookupBindingViaIDFromFdef :: ''
     {{ com look up [[id]]'s binding from [[fdef]] }} by

     lookupBindingViaIDFromBlocks list_block id = id_binding
     -------------------------------------------------------------------- :: lookupBindingViaIDFromFdef_intro
     lookupBindingViaIDFromFdef (define fheader {list_block}) id = id_binding

defns
lookupBindingViaIDFromProduct_def :: '' ::=
     defn
     lookupBindingViaIDFromProduct product id = id_binding :: :: lookupBindingViaIDFromProduct :: ''
     {{ com look up [[id]]'s binding from [[product]] }} by

     id = id'
     ---------------------------------------------------------------------------------- :: lookupBindingViaIDFromProduct_g_true
     lookupBindingViaIDFromProduct (id = global typ value) id' = (id = global typ value) 

     not id = id'
     ----------------------------------------------------------------- :: lookupBindingViaIDFromProduct_g_false
     lookupBindingViaIDFromProduct (id = global typ value) id' = none

     lookupBindingViaIDFromFdec fdec id = id_binding
     --------------------------------------------------------- :: lookupBindingViaIDFromProduct_fdec
     lookupBindingViaIDFromProduct fdec id = id_binding

     % -------------------------------------- :: lookupBindingViaIDFromProduct_namedt
     % lookupBindingViaIDFromProduct namedt id = none

     lookupBindingViaIDFromFdef fdef id = id_binding
     ------------------------------------------------------------------- :: lookupBindingViaIDFromProduct_fdef
     lookupBindingViaIDFromProduct fdef id = id_binding

defns
lookupBindingViaIDFromProducts_def :: '' ::=
     defn
     lookupBindingViaIDFromProducts list_product id = id_binding :: :: lookupBindingViaIDFromProducts :: ''
     {{ com look up [[id]]'s binding from [[list_product]] }} by

     ---------------------------------------- :: lookupBindingViaIDFromProducts_nil
     lookupBindingViaIDFromProducts [] id = none

     lookupBindingViaIDFromProduct product id = insn 
     ------------------------------------------------------------- :: lookupBindingViaIDFromProducts_true_insn
     lookupBindingViaIDFromProducts (list_product, product) id = insn
     
     % lookupBindingViaIDFromProduct product id = g
     % ------------------------------------------------------------- :: lookupBindingViaIDFromProducts_true_g
     % lookupBindingViaIDFromProducts (list_product, product) id = g

     lookupBindingViaIDFromProduct product id = fdec
     ------------------------------------------------------------- :: lookupBindingViaIDFromProducts_true_fdec
     lookupBindingViaIDFromProducts (list_product, product) id = fdec

     lookupBindingViaIDFromProduct product id = none
     lookupBindingViaIDFromProducts list_product id = id_binding
     ---------------------------------------------------------------- :: lookupBindingViaIDFromProducts_false
     lookupBindingViaIDFromProducts (list_product, product) id = id_binding

defns
lookupBindingViaIDFromModule_def :: '' ::=
     defn
     lookupBindingViaIDFromModule module id = id_binding :: :: lookupBindingViaIDFromModule :: ''
     {{ com look up [[id]]'s binding from [[module]] }} by

     lookupBindingViaIDFromProducts list_product id = id_binding
     --------------------------------------------------------- :: lookupBindingViaIDFromModule_intro
     lookupBindingViaIDFromModule (list_layout list_product) id = id_binding
     
defns
lookupBindingViaIDFromModules_def :: '' ::=
     defn
     lookupBindingViaIDFromModules list_module id = id_binding :: :: lookupBindingViaIDFromModules :: ''
     {{ com look up [[id]]'s binding from [[list_module]] }} by

     ---------------------------------------- :: lookupBindingViaIDFromModules_nil
     lookupBindingViaIDFromModules [] id = none

     lookupBindingViaIDFromModule module id = insn
     ------------------------------------------------------------- :: lookupBindingViaIDFromModules_true_insn
     lookupBindingViaIDFromModules (list_module, module) id = insn

     % lookupBindingViaIDFromModule module id = g
     % ------------------------------------------------------------- :: lookupBindingViaIDFromModules_true_g
     % lookupBindingViaIDFromModules (list_module, module) id = g

     lookupBindingViaIDFromModule module id = fdec
     ------------------------------------------------------------- :: lookupBindingViaIDFromModules_true_fdec
     lookupBindingViaIDFromModules (list_module, module) id = fdec

     lookupBindingViaIDFromModule module id = none
     lookupBindingViaIDFromModules list_module id = id_binding
     ---------------------------------------------------------------- :: lookupBindingViaIDFromModules_false
     lookupBindingViaIDFromModules (list_module, module) id = id_binding

defns
lookupBindingViaIDFromSystem_def :: '' ::=
     defn
     lookupBindingViaIDFromSystem system id = id_binding :: :: lookupBindingViaIDFromSystem :: ''
     {{ com look up [[id]]'s binding from [[system]] }} by

     system = list_module
     lookupBindingViaIDFromModules list_module id = id_binding
     ---------------------------------------------------- :: lookupBindingViaIDFromSystem_intro
     lookupBindingViaIDFromSystem system id = id_binding

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Block lookup from ID                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
isIDInBlock_def :: '' ::=
     defn
     isIDInBlock id block :: :: isIDInBlock :: ''
     {{ com if the insn [[id]] is in [[block]] }} by

     lookupBindingViaIDFromBlock block id = insn     
     --------------------------------------- :: isIDInBloc_intro
     isIDInBlock id block

defns
lookupBlockViaIDFromBlocks_def :: '' ::=
     defn
     lookupBlockViaIDFromBlocks list_block id = opt_block :: :: lookupBlockViaIDFromBlocks :: ''
     {{ com if the insn [[id]] is in a block in [[list_block]] }} by 
  
     --------------------------------------- :: lookupBlockViaIDFromBlocks_nil
     lookupBlockViaIDFromBlocks [] id = none		 

     isIDInBlock id block
     ---------------------------------------------------------- :: lookupBlockViaIDFromBlocks_cons_true
     lookupBlockViaIDFromBlocks (list_block, block) id = block

     not (isIDInBlock id block)
     lookupBlockViaIDFromBlocks list_block id = opt_block
     -------------------------------------------------------------- :: lookupBlockViaIDFromBlocks_cons_false
     lookupBlockViaIDFromBlocks (list_block, block) id = opt_block

defns
lookupBlockViaIDFromFdef_def :: '' ::=
     defn
     lookupBlockViaIDFromFdef fdef id = opt_block :: :: lookupBlockViaIDFromFdef :: ''
     {{ com if the insn [[id]] is in a block in [[fdef]] }} by

     lookupBlockViaIDFromBlocks list_block id = opt_block
     ------------------------------------------------------------------ :: lookupBlockViaIDFromFdef_intro
     lookupBlockViaIDFromFdef (define fheader {list_block}) id = opt_block

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get parent                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getParentOfInsn_def :: '' ::=
     defn
     getParentOfInsn insn = block :: :: getParentOfInsn :: ''
     {{ com [[block]] is the parent of [[insn]] }} by

     insnInBlock insn block
     ------------------------------------- :: getParentOfInsn_intro
     getParentOfInsn insn = block      

defns
getParentOfBlock_def :: '' ::=
     defn
     getParentOfBlock block = fdef :: :: getParentOfBlock :: ''
     {{ com [[fdef]] is the parent of [[block]] }} by

     blockInFdef block fdef
     ------------------------------------- :: getParentOfBlock_intro
     getParentOfBlock block = fdef

defns
getParentOfFdef_def :: '' ::=
     defn
     getParentOfFdef fdef = module :: :: getParentOfFdef :: ''
     {{ com [[module]] is the parent of [[fdef]] }} by

     fdef in list_product
     ------------------------------------- :: getParentOfFdef_intro
     getParentOfFdef fdef = (list_layout list_product)

