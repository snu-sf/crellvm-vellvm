
% Supporting Defs of Static Single Assignment(SSA)

grammar

formula :: 'formula_' ::=
  | judgement			::   :: judgement
  | formula1 ... formulan     	::   :: dots
  | True     	 		:: M :: true
    				{{ tex True }}
				{{ coq [[True]] }}
  | False     	 		:: M :: false
    				{{ tex False }}
				{{ coq [[False]] }}
  | not formula                 :: M :: not
      				{{ tex \neg [[formula]] }}
				{{ coq (not ([[formula]])) }}
  | notT formula                :: M :: notT
      				{{ tex \neg [[formula]] }}
				{{ coq (notT ([[formula]])) }}
  | ( formula )                 :: M :: brackets
      	      			{{ tex ([[formula]]\!) }} 
      				{{ coq ([[ formula ]]) }}
  | exists u . formula          ::   :: exists 
      	       			{{ tex \exists [[u]]. [[formula]] }}
      				{{ coq ( exists [[ u ]] , [[ formula ]] ) }}
  | formula /\ formula'         :: M :: and
               			{{ tex [[formula]] \wedge [[formula']] }}
	  			{{ coq [[formula]] /\ [[ formula' ]] }}
  | foreach C . formula         :: M :: forall 
              			{{ tex \forall [[C]]. [[ formula ]] }}
	  			{{ coq ( forall [[C]], [[ formula ]] ) }}
  | formula implies formula'    :: M :: implies
            	    		{{ tex [[formula]] \mathit{implies} [[formula']] }}
	  			{{ coq [[formula]] -> [[ formula' ]] }}
  | formula iff formula'        :: M :: iff
            	    		{{ tex [[formula]] \mathit{iff} [[formula']] }}
	  			{{ coq ([[formula]] <-> [[ formula' ]]) }}
  | formula \/ formula'         :: M :: or
               			{{ tex [[formula]] \vee [[formula']] }}
	  			{{ coq [[formula]] \/ [[ formula' ]] }} 
  |  [multiline] formula        :: M :: multiline
                                {{ com allow \LaTeX{} output in multiple lines }}
                                {{ coq [[formula]] }}
                                {{ tex \begin{array}{l}[[formula]]\end{array} }}
  |  [newline] formula          :: M :: formula_n
                                {{ com add a newline to the \LaTeX{} output }}
                                {{ coq [[formula]] }} {{ tex \\[[formula]] }}
  |  [tab] formula              :: M :: formula_t
                                {{ com add a tab to the \LaTeX{} output }}
                                {{ coq [[formula]] }} {{ tex \qquad[[formula]] }}
  | if formula0 then formula1 else formula2 endif
       	       	    	    	:: M :: ifthenelse
				{{ tex if [[formula0]] then [[formula1]] else [[formula2]] }}
				{{ coq ([[formula0]] -> [[formula1]]) /\ ((~[[formula0]]) -> [[formula2]]) }}
  | formula ; formula'		:: M :: seq
    	      			{{ tex [[formula]] ; [[formula']] }}
				{{ coq [[formula]] -> [[formula']] }}
  | block1 = block2 		::   :: eqBlock
				{{ tex [[block1]] = [[block2]] }}
				{{ coq [[block1]] = [[block2]] }}
  | sz = 1			::   :: isOne
       	 			{{ coq [[sz]] = 1 }} 
  | sz = 32			::   :: isThirtyTwo
       	 			{{ coq [[sz]] = 32 }}
  | sz > 0			::   :: gtZero
       	 			{{ coq [[sz]] > 0 }}
  | sz1 = sz2 			::   :: eqSize
				{{ tex [[sz1]] = [[sz2]] }}
				{{ coq [[sz1]] = [[sz2]] }}
  | sz1 < sz2 			::   :: ltSize
				{{ tex [[sz1]] < [[sz2]] }}
				{{ coq [[sz1]] < [[sz2]] }}
  | INT1 = INT2 		::   :: eqINT
				{{ tex [[INT1]] = [[INT2]] }}
				{{ coq [[INT1]] = [[INT2]] }}
  | l1 = l2 			::   :: eqLabel
				{{ tex [[l1]] = [[l2]] }}
				{{ coq [[l1]] = [[l2]] }}
  | id1 = id2			::   :: eqID
				{{ tex [[id1]] = [[id2]] }}
				{{ coq [[id1]] = [[id2]] }}
  | ls1 == ls2                  ::   :: eqLabels
				{{ tex [[ls1]] = [[ls2]] }}       
                                {{ coq lset_eq [[ls1]] [[ls2]] }}
  | l notin ls			::   :: l_notin_ls
      	    			{{ tex [[l]] \not\in [[ls]] }}
				{{ coq ( ~ set_In [[l]] [[ls]]) }}
  | l in ls			::   :: l_in_ls
      	    			{{ tex [[l]] \in [[ls]] }}
				{{ coq ( set_In [[l]] [[ls]]) }}
  | id in ids			::   :: id_in_ids
      	    			{{ tex [[id]] \in [[ids]] }}
				{{ coq ( set_In [[id]] [[ids]]) }}
  | id in intrinsic_funs	::   :: id_in_intrinsic_funs
      	    			{{ tex [[id]] \in [[intrinsic_funs]] }}
				{{ coq ( set_In [[id]] [[intrinsic_funs]]) }}
  | id notin intrinsic_funs	::   :: id_notin_intrinsic_funs
      	    			{{ tex [[id]] \notin [[intrinsic_funs]] }}
				{{ coq ( ~ set_In [[id]] [[intrinsic_funs]]) }}
  | module in system		::   :: module_in_system
    	       			{{ tex [[module]] \in [[system]] }}
				{{ coq In [[module]] [[system]] }}
  | product in list_product	::   :: product_in_products
    	       			{{ tex [[product]] \in [[list_product]] }}
				{{ coq In [[product]] [[list_product]] }}
  | block in list_block		::   :: block_in_blocks
    	       			{{ tex [[block]] \in [[list_block]] }}
				{{ coq In [[block]] [[list_block]] }}
  | insn in list_insn		::   :: insn_in_insns
    	       			{{ tex [[insn]] \in [[list_insn]] }}
				{{ coq In [[insn]] [[list_insn]] }}
  | arg in list_arg		::   :: arg_in_args
    	       			{{ tex [[arg]] \in [[list_arg]] }}
				{{ coq In [[arg]] [[list_arg]] }}
  | noret = yes  		:: M :: noret_alias
    	     			{{ com noret alias }} 
				{{ coq [[noret]] = true }}
  | typ = typ'  		:: M :: typ_alias
    	     			{{ com typ alias }} 
				{{ coq [[typ]] = [[typ']] }}
  | insn = insn'  		:: M :: insn_alias
    	     			{{ com insn alias }} 
				{{ coq [[insn]] = [[insn']] }}
  | module = module'          :: M :: module_alias
    	     			{{ com module alias }} 
				{{ coq [[module]] = [[module']] }}
  | system = system'          :: M :: system_alias
    	     			{{ com system alias }} 
				{{ coq [[system]] = [[system']] }}
  | opt_id <-> opt_id' 		:: M :: opt_id_alias
    	     			{{ com opt_id alias }} 
				{{ coq [[opt_id]] = [[opt_id']] }}
  | length </ constj // j /> = sz :: M :: length_of_consts_is_sz
                                {{ coq length [[ </ constj // j /> ]] = [[sz]] }}
  | ids <-> </ idj // j /> 	:: M :: ids_alias
    	      	   	        {{ com ids alias }}
				{{ coq [[ids]] = [[ </ idj // j /> ]] }}
  | ls <-> </ lj // j /> 	:: M :: ls_alias
    	      	   	        {{ com ls alias }}
				{{ coq [[ls]] = [[ </ lj // j /> ]] }}
  | list_const <-> </ constj // j /> :: M :: consts_alias
    	      	   	        {{ com consts alias }}
				{{ coq [[list_const]] = [[ </ constj // j /> ]] }}
  | list_arg <-> </ argj // j /> :: M :: args_alias
    	      	   	        {{ com args alias }}
				{{ coq [[list_arg]] = [[ </ argj // j /> ]] }}
  | list_typ <-> </ typj // j /> :: M :: typs_alias
    	      	   	        {{ com typs alias }}
				{{ coq [[list_typ]] = [[ </ typj // j /> ]] }}
  | list_insn <-> </ insnj // j /> :: M :: insns_alias
    	      	   	        {{ com insns alias }}
				{{ coq [[list_insn]] = [[ </ insnj // j /> ]] }}
  | list_phi <-> </ phij // j /> :: M :: phis_alias
    	      	   	        {{ com phis alias }}
				{{ coq [[list_phi]] = [[ </ phij // j /> ]] }}
  | list_block <-> </ blockj // j /> :: M :: blocks_alias
    	      	   	        {{ com blocks alias }}
				{{ coq [[list_block]] = [[ </ blockj // j /> ]] }}
  | list_product = </ productj // j /> :: M :: products_alias
    	      	   	        {{ com products alias }}
				{{ coq [[list_product]] = [[ </ productj // j /> ]] }}
  | list_module <-> </ modulej // j /> :: M :: modules_alias
    	      	   	        {{ com modules alias }}
				{{ coq [[list_module]] = [[ </ modulej // j /> ]] }}
  | id_labels <-> </ [ idj , lj ] // j /> :: M :: id_labels_alias
    	      	     	        {{ com id_labels alias }}
				{{ coq [[id_labels]] = [[ </ [ idj , lj ] // j /> ]] }}
  | list_param <-> </ paramj // j /> :: M :: list_param_alias
                                {{ com list_param_alias }}
                                {{ coq [[list_param]] = [[ </ paramj // j /> ]] }}
  | getNthTyp </ typj // j /> INT = opt_typ ::   :: getNthTyp
    	      	       	   	{{ com getNthTyp }}
				{{ coq nth_error [[ </ typj // j /> ]] [[INT]] = [[opt_typ]] }}  
  | insn =id= insn'        :: M :: getInsnID_eq
    	      	      	      	{{ tex [[insn]] =id= [[insn']] }}
				{{ coq getInsnID [[insn]] = getInsnID [[insn']] }}
  | insnsRemovesLast list_insn = list_insn'
    		     	        ::   :: insnsRemovesLast
    		     		{{ coq 
                                    removelast [[list_insn]] = [[list_insn']]
                                }}
  | genDominatorTree fdef module = dt 
    		      	    	::   :: genDominatorTree
				{{ coq genDominatorTree [[fdef]] [[module]] = [[dt]] }}				
  | blockDominates dt block1 block2 
    		       	        ::   :: blockDominates
				{{ coq blockDominates [[dt]] [[block1]] [[block2]] }} 			
  | insnDominates insn1 insn2 block
    		       	        ::   :: insnDominates
				{{ coq insnDominates [[insn1]] [[insn2]] [[block]] }} 			
  | genInsnUseDef module = usedef_insn		::   :: genInsnUseDef
    		  		{{ coq genInsnUseDef [[module]] = [[usedef_insn]] }}
  | genBlockUseDef module = usedef_block	::   :: genBlockUseDef
    		  		{{ coq genBlockUseDef [[module]] = [[usedef_block]] }}
  | getIdUseDef usedef_id id = ids		::   :: getInsnUseDef
    		  		{{ coq getIdUseDef [[usedef_id]] [[id]] = [[ids]] }}
  | getBlockUseDef usedef_block	block = list_block      ::   :: getBlockUseDef
    		  		{{ coq getBlockUseDef [[usedef_block]] [[block]] = [[list_block]] }}
  | succOfBlock block module = list_block	::   :: succOfBlock
    		      		{{ coq succOfBlock [[block]] [[module]] = [[list_block]] }}
  | isReachableFromEntry fdef_info block  ::   :: isReachableFromEntry
                                {{ coq isReachableFromEntry [[fdef_info]] [[block]] }}
  | getInsnID insn = id		       ::   :: getInsnID
    	      	     		{{ coq getInsnID [[insn]] = [[id]] }}
  | getValueID value = opt_id	::   :: getValueID
    	      	     		{{ coq getValueID [[value]] = [[opt_id]] }}
  | lookupBlockViaLabelFromSystem system l = opt_block ::  :: lookupBlockViarLabelFromSystem
    		   	    	{{ coq lookupBlockViaLabelFromSystem [[system]] [[l]] = [[opt_block]] }}
  | getEntryOfFdef fdef = opt_block	        :: :: getEntryOfFdef
    	      	     		{{ coq getEntryOfFdef [[fdef]] = [[opt_block]] }}
  | predOfBlock block usedef_block = list_block :: :: prefOfBlock
                                {{ coq predOfBlock [[block]] [[usedef_block]] = [[list_block]] }}
  | PHINode.getNumIncomingValues phinode = INT :: :: PHINodeGetNumIncomingValues
                                {{ coq PHINode.getNumIncomingValues [[phinode]] = [[INT]] }}
  | getLabelsFromBlocks list_block = ls         :: :: getLabelsFromBlocks
                                {{ coq getLabelsFromBlocks [[list_block]] = [[ls]] }}
  | checkIdenticalIncomingValues phinode           :: :: checkIdenticalIncomingValues
                                {{ coq checkIdenticalIncomingValues [[phinode]] }}
  | lookupTypViaIDFromSystem system id = opt_typ :: :: lookupTypViaIDFromSystem
                                {{ coq lookupTypViaIDFromSystem [[system]] [[id]] = [[opt_typ]] }}
  | BinaryOperator.getFirstOperandType system insn = opt_typ  :: :: BinaryOperatorGetFirstOperandType
                                {{ coq BinaryOperator.getFirstOperandType [[system]] [[insn]] = [[opt_typ]] }}
  | BinaryOperator.getSecondOperandType system insn = opt_typ  :: :: BinaryOperatorGetSecondOperandType
                                {{ coq BinaryOperator.getSecondOperandType [[system]] [[insn]] = [[opt_typ]] }}
  | Typ.isIntOrIntVector typ :: :: TypIsIntOrIntVector
                                {{ coq Typ.isIntOrIntVector [[typ]] }}
  | CallSite.getCalledFunction insn system = opt_fdef :: :: CallSiteGetCalledFunction
                                {{ coq CallSite.getCalledFunction [[insn]] [[system]] = [[opt_fdef]] }}
  | CallSite.getFdefTyp fdef = typ      :: ::  CallSiteGetFdefTy
                                {{ coq CallSite.getFdefTyp [[fdef]] = [[typ]] }}
  | FunctionType.getNumParams typ = opt_INT :: :: FunctionTypeGetNumParams
                                {{ coq FunctionType.getNumParams [[typ]] = [[opt_INT]] }}
  | CallSite.arg_size fdef = INT :: :: CallSiteArgSize
                                {{ coq CallSite.arg_size [[fdef]] = [[INT]] }}
  | Function.getDefReturnType fdef = typ :: :: FunctionGetDefReturnType
                                {{ coq Function.getDefReturnType [[fdef]] = [[typ]] }}
  | getInsnTyp insn = opt_typ :: :: getInsnTyp
                                {{ coq getInsnTyp [[insn]] = [[opt_typ]] }}
  | getInsnOperands insn = ids :: :: getInsnOperands
                                {{ coq getInsnOperands [[insn]] = [[ids]] }}
  | getInsnLabels insn = ls :: :: getInsnLabels
                                {{ coq getInsnLabels [[insn]] = [[ls]] }}
  | getSubTypFromConstIdxs </ constj // j /> typ = opt_typ :: :: getSubTypFromConstIdxs
                                {{ coq getSubTypFromConstIdxs [[ </ constj // j /> ]] [[typ]] = [[opt_typ]] }}
  | getGEPTyp </ valuej // j /> typ = opt_typ :: :: getGEPTyp
                                {{ coq getGEPTyp [[ </ valuej // j /> ]] [[typ]] = [[opt_typ]] }}
  | Typ.isSized typ :: :: TypIsSized
                                {{ coq Typ.isSized [[typ]] = true }}
  | lookupBlockViaLabelFromFdef fdef l = opt_block :: :: lookupBlockViaLabelFromFdef
                                {{ coq lookupBlockViaLabelFromFdef [[fdef]] [[l]] = [[opt_block]] }}
  | Typ.getPrimitiveSizeInBits typ = sz :: :: TypgetPrimitiveSizeInBits
                                {{ coq Typ.getPrimitiveSizeInBits [[typ]] = [[sz]] }}
  | isPhiNode insn :: :: isPhiNode
                                {{ coq isPhiNode [[insn]] }}
  | insn in system , module_info , fdef_info , block :: :: insnInSystem
    	    	     		{{ coq insnInSystemModuleFdefBlockB [[insn]] [[system]] [[module_info]] [[fdef_info]] [[block]] = true }}
%  | insn in system , (module, usedef_id, usedef_block) , (fdef, dt) , block :: :: insnInSystem2
%    	    	     		{{ coq insnInSystemModuleFdefBlockB [[insn]] [[system]] ([[module]], ([[usedef_id]], [[usedef_block]])) ([[fdef]], [[dt]]) [[block]] = true }}
  | lookupBlockViaIDFromFdef fdef id = opt_block :: :: lookupBlockViaIDFromFdef
                                {{ coq lookupBlockViaIDFromFdef [[fdef]] [[id]] = [[opt_block]] }}
  | getLabelViaIDFromPhiNode phinode id = opt_l :: :: getLabelViaIDFromPhiNode
                                {{ coq getLabelViaIDFromPhiNode [[phinode]] [[id]] = [[opt_l]] }}
  | lookupBindingViaIDFromSystem system id = id_binding :: :: lookupBindingViaIDFromSystem
                                {{ coq lookupBindingViaIDFromSystem [[system]] [[id]] = [[id_binding]] }}
  | getBindingTyp id_binding = opt_typ :: :: getBindingTyp
                                {{ coq getBindingTyp [[id_binding]] = [[opt_typ]] }}
  | getPointerEltTyp typ1 = opt_typ2 :: :: getPointerEltTyp
                                {{ coq getPointerEltTyp [[typ1]] = [[opt_typ2]] }}
  | getFdecID fdec = id             :: :: getFdecID
    	      	     		{{ coq getFdecID [[fdec]] = [[id]] }}
  | argInFdef arg fdef           :: :: argInFdef
                                {{ coq argInFdefB [[arg]] [[fdef]] = true }}
  | getLabelViaIDPhiNode insn id = opt_l :: :: getLabelViaIDPhiNode
                                {{ coq getLabelViaIDPhiNode [[insn]] [[id]] = [[opt_l]] }}
  | getCallName insn = opt_id    :: :: getCallName
                                {{ coq getCallName [[insn]] = [[opt_id]] }}
  | blockInFdef block fdef       :: :: blockInFdef
                                {{ coq blockInFdefB [[block]] [[fdef]] = true }}
  | block in system , module_info , fdef_info :: :: blockInSystem
                                {{ coq blockInSystemModuleFdefB [[block]] [[system]] [[module_info]] [[fdef_info]] = true }}
  | product in system , module_info :: :: productInSystem
                                {{ coq productInSystemModuleB [[product]] [[system]] [[module_info]] = true }}
  | uniqSystem system               :: :: uniqSystem
                                {{ coq uniqSystem [[system]] }}
  | typ == typ'                     :: :: typEq 
                                {{ coq typEqB [[typ]] [[typ']] = true }}
  | isCallInsn insn                 :: :: isCallInsn
                                {{ coq isCallInsnB [[insn]] = true }}
  | getLabelsFromPhiNode phinode = ls :: :: getLabelsFromPhiNode
                                {{ coq getLabelsFromPhiNode [[phinode]] = [[ls]] }}
  | lookupFdefViaIDFromSystem system id = opt_fdef :: :: lookupFdefViaIDFromSystem
                                {{ coq lookupFdefViaIDFromSystem [[system]] [[id]] = [[opt_fdef]] }}
  | isPointerTyp typ    :: :: isPointerTyp
    		     	        {{ coq isPointerTyp [[typ]] }}
  | isAggregateTyp typ    :: :: isAggregateTyp
    		     	        {{ coq isAggregateTyp [[typ]] }}
  | isValidReturnTyp typ    :: :: isValidReturnTyp
    		     	        {{ coq isValidReturnTyp [[typ]] }}
  | isValidArgumentTyp typ    :: :: isValidArgumentTyp
    		     	        {{ coq isValidArgumentTyp [[typ]] }}
  | isValidElementTyp typ    :: :: isValidElementTyp
    		     	        {{ coq isValidElementTyp [[typ]] }}
  | isFirstClassTyp typ    :: :: isFirstClassTyp
    		     	        {{ coq isFirstClassTyp [[typ]] }}
  | isBindingFdec id_binding = fdec  :: :: isBindingFdec
    		     	        {{ coq isBindingFdec [[id_binding]] = Some [[fdec]] }}
  | isBindingArg id_binding = arg   :: :: isBindingArg
    		     	        {{ coq isBindingArg [[id_binding]] = Some [[arg]] }}
  | isBindingGvar id_binding = gvar   :: :: isBindingGvar
    		     	        {{ coq isBindingGvar [[id_binding]] = Some [[gvar]] }}
  | isBindingInsn id_binding = insn   :: :: isBindingInsn
    		     	        {{ coq isBindingInsn [[id_binding]] = Some [[insn]] }}

parsing
formula_true left formula_not
formula_false left formula_not
formula_and left formula_and
formula_or left formula_or
formula_not left formula_or
formula_not left formula_and
formula_or left formula_seq
formula_seq left formula_seq
formula_or left formula_ifthenelse
formula_ifthenelse left formula_seq
formula_and left formula_and
formula_multiline <= formula_and
formula_multiline <= formula_or

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get block from label                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getBlockAtLableFromBlocks_def :: '' ::=
      defn 
      getBlockAtLableFromBlocks list_block l = opt_block :: :: getBlockAtLableFromBlocks :: ''
      {{ com [[opt_block]] is of label [[l]] in [[list_block]] }} by

      ---------------------------------------------------- :: getBlockAtLableFromBlocks_nil
      getBlockAtLableFromBlocks [] l = none

      l1 = l2 
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_true
      getBlockAtLableFromBlocks (list_block, (l1 list_phinode1 list_cmd1 terminator1)) l2 = l1 list_phinode1 list_cmd1 terminator1

      not l1 = l2
      getBlockAtLableFromBlocks list_block l2 = opt_block
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_rec1
      getBlockAtLableFromBlocks (list_block, (l1 list_phinode1 list_cmd1 terminator1)) l2 = opt_block
			      
    
defns
getBlockAtLableFromFdef_def :: '' ::=
      defn
      getBlockAtLableFromFdef fdef l = opt_block :: :: getBlockAtLableFromFdef :: ''
      {{ com [[opt_block]] is of label [[l]] in [[fdef]] }} by

      getBlockAtLableFromBlocks list_block l = opt_block
      ---------------------------------------------------- :: getBlockAtLableFromFdef_intro
      getBlockAtLableFromFdef (define fheader { list_block }) l = opt_block

 

