
% Supporting Defs of Static Single Assignment(SSA)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                inversion                                     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getReturnType_def :: '' ::=
      defn
      getReturnType fdef = typ :: :: getReturnType :: '' 
      {{ com [[fdef]]'s return type is [[typ]] }} by

      ----------------------------------------------------------------- :: getReturnType_intro
      getReturnType (define (typ id (list_arg)) { list_block }) = typ


defns
getInsnsFromBlock_def :: '' ::=
      defn
      getInsnsFromBlock block = list_insn :: :: getInsnsFromBlock :: ''
      {{ com return [[list_insn]] in [[block]] }} by

      ------------------------------------------- :: getInsnsFromBlock_with_label
      getInsnsFromBlock (l list_insn) = list_insn

      ------------------------------------------- :: getInsnsFromBlock_without_label
      getInsnsFromBlock list_insn = list_insn

defns
getFheaderID_def :: '' ::=
     defn
     getFheaderID fheader = id :: :: getFheaderID :: ''
     {{ com return [[id]] from [[fheader]] }} by

     ---------------------------------------- :: getFheaderID_intro
     getFheaderID (typ id ( list_arg )) = id

defns
getFdecID_def :: '' ::=
     defn
     getFdecID fdec = id :: :: getFdecID :: ''
     {{ com return [[id]] from [[fdec]] }} by

     getFheaderID fheader = id
     ---------------------------------------- :: getFdecID_intro
     getFdecID (declare fheader) = id

defns
getFdefID_def :: '' ::=
     defn
     getFdefID fdef = id :: :: getFdefID :: ''
     {{ com return [[id]] from [[fdef]] }} by

     getFheaderID fheader = id
     ---------------------------------------------- :: getFdefID_intro
     getFdefID (define fheader {list_block}) = id

defns
getNamedtID_def :: '' ::=
     defn
     getNamedtID namedt = id :: :: getNamedtID :: ''
     {{ com return [[id]] from [[namedt]] }} by

     ----------------------------------- :: getNamedtID_intro
     getNamedtID (id = type typ) = id   			

defns
getGID_def :: '' ::=
     defn
     getGID g = id :: :: getgID :: ''
     {{ com return [[id]] from [[g]] }} by

     ------------------------------------ :: getGID_intro
     getGID (id = global typ const) = id 

defns
getFheaderType_def :: '' ::=
     defn
     getFheaderType fheader = typ :: :: getFheaderType :: ''
     {{ com get [[fheader]]'s [[typ]] }} by

     list_arg = </ typj // j />
     ------------------------------------------------------------------- :: getFheaderType_intro
     getFheaderType (typ id ( list_arg)) = typ ( </ typj // j /> )

defns
getFdecType_def :: '' ::=
     defn
     getFdecType fdec = typ :: :: getFdecType :: ''
     {{ com get [[fdec]]'s [[typ]] }} by

     getFheaderType fheader = typ
     ------------------------------------------------------------------- :: getFdecType_intro
     getFdecType (declare fheader) = typ

defns
getFdefType_def :: '' ::=
     defn
     getFdefType fdef = typ :: :: getFdefType :: ''
     {{ com get [[fdef]]'s [[typ]] }} by

     getFheaderType fheader = typ
     ------------------------------------------------------------------- :: getFdefType_intro
     getFdefType (define fheader {list_block}) = typ

defns
getLoadTyp_def :: '' ::=
     defn
     getLoadTyp typ = opt_typ :: :: getLoadTyp :: ''
     {{ com get the typ to load from [[typ]] }} by

     --------------------------- :: getLoadTyp_int
     getLoadTyp (int N) = none                    

     --------------------------- :: getLoadTyp_float
     getLoadTyp float = none

     --------------------------- :: getLoadTyp_double
     getLoadTyp double = none

     --------------------------- :: getLoadTyp_fp128
     getLoadTyp fp128 = none

     --------------------------- :: getLoadTyp_void
     getLoadTyp void = none

     --------------------------- :: getLoadTyp_label
     getLoadTyp label = none

     --------------------------- :: getLoadTyp_metadata
     getLoadTyp metadata = none
     
     ------------------------------ :: getLoadTyp_array
     getLoadTyp [ N * typ ] = none               	

     -------------------------------------------- :: getLoadTyp_function
     getLoadTyp (typ ( </ typj // j /> )) = none 				

     -------------------------------------- :: getLoadTyp_struct
     getLoadTyp { </ typj // j /> } = none       		

     ------------------------- :: getLoadTyp_pointer
     getLoadTyp (typ *) = typ                     	

     ----------------------------- :: getLoadTyp_verctor
     getLoadTyp < N * typ > = none               	

     ---------------------------- :: getLoadTyp_opaque
     getLoadTyp opaque = none  				

defns
getElementTyp_def :: '' ::=
     defn
     getElementTyp typ = opt_typ :: :: getElementTyp :: ''
     {{ com get the typ of element from [[typ]] }} by

     --------------------------- :: getElementTyp_int
     getElementTyp (int N) = none                    

     --------------------------- :: getElementTyp_float
     getElementTyp float = none

     --------------------------- :: getElementTyp_double
     getElementTyp double = none

     --------------------------- :: getElementTyp_fp128
     getElementTyp fp128 = none

     --------------------------- :: getElementTyp_void
     getElementTyp void = none

     --------------------------- :: getElementTyp_label
     getElementTyp label = none

     --------------------------- :: getElementTyp_metadata
     getElementTyp metadata = none
     
     ------------------------------ :: getElementTyp_array
     getElementTyp [ N * typ ] = typ               	

     -------------------------------------------- :: getElementTyp_function
     getElementTyp (typ ( </ typj // j /> )) = none 				

     -------------------------------------- :: getElementTyp_struct
     getElementTyp { </ typj // j /> } = none       		

     ------------------------- :: getElementTyp_pointer
     getElementTyp (typ *) = none                     	

     ----------------------------- :: getElementTyp_verctor
     getElementTyp < N * typ > = none               	

     ---------------------------- :: getElementTyp_opaque
     getElementTyp opaque = none  				

defns
getFieldTyp_def :: '' ::=
     defn
     getFieldTyp typ const = opt_typ :: :: getFieldTyp :: ''
     {{ com get the typ of element from [[typ]] }} by

     ------------------------------------ :: getFieldTyp_int
     getFieldTyp (int N) const = none                    

     ------------------------------------ :: getFieldTyp_float
     getFieldTyp float const = none

     ------------------------------------ :: getFieldTyp_double
     getFieldTyp double const = none

     ------------------------------------ :: getFieldTyp_fp128
     getFieldTyp fp128 const = none

     ------------------------------------ :: getFieldTyp_void
     getFieldTyp void const = none

     ------------------------------------ :: getFieldTyp_label
     getFieldTyp label const = none

     ------------------------------------ :: getFieldTyp_metadata
     getFieldTyp metadata const = none
     
     ------------------------------------ :: getFieldTyp_array
     getFieldTyp [ N * typ ] const = none               	

     --------------------------------------------------- :: getFieldTyp_function
     getFieldTyp (typ ( </ typj // j /> )) const = none 				

     getNthTyp </ typj // j /> N = typ
     ----------------------------------------- :: getFieldTyp_struct_N
     getFieldTyp { </ typj // j /> } N = typ       		

     --------------------------------------------- :: getFieldTyp_struct_undef
     getFieldTyp { </ typj // j /> } undef = none       		

     --------------------------------- :: getFieldTyp_pointer
     getFieldTyp (typ *) const = none                     	

     ------------------------------------- :: getFieldTyp_verctor
     getFieldTyp < N * typ > const = none               	

     ------------------------------- :: getFieldTyp_opaque
     getFieldTyp opaque const = none  				

defns
getInsnTyp_def :: '' ::=
     defn
     getInsnTyp insn = opt_typ :: :: getInsnTyp :: ''
     {{ com return typs of [[insn]] }} by

     ----------------------------------------------- :: getInsnTyp_return
     getInsnTyp (ret typ value) = none

     ----------------------------------------------- :: getInsnTyp_return_void
     getInsnTyp (ret void) = none 

     ------------------------------------------------------ :: getInsnTyp_br
     getInsnTyp (br typ value , l1 , l2) = none 

     ------------------------------------------------------ :: getInsnTyp_uncond
     getInsnTyp (br l) = none 
        
     -------------------------------------------------------------------------------- :: getInsnTyp_switch
     getInsnTyp (switch typ value , l </ [ constj , lj ] // j />) = none

     ------------------------------------------------------------------------------- :: getInsnTyp_invoke
     getInsnTyp (id = invoke typ id0 list_param to l1 unwind l2) = typ

     ------------------------------------------- :: getInsnTyp_unreachable
     getInsnTyp unreachable = none	     	   	     	 		

     ------------------------------------------------------------ :: getInsnTyp_add
     getInsnTyp (id = add typ value1 value2) = typ

     ------------------------------------------------------------ :: getInsnTyp_fadd
     getInsnTyp (id = fadd typ value1 value2) = typ

     ------------------------------------------------------------ :: getInsnTyp_udiv
     getInsnTyp (id = udiv typ value1 value2) = typ			

     ------------------------------------------------------------ :: getInsnTyp_fdiv
     getInsnTyp (id = fdiv typ value1 value2) = typ


     ----------------------------------------------------------- :: getInsnTyp_or
     getInsnTyp (id = or typ value1 value2) = typ				

     ----------------------------------------------------------- :: getInsnTyp_and
     getInsnTyp (id = and typ value1 value2) = typ				

     getElementTyp typ0 = typ
     --------------------------------------------------------------------------- :: getInsnTyp_extractelement
     getInsnTyp (id = extractelement typ0 id0 , const1) = typ

     ---------------------------------------------------------------------------------------- :: getInsnTyp_insertelement
     getInsnTyp (id = insertelement typ0 id0 , typ1 value1 , const2) = typ0

     getFieldTyp typ0 const1 = typ
     --------------------------------------------------------------------- :: getInsnTyp_extractvalue
     getInsnTyp (id = extractvalue typ0 id0 , const1) = typ              

     ---------------------------------------------------------------------------------------------- :: getInsnTyp_insertvalue
     getInsnTyp (id = insertvalue typ0 id0 , typ value1 , const2) = typ0

     -------------------------------------- :: getInsnTyp_alloca
     getInsnTyp (id = alloca typ N) = typ *  	     	       	

     getLoadTyp typ1 = opt_typ
     ---------------------------------------- :: getInsnTyp_load
     getInsnTyp (id = load typ1 id1) = opt_typ			

     ------------------------------------------------ :: getInsnTyp_store
     getInsnTyp (store typ1 value1 , typ2 id2) = none			

     -------------------------------------------------- :: getInsnTyp_trunc
     getInsnTyp (id = trunc typ1 value1 to typ2) = typ2 			

     ---------------------------------------------------- :: getInsnTyp_fptrunc
     getInsnTyp (id = fptrunc typ1 value1 to typ2) = typ2			

     ----------------------------------------------------- :: getInsnTyp_fptoui
     getInsnTyp (id = fptoui typ1 value1 to typ2) = typ2

     ---------------------------------------------------- :: getInsnTyp_fptosi
     getInsnTyp (id = fptosi typ1 value1 to typ2) = typ2


     --------------------------------------------------- :: getInsnTyp_uitofp
     getInsnTyp (id = uitofp typ1 value1 to typ2) = typ2			

     --------------------------------------------------- :: getInsnTyp_sitofp
     getInsnTyp (id = sitofp typ1 value1 to typ2) = typ2			

     ----------------------------------------------------- :: getInsnTyp_ptrtoint
     getInsnTyp (id = ptrtoint typ1 value1 to typ2) = typ2 			


     ----------------------------------------------------- :: getInsnTyp_inttoptr
     getInsnTyp (id = inttoptr typ1 value1 to typ2) = typ2 			

     ---------------------------------------------------- :: getInsnTyp_bitcase
     getInsnTyp (id = bitcast typ1 value1 to typ2) = typ2 			


     ------------------------------------------------------ :: getInsnTyp_icmp
     getInsnTyp (id = icmp cond typ value1 , value2) = int 1			

     ------------------------------------------------------ :: getInsnTyp_fcmp
     getInsnTyp (id = fcmp cond typ value1 , value2) = int 1		

     --------------------------------------------------------- :: getInsnTyp_phi
     getInsnTyp (id = phi typ </ [ idj , lj ] // j />) = typ 		

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 classes                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% isValidReturnType - Return true if the specified type is valid as a return type. 
% lib/VMCore/Type
defns
isNotValidReturnType_def :: '' ::=
      defn
      isNotValidReturnType typ :: :: isNotValidReturnType :: '' {{ com [[typ]] isnt a valid return type }} by  
      
      --------------------------------- :: isNotValidReturnType_label
      isNotValidReturnType label


      --------------------------------- :: isNotValidReturnType_metadata
      isNotValidReturnType metadata      

defns
isValidReturnType_def :: '' ::=
      defn
      isValidReturnType typ :: :: isValidReturnType :: '' {{ com [[typ]] is a valid return type }} by  

      not isNotValidReturnType typ
      --------------------------------- :: isValidReturnType_intro
      isValidReturnType typ

% isFirstClassType - Return true if the type is "first class", meaning it is a valid 
% type for a Value. lib/VMCore/Type 
defns
isNotFirstClassType_def :: '' ::=
      defn
      isNotFirstClassType typ :: :: isNotFirstClassType :: '' {{ com [[typ]] isnt a first class type }} by

      ---------------------------------- :: isNotFirstClassType_void
      isNotFirstClassType void

      ---------------------------------- :: isNotFirstClassType_opaque
      isNotFirstClassType opaque

      --------------------------------------------- :: isNotFirstClassType_function
      isNotFirstClassType typ ( </ typj // j /> )

defns
isFirstClassType_def :: '' ::=
      defn
      isFirstClassType typ :: :: isFirstClassType :: '' {{ com [[typ]] is a first class type }} by

      not isNotFirstClassType typ
      ----------------------------------- :: isFirstClassType_intro
      isFirstClassType typ

% isValidArgumentType - Return true if the specified type is valid as an
% argument type. lib/VMCore/Type.cpp
defns
isValidArgumentType_def :: '' ::=
      defn
      isValidArgumentType typ :: :: isValidArgumentType :: '' {{ com [[typ]] is a valid argument type }} by
 
      ----------------------------------- :: isValidArgumentType_opaque
      isValidArgumentType opaque

      isFirstClassType typ
      ----------------------------------- :: isValidArgumentType_firstclass
      isValidArgumentType typ

defns 
isNotValidElementType_def :: '' ::=
      defn
      isNotValidElementType typ :: :: isNotValidElementType :: '' {{ com [[typ]] isnt a valid elment type }} by

      ----------------------------------- :: isNotValidElementType_void
      isNotValidElementType void

      ----------------------------------- :: isNotValidElementType_label
      isNotValidElementType label
 
      ----------------------------------- :: isNotValidElementType_metadata
      isNotValidElementType metadata

      --------------------------------------------- :: isNotValidElementType_function
      isNotValidElementType typ ( </ typj // j /> )

defns 
isValidElementType_def :: '' ::=
      defn
      isValidElementType typ :: :: isValidElementType :: '' {{ com [[typ]] is a valid elment type }} by

      not isNotValidElementType typ
      ----------------------------------- :: isValidElementType_intro
      isValidElementType typ

defns
isPhiNode_def :: '' ::=
      defn
      isPhiNode insn :: :: isPhiNode :: ''
      {{ com check is [[insn]] is a phi node }} by

      --------------------------------------- :: isPhiNode_intro
      isPhiNode (id = phi typ </ [ idj , lj ] // j />) 
      
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Eq              						 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
typeEq_def :: '' ::=
       defn
       typ == typ' :: :: typeEq :: ''
       {{ com check if [[typ]] equals to [[typ']] }} by

       N == N'
       ------------------------- :: typeEq_int
       int N == int N'

       ------------------------- :: typeEq_float
       float == float

       ------------------------- :: typeEq_double
       double == double

       ------------------------- :: typeEq_fp128
       fp128 == fp128

       ------------------------- :: typeEq_void       
       void == void

       ------------------------- :: typeEq_label
       label == label

       ------------------------- :: typeEq_metadata
       metadata == metadata

       ------------------------- :: typeEq_opaque
       opaque == opaque

       N == N'
       typ == typ'
       --------------------------------- :: typeEq_array
       [ N * typ ] == [ N' * typ' ] 

       N == N'
       typ == typ'
       --------------------------------- :: typeEq_vector
       < N * typ > == < N' * typ' > 

       typ == typ'
       --------------------------------- :: typeEq_pointer
       typ * == typ' *

       typ == typ'
       </ typj == typ'j // j />
       ----------------------------------------------------- :: typeEq_function
       typ ( </ typj // j /> ) == typ' ( </ typ'j // j /> )  

       </ typj == typ'j // j />
       ----------------------------------------------------- :: typeEq_structure
       { </ typj // j /> } == { </ typ'j // j /> }  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Check Terminator						 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
isTerminatorInsn_def :: '' ::=
      defn
      isTerminatorInsn insn :: :: isTerminatorInsn :: ''
      {{ com check is [[insn]] is a terminator insn }} by

      --------------------------------------- :: isTerminatorInsn_return
      isTerminatorInsn (ret typ value) 
      
      --------------------------------------- :: isTerminatorInsn_return_void
      isTerminatorInsn (ret void)

      --------------------------------------- :: isTerminatorInsn_br
      isTerminatorInsn (br typ value , l1 , l2)

      --------------------------------------- :: isTerminatorInsn_br_uncond
      isTerminatorInsn (br l)

      ----------------------------------------------------------------- :: isTerminatorInsn_switch
      isTerminatorInsn (switch typ value , l </ [ constj , lj ] // j />)

      ----------------------------------------------------------------- :: isTerminatorInsn_invoke
      isTerminatorInsn (id = invoke typ id0 list_param to l1 unwind l2)

      ----------------------------------------------------------------- :: isTerminatorInsn_unreachable
      isTerminatorInsn unreachable

defns
insnsEndsWithTerminatorInsn_def :: '' ::=
      defn
      insnsEndsWithTerminatorInsn list_insn :: :: insnsEndsWithTerminatorInsn :: ''
      {{ com [[list_insn]] ends with terminator insnruction }} by
      
      insnsGetLast list_insn = insn
      isTerminatorInsn insn
      ----------------------------------------------- :: insnsEndsWithTerminatorInsn_intro
      insnsEndsWithTerminatorInsn list_insn 
    
defns
insnsDoesntContainTerminatorInsn_def :: '' ::=
      defn
      insnsDoesntContainTerminatorInsn list_insn :: :: insnsDoesntContainTerminatorInsn :: ''
      {{ com [[list_insn]] doesnt contain terminator insnruction }} by

      --------------------------------------- :: insnsDoesntContainTerminatorInsn_nil
      insnsDoesntContainTerminatorInsn []

      insnsDoesntContainTerminatorInsn list_insn
      not isTerminatorInsn insn
      ----------------------------------------------- :: insnsDoesntContainTerminatorInsn_cons
      insnsDoesntContainTerminatorInsn list_insn , insn

defns
insnsChecksTerminatorInsn_def :: '' ::=
      defn
      insnsChecksTerminatorInsn list_insn :: :: insnsChecksTerminatorInsn :: ''
      {{ com check if [[list_insn]] is well-formed }} by

      insnsEndsWithTerminatorInsn list_insn
      insnsRemovesLast list_insn = list_insn'    
      insnsDoesntContainTerminatorInsn list_insn'
      ----------------------------------------------- :: insnsChecksTerminatorInsn_intro
      insnsChecksTerminatorInsn list_insn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%        Check Phi							%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnsStartsWithPhiNode_def :: '' ::=
      defn
      insnsStartsWithPhiNode list_insn :: :: insnsStartsWithPhiNode :: ''
      {{ com [[list_insn]] starts with phi insnruction }} by

      ----------------------------------------------- :: insnsStartsWithPhiNode_nil
      insnsStartsWithPhiNode []

      insnsStartsWithPhiNode list_insn      
      isPhiNode insn
      ---------------------------------------------------------------------- :: insnsStartsWithPhiNode_cons_phi
      insnsStartsWithPhiNode (list_insn, insn)
      
      insnsDoesntContainPhiNode list_insn      
      not isPhiNode insn
      ---------------------------------------------------------------------- :: insnsStartsWithPhiNode_cons_nophi
      insnsStartsWithPhiNode (list_insn, insn)

      defn
      insnsDoesntContainPhiNode list_insn :: :: insnsDoesntContainPhiNode :: ''
      {{ com [[list_insn]] doesnt contain phi insnruction }} by

      --------------------------------------- :: insnsDoesntContainPhiNode_nil
      insnsDoesntContainPhiNode []

      insnsDoesntContainPhiNode list_insn
      not isPhiNode insn 
      ----------------------------------------------------- :: insnsDoesntContainPhiNode_cons
      insnsDoesntContainPhiNode list_insn , insn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get block from label                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getBlockAtLableFromBlocks_def :: '' ::=
      defn 
      getBlockAtLableFromBlocks list_block l = opt_block :: :: getBlockAtLableFromBlocks :: ''
      {{ com [[opt_block]] is of label [[l]] in [[list_block]] }} by

      ---------------------------------------------------- :: getBlockAtLableFromBlocks_nil
      getBlockAtLableFromBlocks [] l = none

      l1 == l2 
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_true
      getBlockAtLableFromBlocks (list_block, (l1 list_insn1)) l2 = l1 list_insn1

      not l1 == l2
      getBlockAtLableFromBlocks list_block l2 = opt_block
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_rec1
      getBlockAtLableFromBlocks (list_block, (l1 list_insn1)) l2 = opt_block
			      
    
defns
getBlockAtLableFromFdef_def :: '' ::=
      defn
      getBlockAtLableFromFdef fdef l = opt_block :: :: getBlockAtLableFromFdef :: ''
      {{ com [[opt_block]] is of label [[l]] in [[fdef]] }} by

      getBlockAtLableFromBlocks list_block l = opt_block
      ---------------------------------------------------- :: getBlockAtLableFromFdef_intro
      getBlockAtLableFromFdef (define fheader { list_block }) l = opt_block


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         phi                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getPhiNodesFromListInsn_def :: '' ::=
      defn
      getPhiNodesFromListInsn list_insn = list_insn' :: :: getPhiNodesFromListInsn :: ''
      {{ com [[list_insn']] are the Phi nodes in [[list_insn]] }} by
 
      -------------------------------- :: getPhiNodesFromListInsn_nil
      getPhiNodesFromListInsn [] = []

      getPhiNodesFromListInsn list_insn = list_insn'
      isPhiNode insn       
      --------------------------------------------------- :: getPhiNodesFromListInsn_rec_true
      getPhiNodesFromListInsn (list_insn, insn) = list_insn', insn

      getPhiNodesFromListInsn list_insn = list_insn'
      not isPhiNode insn       
      --------------------------------------------------- :: getPhiNodesFromListInsn_rec_false
      getPhiNodesFromListInsn (list_insn, insn) = list_insn'

defns
getPhiNodesFromBlock_def :: '' ::=
      defn
      getPhiNodesFromBlock block = list_insn :: :: getPhiNodesFromBlock :: ''
      {{ com [[list_insn]] are the Phi nodes in [[block]] }} by
 
      getInsnsFromBlock block = list_insn
      getPhiNodesFromListInsn list_insn = list_insn'
      ---------------------------------------- :: getPhiNodesFromBlocks_intro
      getPhiNodesFromBlock block = list_insn'

defns
getLabelsFromPhiNode_def :: '' ::=
      defn
      getLabelsFromPhiNode insn = ls :: :: getLabelsFromPhiNode :: ''
      {{ com [[ls]] is the set of labels from phi [[insn]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNode_intro
      getLabelsFromPhiNode (id = phi typ </ [ idj , lj ] // j />) = </lj//j/> 
 
defns
getLabelsFromPhiNodes_def :: '' ::=
      defn
      getLabelsFromPhiNodes list_insn = ls :: :: getLabelsFromPhiNodes :: ''
      {{ com [[ls]] is the set of labels from phis [[list_insn]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_nil
      getLabelsFromPhiNodes [] = empty

      getLabelsFromPhiNodes list_insn = ls
      getLabelsFromPhiNode insn = ls'
      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_cons
      getLabelsFromPhiNodes (list_insn, insn) = ls ; ls' 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         Uniq                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnNotinInsns_def :: '' ::=
     defn
     insnNotinInsns insn list_insn :: :: insnNotinInsns :: ''
     {{ com the ID of [[insn]] isnt in Ids of [[list_insn]] }} by

     getInsnID insn = none
     ------------------------------ :: insnNotinInsns_none
     insnNotinInsns insn list_insn    	      

     getInsnID insn = id
     ----------------------- :: insnNotinInsns_some_nil
     insnNotinInsns insn []    	      

     getInsnID insn = id
     getInsnID insn' = none
     insnNotinInsns insn list_insn'
     ------------------------------------ :: insnNotinInsns_some_none_cons
     insnNotinInsns insn (list_insn', insn')    	      

     getInsnID insn = id
     getInsnID insn' = id'
     not id == id'
     insnNotinInsns insn list_insn'
     ------------------------------------ :: insnNotinInsns_some_cons
     insnNotinInsns insn (list_insn', insn')    	      

defns
uniqInsns_def :: '' ::=
     defn
     uniqInsns list_insn :: :: uniqInsns :: ''
     {{ com IDs in [[list_insn]] are uniq }} by

     --------------------- :: uniqInsns_nil
     uniqInsns []

     insnNotinInsns insn list_insn
     uniqInsns list_insn
     ---------------------------- :: uniqInsns_cons
     uniqInsns (list_insn, insn)


defns
getInsnsFromBlocks_def :: '' ::=
     defn
     getInsnsFromBlocks list_block = list_insn :: :: getInsnsFromBlocks :: ''
     {{ com the instructions of [[list_block]] are [[list_insn]] }} by

     ---------------------------- :: getInsnsFromBlocks_nil
     getInsnsFromBlocks [] = []

     getInsnsFromBlocks list_block = list_insn
     getInsnsFromBlock block = list_insn' 
     ------------------------------------------------- :: getInsnsFromBlocks_cons
     getInsnsFromBlocks (list_block, block) = list_insn;list_insn'

defns
blockNotinBlocks_def :: '' ::=
     defn
     blockNotinBlocks block list_block :: :: blockNotinBlocks :: ''
     {{ com the label of [[block]] isnt in labels of [[list_block]] }} by

     ------------------------------------ :: blockNotinBlocks_none
     blockNotinBlocks list_insn list_block    	     

     --------------------------------- :: blockNotinBlocks_some_nil
     blockNotinBlocks (l list_insn) []    	      

     blockNotinBlocks (l list_insn) list_block'
     ------------------------------------ :: blockNotinBlocks_some_none_cons
     blockNotinBlocks (l list_insn) (list_block', list_insn')    	      

     not l == l'
     blockNotinBlocks (l list_insn) list_block'
     ------------------------------------ :: blockNotinBlocks_some_cons
     blockNotinBlocks (l list_insn) (list_block', l' list_insn')    	      


defns 
uniqLabels_def :: '' ::=
     defn
     uniqLabels list_block :: :: uniqLabels :: ''
     {{ com the labels in [[list_block]] are uniq}} by

     --------------------- :: uniqLabels_nil
     uniqLabels []

     blockNotinBlocks block list_block
     uniqLabels list_block
     ---------------------------- :: uniqLabels_cons
     uniqLabels (list_block, block)

defns
uniqBlocks_def :: '' ::=
     defn
     uniqBlocks list_block :: :: uniqBlocks :: ''
     {{ com the IDs and labels in [[list_block]] are uniq}} by
     
     getInsnsFromBlocks list_block = list_insn
     uniqInsns list_insn
     uniqLabels list_block
     ------------------------------------------------ :: uniqBlocks_intro
     uniqBlocks list_block

defns
uniqFdef_def :: '' ::=
     defn
     uniqFdef fdef :: :: uniqFdef :: ''
     {{ com the IDs in [[fdef]] are uniq}} by
   
     uniqBlocks list_block	
     ------------------------------------------------ :: uniqFdef_intro
     uniqFdef (define fheader { list_block })

defns
getProductID_def :: '' ::=
     defn 
     getProductID product = id :: :: getProductID :: ''
     {{ com return [[id]] from [[product]] }} by

     getGID g = id
     ------------------------------------ :: getProductID_g
     getProductID g = id

     getFdecID fdec = id
     ------------------------------------ :: getProductID_fdec
     getProductID fdec = id

     getFdefID fdef = id     
     ------------------------------------ :: getProductID_fdef
     getProductID fdef = id

     getNamedtID namedt = id
     ------------------------------------ :: getProductID_namedt
     getProductID namedt = id

defns
productNotinProducts_def :: '' ::=
     defn
     productNotinProducts product list_product :: :: productNotinProducts :: ''
     {{ com the ID of [[product]] isnt in Ids of [[list_product]] }} by

     ------------------------------- :: productNotinProducts_nil
     productNotinProducts product []    	      

     getProductID product = id
     getProductID product' = id'
     not id == id'
     productNotinProducts product list_product'
     ------------------------------------ :: productNotinProducts_cons
     productNotinProducts product (list_product', product')    	      
defns
uniqProduct_def :: '' ::=
     defn 
     uniqProduct product :: :: uniqProduct :: ''
     {{ com ids in [[product]] are uniq }} by

     ------------------------------------ :: uniqProduct_g
     uniqProduct g 

     ------------------------------------ :: uniqProduct_fdec
     uniqProduct fdec 

     uniqFdef fdef     
     ------------------------------------ :: uniqProduct_fdef
     uniqProduct fdef

     ------------------------------------ :: uniqProduct_namedt
     uniqProduct namedt


defns
uniqProducts_def :: '' ::=
     defn
     uniqProducts list_product :: :: uniqProducts :: ''
     {{ com IDs in [[list_product]] are uniq }} by

     --------------------- :: uniqProducts_nil
     uniqProducts []

     productNotinProducts product list_product
     uniqProducts list_product
     uniqProduct product
     -------------------------------------- :: uniqProducts_cons
     uniqProducts (list_product, product)

defns 
uniqModule_def :: '' ::=
     defn
     uniqModule module :: :: uniqModule :: ''
     {{ com IDs in [[module]] are uniq }} by
       
     module = list_product
     uniqProducts list_product
     ---------------------------- :: uniqModule_intro
     uniqModule module

defns 
uniqModules_def :: '' ::=
     defn
     uniqModules list_module :: :: uniqModules :: ''
     {{ com IDs in [[list_module]] are uniq }} by
      
     ---------------------- :: uniqModules_nil
     uniqModules []

     uniqModules list_module
     uniqModule module
     ----------------------------------- :: uniqModules_cons
     uniqModules (list_module, module)

defns
uniqSystem_def :: '' ::=
     defn
     uniqSystem system :: :: uniqSystem :: ''
     {{ com IDs in [[system]] are uniq }} by

     system = list_module
     uniqModules list_module
     --------------------------- :: uniqSystem_intro
     uniqSystem system

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    inclusion                                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnInBlock_def :: '' ::=
     defn
     insnInBlock insn block :: :: insnInBlock :: ''
     {{ com [[block]] includes [[insn]] }} by

     getInsnsFromBlock block = list_insn
     insn in list_insn
     ------------------------------------------------- :: insnInBlock_intro
     insnInBlock insn block

defns
blockInFdef_def :: '' ::=
     defn
     blockInFdef block fdef :: :: blockInFdef :: ''
     {{ com [[fdef]] includes [[block]] }} by

     block in list_block
     ------------------------------------------------- :: blockInFdef_intro
     blockInFdef block (define fheader {list_block})

defns
productInSystemModule_info :: '' ::=
     defn
     product in system , module_info :: :: productInSystemModule :: ''
     {{ com [[system]] [[module_info]] includes [[product]] }} by

     module in system
     product in module
     ------------------------------------------------------- :: productInSystemModule_intro
     product in system , (module, usedef_insn, usedef_block)   

defns
blockInSystemModuleFdef_info :: '' ::=
     defn
     block in system , module_info , fdef_info :: :: blockInSystemModuleFdef :: ''
     {{ com [[system]] [[module_info]] [[fdef_info]] includes [[block]] }} by

     blockInFdef block fdef
     fdef in system , module_info
     ------------------------------------------------------- :: blockInSystemModuleFdef_intro
     block in system , module_info , (fdef, dt) 

defns
insnInSystemModuleFdefBlock_info :: '' ::=
     defn
     insn in system , module_info , fdef_info , block :: :: insnInSystemModuleFdefBlock :: ''
     {{ com [[system]] [[module_info]] [[fdef_info]] [[block]] includes [[insn]] }} by

     insnInBlock insn block
     block in system , module_info , fdef_info
     ------------------------------------------------------- :: insnInSystemModuleFdefBlock_intro
     insn in system , module_info , fdef_info , block 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      ID type lookup                                     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupTypeForIDFromInsn_def :: '' ::=
     defn
     lookupTypeForIDFromInsn insn id = opt_typ :: :: lookupTypeForIDFromInsn :: ''
     {{ com look up [[id]]'s typ from [[insn]] }} by

     getInsnTyp insn = none \/ getInsnID insn = none
     ------------------------------------------------ :: lookupTypeForIDFromInsn_none
     lookupTypeForIDFromInsn insn id = none

     getInsnTyp insn = typ 
     getInsnID insn = id'
     id == id'
     -------------------------------------- :: lookupTypeForIDFromInsn_true
     lookupTypeForIDFromInsn insn id = typ

     getInsnTyp insn = typ 
     getInsnID insn = id'
     not id == id'
     --------------------------------------- :: lookupTypeForIDFromInsn_false
     lookupTypeForIDFromInsn insn id = none

defns
lookupTypeForIDFromInsns_def :: '' ::=
     defn
     lookupTypeForIDFromInsns list_insn id = opt_typ :: :: lookupTypeForIDFromInsns :: ''
     {{ com look up [[id]]'s typ from [[list_insn]] }} by

     ------------------------------------- :: lookupTypeForIDFromInsns_none
     lookupTypeForIDFromInsns [] id = none

     lookupTypeForIDFromInsn insn id = typ
     --------------------------------------------------- :: lookupTypeForIDFromInsns_true
     lookupTypeForIDFromInsns (list_insn, insn) id = typ

     lookupTypeForIDFromInsn insn id = none
     lookupTypeForIDFromInsns list_insn id = opt_typ
     --------------------------------------------------- :: lookupTypeForIDFromInsns_false
     lookupTypeForIDFromInsns (list_insn, insn) id = opt_typ

defns
lookupTypeForIDFromBlock_def :: '' ::=
     defn
     lookupTypeForIDFromBlock block id = opt_typ :: :: lookupTypeForIDFromBlock :: ''
     {{ com look up [[id]]'s typ from [[block]] }} by

     getInsnsFromBlock block = list_insn
     lookupTypeForIDFromInsns list_insn id = typ
     ----------------------------------------------- :: lookupTypeForIDFromBlock_intro
     lookupTypeForIDFromBlock block id = typ

defns
lookupTypeForIDFromBlocks_def :: '' ::=
     defn
     lookupTypeForIDFromBlocks list_block id = opt_typ :: :: lookupTypeForIDFromBlocks :: ''
     {{ com look up [[id]]'s typ from [[list_block]] }} by

     ---------------------------------------------- :: lookupTypeForIDFromBlocks_nil
     lookupTypeForIDFromBlocks [] id = none

     lookupTypeForIDFromBlock block id = typ
     ------------------------------------------------------ :: lookupTypeForIDFromBlocks_true
     lookupTypeForIDFromBlocks (list_block, block) id = typ

     lookupTypeForIDFromBlock block id = none
     lookupTypeForIDFromBlocks list_block id = opt_typ
     ---------------------------------------------------------- :: lookupTypeForIDFromBlocks_false
     lookupTypeForIDFromBlocks (list_block, block) id = opt_typ

defns
lookupTypeForIDFromFdef_def :: '' ::=
     defn
     lookupTypeForIDFromFdef fdef id = opt_typ :: :: lookupTypeForIDFromFdef :: ''
     {{ com look up [[id]]'s typ from [[fdef]] }} by

     lookupTypeForIDFromBlocks list_block id = opt_typ
     -------------------------------------------------------------------- :: lookupTypeForIDFromFdef_intro
     lookupTypeForIDFromFdef (define fheader {list_block}) id = opt_typ

defns
lookupTypeForIDFromProduct_def :: '' ::=
     defn
     lookupTypeForIDFromProduct product id = opt_typ :: :: lookupTypeForIDFromProduct :: ''
     {{ com look up [[id]]'s typ from [[product]] }} by

     id == id'
     ------------------------------------------------------------- :: lookupTypeForIDFromProduct_g_true
     lookupTypeForIDFromProduct (id = global typ const) id' = typ 

     not id == id'
     ------------------------------------------------------------- :: lookupTypeForIDFromProduct_g_false
     lookupTypeForIDFromProduct (id = global typ const) id' = none

     -------------------------------------- :: lookupTypeForIDFromProduct_fdec
     lookupTypeForIDFromProduct fdec id = none

     -------------------------------------- :: lookupTypeForIDFromProduct_namedt
     lookupTypeForIDFromProduct namedt id = none

     lookupTypeForIDFromFdef fdef id = opt_typ
     ------------------------------------------------------------------- :: lookupTypeForIDFromProduct_fdef
     lookupTypeForIDFromProduct fdef id = opt_typ

defns
lookupTypeForIDFromProducts_def :: '' ::=
     defn
     lookupTypeForIDFromProducts list_product id = opt_typ :: :: lookupTypeForIDFromProducts :: ''
     {{ com look up [[id]]'s typ from [[list_product]] }} by

     ---------------------------------------- :: lookupTypeForIDFromProducts_nil
     lookupTypeForIDFromProducts [] id = none

     lookupTypeForIDFromProduct product id = typ 
     ------------------------------------------------------------- :: lookupTypeForIDFromProducts_true
     lookupTypeForIDFromProducts (list_product, product) id = typ
     
     lookupTypeForIDFromProduct product id = none
     lookupTypeForIDFromProducts list_product id = opt_typ
     ---------------------------------------------------------------- :: lookupTypeForIDFromProducts_false
     lookupTypeForIDFromProducts (list_product, product) id = opt_typ

defns
lookupTypeForIDFromModule_def :: '' ::=
     defn
     lookupTypeForIDFromModule module id = opt_typ :: :: lookupTypeForIDFromModule :: ''
     {{ com look up [[id]]'s typ from [[module]] }} by

     module = list_product
     lookupTypeForIDFromProducts list_product id = opt_typ
     -------------------------------------------------------- :: lookupTypeForIDFromModule_intro
     lookupTypeForIDFromModule module id = opt_typ
     
defns
lookupTypeForIDFromModules_def :: '' ::=
     defn
     lookupTypeForIDFromModules list_module id = opt_typ :: :: lookupTypeForIDFromModules :: ''
     {{ com look up [[id]]'s typ from [[list_module]] }} by

     ---------------------------------------- :: lookupTypeForIDFromModules_nil
     lookupTypeForIDFromModules [] id = none

     lookupTypeForIDFromModule module id = typ
     ------------------------------------------------------------- :: lookupTypeForIDFromModules_true
     lookupTypeForIDFromModules (list_module, module) id = typ

     lookupTypeForIDFromModule module id = none
     lookupTypeForIDFromModules list_module id = opt_typ
     ---------------------------------------------------------------- :: lookupTypeForIDFromModules_false
     lookupTypeForIDFromModules (list_module, module) id = opt_typ

defns
lookupTypeForIDFromSystem_def :: '' ::=
     defn
     lookupTypeForIDFromSystem system id = opt_typ :: :: lookupTypeForIDFromSystem :: ''
     {{ com look up [[id]]'s typ from [[system]] }} by

     system = list_module
     lookupTypeForIDFromModules list_module id = opt_typ
     ---------------------------------------------------- :: lookupTypeForIDFromSystem_intro
     lookupTypeForIDFromSystem system id = opt_typ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Fdec type lookup                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupFdecTypeForIDFromProduct_def :: '' ::=
     defn
     lookupFdecTypeForIDFromProduct product id = opt_typ :: :: lookupFdecTypeForIDFromProduct :: ''
     {{ com look up [[id]]'s typ from [[product]] }} by

     ------------------------------------------- :: lookupFdecTypeForIDFromProduct_g
     lookupFdecTypeForIDFromProduct g id = none

     ------------------------------------------------ :: lookupFdecTypeForIDFromProduct_namedt
     lookupFdecTypeForIDFromProduct namedt id = none

     getFdecID fdec = id'
     id == id'
     getFdecType fdec = typ
     ------------------------------------------------ :: lookupFdecTypeForIDFromProduct_fdec_true
     lookupFdecTypeForIDFromProduct fdec id = typ

     getFdecID fdec = id'
     not id == id'
     ------------------------------------------------ :: lookupFdecTypeForIDFromProduct_fdec_false
     lookupFdecTypeForIDFromProduct fdec id = none

     ------------------------------------------------ :: lookupFdecTypeForIDFromProduct_fdef
     lookupFdecTypeForIDFromProduct fdef id = none

defns
lookupFdefTypeForIDFromProduct_def :: '' ::=
     defn
     lookupFdefTypeForIDFromProduct product id = opt_typ :: :: lookupFdefTypeForIDFromProduct :: ''
     {{ com look up [[id]]'s typ from [[product]] }} by

     ------------------------------------------- :: lookupFdefTypeForIDFromProduct_g
     lookupFdefTypeForIDFromProduct g id = none

     ------------------------------------------------ :: lookupFdefTypeForIDFromProduct_namedt
     lookupFdefTypeForIDFromProduct namedt id = none

     getFdefID fdef = id'
     id == id'
     getFdefType fdef = typ
     ------------------------------------------------ :: lookupFdefTypeForIDFromProduct_fdef_true
     lookupFdefTypeForIDFromProduct fdef id = typ

     getFdefID fdef = id'
     not id == id'
     ------------------------------------------------ :: lookupFdefTypeForIDFromProduct_fdef_false
     lookupFdefTypeForIDFromProduct fdef id = none

     ------------------------------------------------ :: lookupFdefTypeForIDFromProduct_fdec
     lookupFdefTypeForIDFromProduct fdec id = none

defns
lookupFdecTypeForIDFromProducts_def :: '' ::=
     defn
     lookupFdecTypeForIDFromProducts list_product id = opt_typ :: :: lookupFdecTypeForIDFromProducts :: ''
     {{ com look up [[id]]'s fdec typ from [[list_product]] }} by

     ---------------------------------------- :: lookupFdecTypeForIDFromProducts_nil
     lookupFdecTypeForIDFromProducts [] id = none

     lookupFdecTypeForIDFromProduct product id = typ 
     ------------------------------------------------------------- :: lookupFdecTypeForIDFromProducts_true
     lookupFdecTypeForIDFromProducts (list_product, product) id = typ
     
     lookupFdecTypeForIDFromProduct product id = none
     lookupFdecTypeForIDFromProducts list_product id = opt_typ
     ---------------------------------------------------------------- :: lookupFdecTypeForIDFromProducts_false
     lookupFdecTypeForIDFromProducts (list_product, product) id = opt_typ

defns
lookupFdefTypeForIDFromProducts_def :: '' ::=
     defn
     lookupFdefTypeForIDFromProducts list_product id = opt_typ :: :: lookupFdefTypeForIDFromProducts :: ''
     {{ com look up [[id]]'s fdef typ from [[list_product]] }} by

     ---------------------------------------- :: lookupFdefTypeForIDFromProducts_nil
     lookupFdefTypeForIDFromProducts [] id = none

     lookupFdefTypeForIDFromProduct product id = typ 
     ------------------------------------------------------------- :: lookupFdefTypeForIDFromProducts_true
     lookupFdefTypeForIDFromProducts (list_product, product) id = typ
     
     lookupFdefTypeForIDFromProduct product id = none
     lookupFdefTypeForIDFromProducts list_product id = opt_typ
     ---------------------------------------------------------------- :: lookupFdefTypeForIDFromProducts_false
     lookupFdefTypeForIDFromProducts (list_product, product) id = opt_typ

defns
lookupFdecTypeForIDFromModule_def :: '' ::=
     defn
     lookupFdecTypeForIDFromModule module id = opt_typ :: :: lookupFdecTypeForIDFromModule :: ''
     {{ com look up [[id]]'s fdec typ from [[module]] }} by

     module = list_product
     lookupFdecTypeForIDFromProducts list_product id = opt_typ
     -------------------------------------------------------- :: lookupFdecTypeForIDFromModule_intro
     lookupFdecTypeForIDFromModule module id = opt_typ
     
defns
lookupFdefTypeForIDFromModule_def :: '' ::=
     defn
     lookupFdefTypeForIDFromModule module id = opt_typ :: :: lookupFdefTypeForIDFromModule :: ''
     {{ com look up [[id]]'s fdef typ from [[module]] }} by

     module = list_product
     lookupFdefTypeForIDFromProducts list_product id = opt_typ
     -------------------------------------------------------- :: lookupFdefTypeForIDFromModule_intro
     lookupFdefTypeForIDFromModule module id = opt_typ

defns
lookupFdecTypeForIDFromModules_def :: '' ::=
     defn
     lookupFdecTypeForIDFromModules list_module id = opt_typ :: :: lookupFdecTypeForIDFromModules :: ''
     {{ com look up [[id]]'s fdec typ from [[list_module]] }} by

     ---------------------------------------- :: lookupFdecTypeForIDFromModules_nil
     lookupFdecTypeForIDFromModules [] id = none

     lookupFdecTypeForIDFromModule module id = typ
     ------------------------------------------------------------- :: lookupFdecTypeForIDFromModules_true
     lookupFdecTypeForIDFromModules (list_module, module) id = typ

     lookupFdecTypeForIDFromModule module id = none
     lookupFdecTypeForIDFromModules list_module id = opt_typ
     ---------------------------------------------------------------- :: lookupFdecTypeForIDFromModules_false
     lookupFdecTypeForIDFromModules (list_module, module) id = opt_typ

defns
lookupFdefTypeForIDFromModules_def :: '' ::=
     defn
     lookupFdefTypeForIDFromModules list_module id = opt_typ :: :: lookupFdefTypeForIDFromModules :: ''
     {{ com look up [[id]]'s fdef typ from [[list_module]] }} by

     ---------------------------------------- :: lookupFdefTypeForIDFromModules_nil
     lookupFdefTypeForIDFromModules [] id = none

     lookupFdefTypeForIDFromModule module id = typ
     ------------------------------------------------------------- :: lookupFdefTypeForIDFromModules_true
     lookupFdefTypeForIDFromModules (list_module, module) id = typ

     lookupFdefTypeForIDFromModule module id = none
     lookupFdefTypeForIDFromModules list_module id = opt_typ
     ---------------------------------------------------------------- :: lookupFdefTypeForIDFromModules_false
     lookupFdefTypeForIDFromModules (list_module, module) id = opt_typ

defns
lookupFdecTypeForIDFromSystem_def :: '' ::=
     defn
     lookupFdecTypeForIDFromSystem system id = opt_typ :: :: lookupFdecTypeForIDFromSystem :: ''
     {{ com look up [[id]]'s dec typ from [[system]] }} by

     system = list_module
     lookupFdecTypeForIDFromModules list_module id = opt_typ
     ---------------------------------------------------- :: lookupFdecTypeForIDFromSystem_intro
     lookupFdecTypeForIDFromSystem system id = opt_typ

defns
lookupFdefTypeForIDFromSystem_def :: '' ::=
     defn
     lookupFdefTypeForIDFromSystem system id = opt_typ :: :: lookupFdefTypeForIDFromSystem :: ''
     {{ com look up [[id]]'s def typ from [[system]] }} by

     system = list_module
     lookupFdefTypeForIDFromModules list_module id = opt_typ
     ---------------------------------------------------- :: lookupFdefTypeForIDFromSystem_intro
     lookupFdefTypeForIDFromSystem system id = opt_typ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get parent                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getParentOfInsn_def :: '' ::=
     defn
     getParentOfInsn insn = block :: :: getParentOfInsn :: ''
     {{ com [[block]] is the parent of [[insn]] }} by

     insnInBlock insn block
     ------------------------------------- :: getParentOfInsn_intro
     getParentOfInsn insn = block      

defns
getParentOfBlock_def :: '' ::=
     defn
     getParentOfBlock block = fdef :: :: getParentOfBlock :: ''
     {{ com [[fdef]] is the parent of [[block]] }} by

     blockInFdef block fdef
     ------------------------------------- :: getParentOfBlock_intro
     getParentOfBlock block = fdef

defns
getParentOfFdef_def :: '' ::=
     defn
     getParentOfFdef fdef = module :: :: getParentOfFdef :: ''
     {{ com [[module]] is the parent of [[fdef]] }} by

     fdef in module
     ------------------------------------- :: getParentOfFdef_intro
     getParentOfFdef fdef = module
