
% Supporting Defs of Static Single Assignment(SSA)

defns
args2Typs_def :: '' ::=
     defn
     args2Typs list_arg = list_typ :: :: args2Typs :: ''
     {{ com convert [[list_arg]] into [[list_typ]] }} by

     -------------------- :: args2Typs_nil 
     args2Typs [] = []

     args2Typs list_arg = list_typ
     ---------------------------------------------- :: args2Typs_cons 
     args2Typs (list_arg, typ id) = list_typ, typ


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                inversion                                     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getIDLabelsFromPhiNode_def :: '' ::=
      defn
      getIDLabelsFromPhiNode insn = id_labels :: :: getIDLabelsFromPhiNode :: ''
      {{ com [[id_labels]] from [[insn]] }} by

      id_labels <-> </ [ idj , lj ] // j />
      -------------------------------------------------------------------------- :: getIDLableFromPhiNode_intro
      getIDLabelsFromPhiNode (id = phi typ </ [ idj , lj ] // j />) = id_labels


defns
getLabelViaIDFromIDLabels_def :: '' ::=
      defn
      getLabelViaIDFromIDLabels id_labels id = opt_l :: :: getLabelViaIDFromIDLabels :: ''
      {{ com return [[id]]'s label from [[id_labels]] }} by

      --------------------------------------- :: getLabelViaIDFromIDLabels_nil
      getLabelViaIDFromIDLabels [] id = none

      id == id'
      ---------------------------------------------------- :: getLabelViaIDFromIDLabels_cons_true
      getLabelViaIDFromIDLabels (id_labels, id l) id' = l

      not id == id'
      getLabelViaIDFromIDLabels id_labels id' = opt_l
      --------------------------------------------------------- :: getLabelViaIDFromIDLabels_cons_false
      getLabelViaIDFromIDLabels (id_labels, id l) id' = opt_l

defns
getLabelViaIDPhiNode_def :: '' ::=
      defn
      getLabelViaIDPhiNode insn id' = opt_l :: :: getLabelViaIDPhiNode :: ''
      {{ com get the label w.r.t [[id']] from [[insn]] }} by

      id_labels <-> </ [ idj , lj ] // j />
      getLabelViaIDFromIDLabels id_labels id' = opt_l
      ----------------------------------------------------------------------- :: getLabelViaIDPhiNode_intro
      getLabelViaIDPhiNode (id = phi typ </ [ idj , lj ] // j />) id' = opt_l

defns
getReturnTyp_def :: '' ::=
      defn
      getReturnTyp fdef = typ :: :: getReturnTyp :: '' 
      {{ com [[fdef]]'s return type is [[typ]] }} by

      ----------------------------------------------------------------- :: getReturnTyp_intro
      getReturnTyp (define (typ id (list_arg)) { list_block }) = typ


defns
getInsnsFromBlock_def :: '' ::=
      defn
      getInsnsFromBlock block = list_insn :: :: getInsnsFromBlock :: ''
      {{ com return [[list_insn]] in [[block]] }} by

      ------------------------------------------- :: getInsnsFromBlock_with_label
      getInsnsFromBlock (l list_insn) = list_insn

      ------------------------------------------- :: getInsnsFromBlock_without_label
      getInsnsFromBlock list_insn = list_insn

defns
getFheaderID_def :: '' ::=
     defn
     getFheaderID fheader = id :: :: getFheaderID :: ''
     {{ com return [[id]] from [[fheader]] }} by

     ---------------------------------------- :: getFheaderID_intro
     getFheaderID (typ id ( list_arg )) = id

defns
getFdecID_def :: '' ::=
     defn
     getFdecID fdec = id :: :: getFdecID :: ''
     {{ com return [[id]] from [[fdec]] }} by

     getFheaderID fheader = id
     ---------------------------------------- :: getFdecID_intro
     getFdecID (declare fheader) = id

defns
getFdefID_def :: '' ::=
     defn
     getFdefID fdef = id :: :: getFdefID :: ''
     {{ com return [[id]] from [[fdef]] }} by

     getFheaderID fheader = id
     ---------------------------------------------- :: getFdefID_intro
     getFdefID (define fheader {list_block}) = id

defns
getNamedtID_def :: '' ::=
     defn
     getNamedtID namedt = id :: :: getNamedtID :: ''
     {{ com return [[id]] from [[namedt]] }} by

     ----------------------------------- :: getNamedtID_intro
     getNamedtID (id = type typ) = id   			

defns
getGID_def :: '' ::=
     defn
     getGID g = id :: :: getgID :: ''
     {{ com return [[id]] from [[g]] }} by

     ------------------------------------ :: getGID_intro
     getGID (id = global typ const) = id 

defns
getFheaderTyp_def :: '' ::=
     defn
     getFheaderTyp fheader = typ :: :: getFheaderTyp :: ''
     {{ com get [[fheader]]'s [[typ]] }} by

     args2Typs list_arg = list_typ
     list_typ <-> </ typj // j />
     ------------------------------------------------------------------- :: getFheaderTyp_intro
     getFheaderTyp (typ id ( list_arg)) = typ ( </ typj // j /> )

defns
getFdecTyp_def :: '' ::=
     defn
     getFdecTyp fdec = typ :: :: getFdecTyp :: ''
     {{ com get [[fdec]]'s [[typ]] }} by

     getFheaderTyp fheader = typ
     ------------------------------------------------------------------- :: getFdecTyp_intro
     getFdecTyp (declare fheader) = typ

defns
getFdefTyp_def :: '' ::=
     defn
     getFdefTyp fdef = typ :: :: getFdefTyp :: ''
     {{ com get [[fdef]]'s [[typ]] }} by

     getFheaderTyp fheader = typ
     ------------------------------------------------------------------- :: getFdefTyp_intro
     getFdefTyp (define fheader {list_block}) = typ

defns
getLoadTyp_def :: '' ::=
     defn
     getLoadTyp typ = opt_typ :: :: getLoadTyp :: ''
     {{ com get the typ to load from [[typ]] }} by

     --------------------------- :: getLoadTyp_int
     getLoadTyp (int N) = none                    

     --------------------------- :: getLoadTyp_float
     getLoadTyp float = none

     --------------------------- :: getLoadTyp_double
     getLoadTyp double = none

     --------------------------- :: getLoadTyp_fp128
     getLoadTyp fp128 = none

     --------------------------- :: getLoadTyp_void
     getLoadTyp void = none

     --------------------------- :: getLoadTyp_label
     getLoadTyp label = none

     --------------------------- :: getLoadTyp_metadata
     getLoadTyp metadata = none
     
     ------------------------------ :: getLoadTyp_array
     getLoadTyp [ N * typ ] = none               	

     -------------------------------------------- :: getLoadTyp_function
     getLoadTyp (typ ( </ typj // j /> )) = none 				

     -------------------------------------- :: getLoadTyp_struct
     getLoadTyp { </ typj // j /> } = none       		

     ------------------------- :: getLoadTyp_pointer
     getLoadTyp (typ *) = typ                     	

     ----------------------------- :: getLoadTyp_verctor
     getLoadTyp < N * typ > = none               	

     ---------------------------- :: getLoadTyp_opaque
     getLoadTyp opaque = none  				

defns
getElementTyp_def :: '' ::=
     defn
     getElementTyp typ = opt_typ :: :: getElementTyp :: ''
     {{ com get the typ of element from [[typ]] }} by

     --------------------------- :: getElementTyp_int
     getElementTyp (int N) = none                    

     --------------------------- :: getElementTyp_float
     getElementTyp float = none

     --------------------------- :: getElementTyp_double
     getElementTyp double = none

     --------------------------- :: getElementTyp_fp128
     getElementTyp fp128 = none

     --------------------------- :: getElementTyp_void
     getElementTyp void = none

     --------------------------- :: getElementTyp_label
     getElementTyp label = none

     --------------------------- :: getElementTyp_metadata
     getElementTyp metadata = none
     
     ------------------------------ :: getElementTyp_array
     getElementTyp [ N * typ ] = typ               	

     -------------------------------------------- :: getElementTyp_function
     getElementTyp (typ ( </ typj // j /> )) = none 				

     -------------------------------------- :: getElementTyp_struct
     getElementTyp { </ typj // j /> } = none       		

     ------------------------- :: getElementTyp_pointer
     getElementTyp (typ *) = none                     	

     ----------------------------- :: getElementTyp_verctor
     getElementTyp < N * typ > = none               	

     ---------------------------- :: getElementTyp_opaque
     getElementTyp opaque = none  				

defns
getFieldTyp_def :: '' ::=
     defn
     getFieldTyp typ const = opt_typ :: :: getFieldTyp :: ''
     {{ com get the typ of element from [[typ]] }} by

     ------------------------------------ :: getFieldTyp_int
     getFieldTyp (int N) const = none                    

     ------------------------------------ :: getFieldTyp_float
     getFieldTyp float const = none

     ------------------------------------ :: getFieldTyp_double
     getFieldTyp double const = none

     ------------------------------------ :: getFieldTyp_fp128
     getFieldTyp fp128 const = none

     ------------------------------------ :: getFieldTyp_void
     getFieldTyp void const = none

     ------------------------------------ :: getFieldTyp_label
     getFieldTyp label const = none

     ------------------------------------ :: getFieldTyp_metadata
     getFieldTyp metadata const = none
     
     ------------------------------------ :: getFieldTyp_array
     getFieldTyp [ N * typ ] const = none               	

     --------------------------------------------------- :: getFieldTyp_function
     getFieldTyp (typ ( </ typj // j /> )) const = none 				

     getNthTyp </ typj // j /> N = typ
     ----------------------------------------- :: getFieldTyp_struct_N
     getFieldTyp { </ typj // j /> } N = typ       		

     --------------------------------------------- :: getFieldTyp_struct_undef
     getFieldTyp { </ typj // j /> } undef = none       		

     --------------------------------- :: getFieldTyp_pointer
     getFieldTyp (typ *) const = none                     	

     ------------------------------------- :: getFieldTyp_verctor
     getFieldTyp < N * typ > const = none               	

     ------------------------------- :: getFieldTyp_opaque
     getFieldTyp opaque const = none  				

defns
getInsnTyp_def :: '' ::=
     defn
     getInsnTyp insn = opt_typ :: :: getInsnTyp :: ''
     {{ com return typs of [[insn]] }} by

     ----------------------------------------------- :: getInsnTyp_return
     getInsnTyp (ret typ value) = none

     ----------------------------------------------- :: getInsnTyp_return_void
     getInsnTyp (ret void) = none 

     ------------------------------------------------------ :: getInsnTyp_br
     getInsnTyp (br typ value , l1 , l2) = none 

     ------------------------------------------------------ :: getInsnTyp_uncond
     getInsnTyp (br l) = none 
        
     -------------------------------------------------------------------------------- :: getInsnTyp_switch
     getInsnTyp (switch typ value , l </ [ constj , lj ] // j />) = none

     ------------------------------------------------------------------------------- :: getInsnTyp_invoke
     getInsnTyp (id = invoke typ id0 list_param to l1 unwind l2) = typ

     ------------------------------------------------------------------------------- :: getInsnTyp_call
     getInsnTyp (id = call typ id0 list_param) = typ

     ------------------------------------------- :: getInsnTyp_unreachable
     getInsnTyp unreachable = none	     	   	     	 		

     ------------------------------------------------------------ :: getInsnTyp_add
     getInsnTyp (id = add typ value1 value2) = typ

     ------------------------------------------------------------ :: getInsnTyp_fadd
     getInsnTyp (id = fadd typ value1 value2) = typ

     ------------------------------------------------------------ :: getInsnTyp_udiv
     getInsnTyp (id = udiv typ value1 value2) = typ			

     ------------------------------------------------------------ :: getInsnTyp_fdiv
     getInsnTyp (id = fdiv typ value1 value2) = typ


     ----------------------------------------------------------- :: getInsnTyp_or
     getInsnTyp (id = or typ value1 value2) = typ				

     ----------------------------------------------------------- :: getInsnTyp_and
     getInsnTyp (id = and typ value1 value2) = typ				

     getElementTyp typ0 = typ
     --------------------------------------------------------------------------- :: getInsnTyp_extractelement
     getInsnTyp (id = extractelement typ0 value0 , const1) = typ

     ---------------------------------------------------------------------------------------- :: getInsnTyp_insertelement
     getInsnTyp (id = insertelement typ0 value0 , typ1 value1 , const2) = typ0

     getFieldTyp typ0 const1 = typ
     --------------------------------------------------------------------- :: getInsnTyp_extractvalue
     getInsnTyp (id = extractvalue typ0 value0 , const1) = typ              

     ---------------------------------------------------------------------------------------------- :: getInsnTyp_insertvalue
     getInsnTyp (id = insertvalue typ0 value0 , typ1 value1 , const2) = typ0

     -------------------------------------- :: getInsnTyp_alloca
     getInsnTyp (id = alloca typ N) = typ *  	     	       	

     getLoadTyp typ1 = opt_typ
     ---------------------------------------- :: getInsnTyp_load
     getInsnTyp (id = load typ1 id1) = opt_typ			

     ------------------------------------------------ :: getInsnTyp_store
     getInsnTyp (store typ1 value1 , typ2 id2) = none			

     -------------------------------------------------- :: getInsnTyp_trunc
     getInsnTyp (id = trunc typ1 value1 to typ2) = typ2 			

     ---------------------------------------------------- :: getInsnTyp_fptrunc
     getInsnTyp (id = fptrunc typ1 value1 to typ2) = typ2			

     ----------------------------------------------------- :: getInsnTyp_fptoui
     getInsnTyp (id = fptoui typ1 value1 to typ2) = typ2

     ---------------------------------------------------- :: getInsnTyp_fptosi
     getInsnTyp (id = fptosi typ1 value1 to typ2) = typ2


     --------------------------------------------------- :: getInsnTyp_uitofp
     getInsnTyp (id = uitofp typ1 value1 to typ2) = typ2			

     --------------------------------------------------- :: getInsnTyp_sitofp
     getInsnTyp (id = sitofp typ1 value1 to typ2) = typ2			

     ----------------------------------------------------- :: getInsnTyp_ptrtoint
     getInsnTyp (id = ptrtoint typ1 value1 to typ2) = typ2 			


     ----------------------------------------------------- :: getInsnTyp_inttoptr
     getInsnTyp (id = inttoptr typ1 value1 to typ2) = typ2 			

     ---------------------------------------------------- :: getInsnTyp_bitcase
     getInsnTyp (id = bitcast typ1 value1 to typ2) = typ2 			


     ------------------------------------------------------ :: getInsnTyp_icmp
     getInsnTyp (id = icmp cond typ value1 , value2) = int 1			

     ------------------------------------------------------ :: getInsnTyp_fcmp
     getInsnTyp (id = fcmp cond typ value1 , value2) = int 1		

     --------------------------------------------------------- :: getInsnTyp_phi
     getInsnTyp (id = phi typ </ [ idj , lj ] // j />) = typ 		


defns
getPointerEltTyp_def :: '' ::=
     defn
     getPointerEltTyp typ = typ' :: :: getPointerEltTyp :: '' 
     {{ com the pointer typ [[typ]] points to [[typ']] }} by

     ------------------------------- :: getPointerEltTyp_intro
     getPointerEltTyp (typ *) = typ

defns
getValueIDs_def :: '' ::=
     defn
     getValueIDs value = ids :: :: getValueIDs :: '' 
     {{ com the [[ids]] from [[value]] }} by

     getValueID value = none
     ------------------------------- :: getValueIDs_none
     getValueIDs value = empty

     getValueID value = id
     ------------------------------- :: getValueIDs_id
     getValueIDs value = id

defns
getParamsOperand_def :: '' ::=
     defn
     getParamsOperand list_param = ids :: :: getParamsOperand :: ''
     {{ com return operands of [[list_param]] }} by

     ---------------------------- :: getParamsOperand_nil
     getParamsOperand [] = empty

     getValueIDs value = ids
     getParamsOperand list_param = ids'
     ------------------------------------------------- :: getParamsOperand_cons
     getParamsOperand (list_param, typ value) = ids;ids'

defns
getInsnOperands_def :: '' ::=
     defn
     getInsnOperands insn = ids :: :: getInsnOperands :: ''
     {{ com return operands of [[insn]] }} by

     getValueIDs value = ids
     ----------------------------------------------- :: getInsnOperands_return
     getInsnOperands (ret typ value) = ids

     ----------------------------------------------- :: getInsnOperands_return_void
     getInsnOperands (ret void) = empty

     getValueIDs value = ids
     ------------------------------------------------------ :: getInsnOperands_br
     getInsnOperands (br typ value , l1 , l2) = ids

     ------------------------------------------------------ :: getInsnOperands_uncond
     getInsnOperands (br l) = empty
        
     getValueIDs value = ids
     -------------------------------------------------------------------------------- :: getInsnOperands_switch
     getInsnOperands (switch typ value , l </ [ constj , lj ] // j />) = ids

     getParamsOperand list_param = ids
     ------------------------------------------------------------------------------- :: getInsnOperands_invoke
     getInsnOperands (id = invoke typ id0 list_param to l1 unwind l2) = ids,id0

     getParamsOperand list_param = ids
     ------------------------------------------------------------------------------- :: getInsnOperands_call
     getInsnOperands (id = call typ id0 list_param) = ids,id0

     ------------------------------------------- :: getInsnOperands_unreachable
     getInsnOperands unreachable = empty  	 		

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ------------------------------------------------------------ :: getInsnOperands_add
     getInsnOperands (id = add typ value1 value2) = ids1 ; ids2

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ------------------------------------------------------------ :: getInsnOperands_fadd
     getInsnOperands (id = fadd typ value1 value2) = ids1 ; ids2

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ------------------------------------------------------------ :: getInsnOperands_udiv
     getInsnOperands (id = udiv typ value1 value2) = ids1 ; ids2			

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ------------------------------------------------------------ :: getInsnOperands_fdiv
     getInsnOperands (id = fdiv typ value1 value2) = ids1 ; ids2

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ----------------------------------------------------------- :: getInsnOperands_or
     getInsnOperands (id = or typ value1 value2) = ids1 ; ids2				

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ----------------------------------------------------------- :: getInsnOperands_and
     getInsnOperands (id = and typ value1 value2) = ids1 ; ids2				

     getValueIDs value0 = ids0
     --------------------------------------------------------------------------- :: getInsnOperands_extractelement
     getInsnOperands (id = extractelement typ0 value0 , const1) = ids0

     getValueIDs value0 = ids0
     getValueIDs value1 = ids1
     --------------------------------------------------------------------------- :: getInsnOperands_insertelement
     getInsnOperands (id = insertelement typ0 value0 , typ1 value1 , const2) = ids0; ids1

     getValueIDs value0 = ids0
     --------------------------------------------------------------------- :: getInsnOperands_extractvalue
     getInsnOperands (id = extractvalue typ0 value0 , const1) = ids0              

     getValueIDs value0 = ids0
     getValueIDs value1 = ids1
     ----------------------------------------------------------------------------- :: getInsnOperands_insertvalue
     getInsnOperands (id = insertvalue typ0 value0 , typ value1 , const2) = ids0;ids1

     -------------------------------------- :: getInsnOperands_alloca
     getInsnOperands (id = alloca typ N) = empty  	     	       	

     getValueIDs value1 = ids1
     ---------------------------------------- :: getInsnOperands_load
     getInsnOperands (id = load typ1 value1) = ids1			

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ------------------------------------------------ :: getInsnOperands_store
     getInsnOperands (store typ1 value1 , typ2 value2) = ids1;ids2			

     getValueIDs value1 = ids1
     -------------------------------------------------- :: getInsnOperands_trunc
     getInsnOperands (id = trunc typ1 value1 to typ2) = ids1 			

     getValueIDs value1 = ids1
     ---------------------------------------------------- :: getInsnOperands_fptrunc
     getInsnOperands (id = fptrunc typ1 value1 to typ2) = ids1			

     getValueIDs value1 = ids1
     ----------------------------------------------------- :: getInsnOperands_fptoui
     getInsnOperands (id = fptoui typ1 value1 to typ2) = ids1

     getValueIDs value1 = ids1
     ---------------------------------------------------- :: getInsnOperands_fptosi
     getInsnOperands (id = fptosi typ1 value1 to typ2) = ids1

     getValueIDs value1 = ids1
     --------------------------------------------------- :: getInsnOperands_uitofp
     getInsnOperands (id = uitofp typ1 value1 to typ2) = ids1			

     getValueIDs value1 = ids1
     --------------------------------------------------- :: getInsnOperands_sitofp
     getInsnOperands (id = sitofp typ1 value1 to typ2) = ids1			

     getValueIDs value1 = ids1
     ----------------------------------------------------- :: getInsnOperands_ptrtoint
     getInsnOperands (id = ptrtoint typ1 value1 to typ2) = ids1 			

     getValueIDs value1 = ids1
     ----------------------------------------------------- :: getInsnOperands_inttoptr
     getInsnOperands (id = inttoptr typ1 value1 to typ2) = ids1 			

     getValueIDs value1 = ids1
     ---------------------------------------------------- :: getInsnOperands_bitcase
     getInsnOperands (id = bitcast typ1 value1 to typ2) = ids1			

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ------------------------------------------------------ :: getInsnOperands_icmp
     getInsnOperands (id = icmp cond typ value1 , value2) = ids1;ids2			

     getValueIDs value1 = ids1
     getValueIDs value2 = ids2
     ------------------------------------------------------ :: getInsnOperands_fcmp
     getInsnOperands (id = fcmp cond typ value1 , value2) = ids1;ids2		

     --------------------------------------------------------- :: getInsnOperands_phi
     getInsnOperands (id = phi typ </ [ idj , lj ] // j />) = </idj//j/>

defns
getInsnLabels_def :: '' ::=
     defn
     getInsnLabels insn = ls :: :: getInsnLabels :: ''
     {{ com return labels of [[insn]] }} by

     ----------------------------------------------- :: getInsnLabels_return
     getInsnLabels (ret typ value) = empty

     ----------------------------------------------- :: getInsnLabels_return_void
     getInsnLabels (ret void) = empty

     ------------------------------------------------------ :: getInsnLabels_br
     getInsnLabels (br typ value , l1 , l2) = l1,l2

     ------------------------------------------------------ :: getInsnLabels_uncond
     getInsnLabels (br l) = l
        
     -------------------------------------------------------------------------------- :: getInsnLabels_switch
     getInsnLabels (switch typ value , l </ [ constj , lj ] // j />) = </ lj // j />

     ------------------------------------------------------------------------------- :: getInsnLabels_invoke
     getInsnLabels (id = invoke typ id0 list_param to l1 unwind l2) = l1,l2

     ------------------------------------------------------------------------------- :: getInsnLabels_call
     getInsnLabels (id = call typ id0 list_param) = empty

     ------------------------------------------- :: getInsnLabels_unreachable
     getInsnLabels unreachable = empty  	 		

     ------------------------------------------------------------ :: getInsnLabels_add
     getInsnLabels (id = add typ value1 value2) = empty

     ------------------------------------------------------------ :: getInsnLabels_fadd
     getInsnLabels (id = fadd typ value1 value2) = empty

     ------------------------------------------------------------ :: getInsnLabels_udiv
     getInsnLabels (id = udiv typ value1 value2) = empty			

     ------------------------------------------------------------ :: getInsnLabels_fdiv
     getInsnLabels (id = fdiv typ value1 value2) = empty

     ----------------------------------------------------------- :: getInsnLabels_or
     getInsnLabels (id = or typ value1 value2) = empty				

     ----------------------------------------------------------- :: getInsnLabels_and
     getInsnLabels (id = and typ value1 value2) = empty

     --------------------------------------------------------------------------- :: getInsnLabels_extractelement
     getInsnLabels (id = extractelement typ0 value0 , const1) = empty

     --------------------------------------------------------------------------- :: getInsnLabels_insertelement
     getInsnLabels (id = insertelement typ0 value0 , typ1 value1 , const2) = empty

     --------------------------------------------------------------------- :: getInsnLabels_extractvalue
     getInsnLabels (id = extractvalue typ0 value0 , const1) = empty

     ----------------------------------------------------------------------------- :: getInsnLabels_insertvalue
     getInsnLabels (id = insertvalue typ0 value0 , typ value1 , const2) = empty

     -------------------------------------- :: getInsnLabels_alloca
     getInsnLabels (id = alloca typ N) = empty

     ---------------------------------------- :: getInsnLabels_load
     getInsnLabels (id = load typ1 value1) = empty

     ------------------------------------------------ :: getInsnLabels_store
     getInsnLabels (store typ1 value1 , typ2 value2) = empty

     -------------------------------------------------- :: getInsnLabels_trunc
     getInsnLabels (id = trunc typ1 value1 to typ2) = empty 			

     ---------------------------------------------------- :: getInsnLabels_fptrunc
     getInsnLabels (id = fptrunc typ1 value1 to typ2) = empty			

     ----------------------------------------------------- :: getInsnLabels_fptoui
     getInsnLabels (id = fptoui typ1 value1 to typ2) = empty

     ---------------------------------------------------- :: getInsnLabels_fptosi
     getInsnLabels (id = fptosi typ1 value1 to typ2) = empty

     --------------------------------------------------- :: getInsnLabels_uitofp
     getInsnLabels (id = uitofp typ1 value1 to typ2) = empty		

     --------------------------------------------------- :: getInsnLabels_sitofp
     getInsnLabels (id = sitofp typ1 value1 to typ2) = empty		

     ----------------------------------------------------- :: getInsnLabels_ptrtoint
     getInsnLabels (id = ptrtoint typ1 value1 to typ2) = empty 			

     ----------------------------------------------------- :: getInsnLabels_inttoptr
     getInsnLabels (id = inttoptr typ1 value1 to typ2) = empty			

     ---------------------------------------------------- :: getInsnLabels_bitcase
     getInsnLabels (id = bitcast typ1 value1 to typ2) = empty		

     ------------------------------------------------------ :: getInsnLabels_icmp
     getInsnLabels (id = icmp cond typ value1 , value2) = empty

     ------------------------------------------------------ :: getInsnLabels_fcmp
     getInsnLabels (id = fcmp cond typ value1 , value2) = empty

     --------------------------------------------------------- :: getInsnLabels_phi
     getInsnLabels (id = phi typ </ [ idj , lj ] // j />) = </lj//j/>

defns
getBindingTyp_def :: '' ::=
      defn
      getBindingTyp id_binding = opt_typ :: :: getBindingTyp :: ''
      {{ com get [[id_binding]]'s return typ [[opt_typ]] }} by

      getInsnTyp insn = opt_typ
      ---------------------------- :: getBindingTyp_insn
      getBindingTyp insn = opt_typ

      ---------------------------- :: getBindingTyp_g
      getBindingTyp (id = global typ const) = typ

      ---------------------------- :: getBindingTyp_arg
      getBindingTyp (typ id) = typ

      getFdecTyp fdec = typ      
      ---------------------------- :: getBindingTyp_fdec
      getBindingTyp fdec = typ

      ---------------------------- :: getBindingTyp_none
      getBindingTyp none = none

defns
getCallName_def :: '' ::=
     defn
     getCallName insn = id :: :: getCallName :: '' {{ com }} by

     ------------------------------------------------ :: getCallName_def
     getCallName (id = call typ id0 list_param) = id0

defns
getNormalDestFromInvokeInsn_def :: '' ::=
     defn
     getNormalDestFromInvokeInsn insn = l :: :: getNormalDestFromInvokeInsn :: '' 
     {{ com return normal dest of this invoke [[insn]] }} by

     ----------------------------------------------------------------------------------- :: getNormalDestFromInvokeInsn_intro
     getNormalDestFromInvokeInsn (id = invoke typ0 id0 list_param to l1 unwind l2) = l1

defns
getUnwindDestFromInvokeInsn_def :: '' ::=
     defn
     getUnwindDestFromInvokeInsn insn = l :: :: getUnwindDestFromInvokeInsn :: '' 
     {{ com return unwind dest of this invoke [[insn]] }} by

     ----------------------------------------------------------------------------------- :: getUnwindDestFromInvokeInsn_intro
     getUnwindDestFromInvokeInsn (id = invoke typ0 id0 list_param to l1 unwind l2) = l2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 classes                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
isPointerTyp_def :: '' ::=
     defn
     isPointerTyp typ :: :: isPointerTyp :: '' {{ com is [[typ]] a pointer typ }} by

     ------------------------------------------------------------- :: isPointerTyp_intro
     isPointerTyp (typ *) 

defns
isInvokeInsn_def :: '' ::=
     defn
     isInvokeInsn insn :: :: isInvokeInsn :: '' {{ com is [[insn]] an invoke instruction }} by

     ------------------------------------------------------------- :: isInvokeInsn_intro
     isInvokeInsn (id = invoke typ0 id0 list_param to l1 unwind l2) 


defns
isCallInsn_def :: '' ::=
     defn
     isCallInsn insn :: :: isCallInsn :: '' {{ com is [[insn]] a call instruction }} by

     ------------------------------------------------------------- :: isCallInsn_intro
     isCallInsn (id = call typ0 id0 list_param) 


% isValidReturnTyp - Return true if the specified type is valid as a return type. 
% lib/VMCore/Typ
defns
isNotValidReturnTyp_def :: '' ::=
      defn
      isNotValidReturnTyp typ :: :: isNotValidReturnTyp :: '' {{ com [[typ]] isnt a valid return type }} by  
      
      --------------------------------- :: isNotValidReturnTyp_label
      isNotValidReturnTyp label


      --------------------------------- :: isNotValidReturnTyp_metadata
      isNotValidReturnTyp metadata      

defns
isValidReturnTyp_def :: '' ::=
      defn
      isValidReturnTyp typ :: :: isValidReturnTyp :: '' {{ com [[typ]] is a valid return type }} by  

      not isNotValidReturnTyp typ
      --------------------------------- :: isValidReturnTyp_intro
      isValidReturnTyp typ

% isFirstClassTyp - Return true if the type is "first class", meaning it is a valid 
% type for a Value. lib/VMCore/Typ 
defns
isNotFirstClassTyp_def :: '' ::=
      defn
      isNotFirstClassTyp typ :: :: isNotFirstClassTyp :: '' {{ com [[typ]] isnt a first class type }} by

      ---------------------------------- :: isNotFirstClassTyp_void
      isNotFirstClassTyp void

      ---------------------------------- :: isNotFirstClassTyp_opaque
      isNotFirstClassTyp opaque

      --------------------------------------------- :: isNotFirstClassTyp_function
      isNotFirstClassTyp typ ( </ typj // j /> )

defns
isFirstClassTyp_def :: '' ::=
      defn
      isFirstClassTyp typ :: :: isFirstClassTyp :: '' {{ com [[typ]] is a first class type }} by

      not isNotFirstClassTyp typ
      ----------------------------------- :: isFirstClassTyp_intro
      isFirstClassTyp typ

% isValidArgumentTyp - Return true if the specified type is valid as an
% argument type. lib/VMCore/Typ.cpp
defns
isValidArgumentTyp_def :: '' ::=
      defn
      isValidArgumentTyp typ :: :: isValidArgumentTyp :: '' {{ com [[typ]] is a valid argument type }} by
 
      ----------------------------------- :: isValidArgumentTyp_opaque
      isValidArgumentTyp opaque

      isFirstClassTyp typ
      ----------------------------------- :: isValidArgumentTyp_firstclass
      isValidArgumentTyp typ

defns 
isNotValidElementTyp_def :: '' ::=
      defn
      isNotValidElementTyp typ :: :: isNotValidElementTyp :: '' {{ com [[typ]] isnt a valid elment type }} by

      ----------------------------------- :: isNotValidElementTyp_void
      isNotValidElementTyp void

      ----------------------------------- :: isNotValidElementTyp_label
      isNotValidElementTyp label
 
      ----------------------------------- :: isNotValidElementTyp_metadata
      isNotValidElementTyp metadata

      --------------------------------------------- :: isNotValidElementTyp_function
      isNotValidElementTyp typ ( </ typj // j /> )

defns 
isValidElementTyp_def :: '' ::=
      defn
      isValidElementTyp typ :: :: isValidElementTyp :: '' {{ com [[typ]] is a valid elment type }} by

      not isNotValidElementTyp typ
      ----------------------------------- :: isValidElementTyp_intro
      isValidElementTyp typ

defns
isPhiNode_def :: '' ::=
      defn
      isPhiNode insn :: :: isPhiNode :: ''
      {{ com check is [[insn]] is a phi node }} by

      --------------------------------------- :: isPhiNode_intro
      isPhiNode (id = phi typ </ [ idj , lj ] // j />) 
      
defns
isTerminatorInsn_def :: '' ::=
      defn
      isTerminatorInsn insn :: :: isTerminatorInsn :: ''
      {{ com check is [[insn]] is a terminator insn }} by

      --------------------------------------- :: isTerminatorInsn_return
      isTerminatorInsn (ret typ value) 
      
      --------------------------------------- :: isTerminatorInsn_return_void
      isTerminatorInsn (ret void)

      --------------------------------------- :: isTerminatorInsn_br
      isTerminatorInsn (br typ value , l1 , l2)

      --------------------------------------- :: isTerminatorInsn_br_uncond
      isTerminatorInsn (br l)

      ----------------------------------------------------------------- :: isTerminatorInsn_switch
      isTerminatorInsn (switch typ value , l </ [ constj , lj ] // j />)

      ----------------------------------------------------------------- :: isTerminatorInsn_invoke
      isTerminatorInsn (id = invoke typ id0 list_param to l1 unwind l2)

      ----------------------------------------------------------------- :: isTerminatorInsn_unreachable
      isTerminatorInsn unreachable

defns
isBindingFdec_def :: '' ::=
      defn
      isBindingFdec id_binding = fdec :: :: isBindingFdec :: ''
      {{ com is [[id_binding]] a [[fdec]] }} by

      ------------------------- :: isBindingFdec_intro
      isBindingFdec fdec = fdec

defns
isBindingArg_def :: '' ::=
      defn
      isBindingArg id_binding = arg :: :: isBindingArg :: ''
      {{ com is [[id_binding]] an [[arg]] }} by

      ------------------------- :: isBindingArg_intro
      isBindingArg arg = arg

defns
isBindingG_def :: '' ::=
      defn
      isBindingG id_binding = g :: :: isBindingG :: ''
      {{ com is [[id_binding]] a [[g]] }} by

      ------------------------- :: isBindingG_intro
      isBindingG g = g

defns
isBindingInsn_def :: '' ::=
      defn
      isBindingInsn id_binding = insn :: :: isBindingInsn :: ''
      {{ com is [[id_binding]] an [[insn]] }} by

      ------------------------- :: isBindingInsn_intro
      isBindingInsn insn = insn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Eq              						 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
typeEq_def :: '' ::=
       defn
       typ == typ' :: :: typeEq :: ''
       {{ com check if [[typ]] equals to [[typ']] }} by

       N == N'
       ------------------------- :: typeEq_int
       int N == int N'

       ------------------------- :: typeEq_float
       float == float

       ------------------------- :: typeEq_double
       double == double

       ------------------------- :: typeEq_fp128
       fp128 == fp128

       ------------------------- :: typeEq_void       
       void == void

       ------------------------- :: typeEq_label
       label == label

       ------------------------- :: typeEq_metadata
       metadata == metadata

       ------------------------- :: typeEq_opaque
       opaque == opaque

       N == N'
       typ == typ'
       --------------------------------- :: typeEq_array
       [ N * typ ] == [ N' * typ' ] 

       N == N'
       typ == typ'
       --------------------------------- :: typeEq_vector
       < N * typ > == < N' * typ' > 

       typ == typ'
       --------------------------------- :: typeEq_pointer
       typ * == typ' *

       typ == typ'
       </ typj == typ'j // j />
       ----------------------------------------------------- :: typeEq_function
       typ ( </ typj // j /> ) == typ' ( </ typ'j // j /> )  

       </ typj == typ'j // j />
       ----------------------------------------------------- :: typeEq_structure
       { </ typj // j /> } == { </ typ'j // j /> }  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Check Terminator						 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnsEndsWithTerminatorInsn_def :: '' ::=
      defn
      insnsEndsWithTerminatorInsn list_insn :: :: insnsEndsWithTerminatorInsn :: ''
      {{ com [[list_insn]] ends with terminator insnruction }} by
      
      insnsGetLast list_insn = insn
      isTerminatorInsn insn
      ----------------------------------------------- :: insnsEndsWithTerminatorInsn_intro
      insnsEndsWithTerminatorInsn list_insn 
    
defns
insnsDoesntContainTerminatorInsn_def :: '' ::=
      defn
      insnsDoesntContainTerminatorInsn list_insn :: :: insnsDoesntContainTerminatorInsn :: ''
      {{ com [[list_insn]] doesnt contain terminator insnruction }} by

      --------------------------------------- :: insnsDoesntContainTerminatorInsn_nil
      insnsDoesntContainTerminatorInsn []

      insnsDoesntContainTerminatorInsn list_insn
      not isTerminatorInsn insn
      ----------------------------------------------- :: insnsDoesntContainTerminatorInsn_cons
      insnsDoesntContainTerminatorInsn list_insn , insn

defns
insnsChecksTerminatorInsn_def :: '' ::=
      defn
      insnsChecksTerminatorInsn list_insn :: :: insnsChecksTerminatorInsn :: ''
      {{ com check if [[list_insn]] is well-formed }} by

      insnsEndsWithTerminatorInsn list_insn
      insnsRemovesLast list_insn = list_insn'    
      insnsDoesntContainTerminatorInsn list_insn'
      ----------------------------------------------- :: insnsChecksTerminatorInsn_intro
      insnsChecksTerminatorInsn list_insn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%        Check Phi							%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnsStartsWithPhiNode_def :: '' ::=
      defn
      insnsStartsWithPhiNode list_insn :: :: insnsStartsWithPhiNode :: ''
      {{ com [[list_insn]] starts with phi insnruction }} by

      ----------------------------------------------- :: insnsStartsWithPhiNode_nil
      insnsStartsWithPhiNode []

      insnsStartsWithPhiNode list_insn      
      isPhiNode insn
      ---------------------------------------------------------------------- :: insnsStartsWithPhiNode_cons_phi
      insnsStartsWithPhiNode (list_insn, insn)
      
      insnsDoesntContainPhiNode list_insn      
      not isPhiNode insn
      ---------------------------------------------------------------------- :: insnsStartsWithPhiNode_cons_nophi
      insnsStartsWithPhiNode (list_insn, insn)

      defn
      insnsDoesntContainPhiNode list_insn :: :: insnsDoesntContainPhiNode :: ''
      {{ com [[list_insn]] doesnt contain phi insnruction }} by

      --------------------------------------- :: insnsDoesntContainPhiNode_nil
      insnsDoesntContainPhiNode []

      insnsDoesntContainPhiNode list_insn
      not isPhiNode insn 
      ----------------------------------------------------- :: insnsDoesntContainPhiNode_cons
      insnsDoesntContainPhiNode list_insn , insn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get block from label                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getBlockAtLableFromBlocks_def :: '' ::=
      defn 
      getBlockAtLableFromBlocks list_block l = opt_block :: :: getBlockAtLableFromBlocks :: ''
      {{ com [[opt_block]] is of label [[l]] in [[list_block]] }} by

      ---------------------------------------------------- :: getBlockAtLableFromBlocks_nil
      getBlockAtLableFromBlocks [] l = none

      l1 == l2 
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_true
      getBlockAtLableFromBlocks (list_block, (l1 list_insn1)) l2 = l1 list_insn1

      not l1 == l2
      getBlockAtLableFromBlocks list_block l2 = opt_block
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_rec1
      getBlockAtLableFromBlocks (list_block, (l1 list_insn1)) l2 = opt_block
			      
    
defns
getBlockAtLableFromFdef_def :: '' ::=
      defn
      getBlockAtLableFromFdef fdef l = opt_block :: :: getBlockAtLableFromFdef :: ''
      {{ com [[opt_block]] is of label [[l]] in [[fdef]] }} by

      getBlockAtLableFromBlocks list_block l = opt_block
      ---------------------------------------------------- :: getBlockAtLableFromFdef_intro
      getBlockAtLableFromFdef (define fheader { list_block }) l = opt_block


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         phi                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getPhiNodesFromListInsn_def :: '' ::=
      defn
      getPhiNodesFromListInsn list_insn = list_insn' :: :: getPhiNodesFromListInsn :: ''
      {{ com [[list_insn']] are the Phi nodes in [[list_insn]] }} by
 
      -------------------------------- :: getPhiNodesFromListInsn_nil
      getPhiNodesFromListInsn [] = []

      getPhiNodesFromListInsn list_insn = list_insn'
      isPhiNode insn       
      --------------------------------------------------- :: getPhiNodesFromListInsn_rec_true
      getPhiNodesFromListInsn (list_insn, insn) = list_insn', insn

      getPhiNodesFromListInsn list_insn = list_insn'
      not isPhiNode insn       
      --------------------------------------------------- :: getPhiNodesFromListInsn_rec_false
      getPhiNodesFromListInsn (list_insn, insn) = list_insn'

defns
getPhiNodesFromBlock_def :: '' ::=
      defn
      getPhiNodesFromBlock block = list_insn :: :: getPhiNodesFromBlock :: ''
      {{ com [[list_insn]] are the Phi nodes in [[block]] }} by
 
      getInsnsFromBlock block = list_insn
      getPhiNodesFromListInsn list_insn = list_insn'
      ---------------------------------------- :: getPhiNodesFromBlocks_intro
      getPhiNodesFromBlock block = list_insn'

defns
getLabelsFromPhiNode_def :: '' ::=
      defn
      getLabelsFromPhiNode insn = ls :: :: getLabelsFromPhiNode :: ''
      {{ com [[ls]] is the set of labels from phi [[insn]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNode_intro
      getLabelsFromPhiNode (id = phi typ </ [ idj , lj ] // j />) = </lj//j/> 
 
defns
getLabelsFromPhiNodes_def :: '' ::=
      defn
      getLabelsFromPhiNodes list_insn = ls :: :: getLabelsFromPhiNodes :: ''
      {{ com [[ls]] is the set of labels from phis [[list_insn]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_nil
      getLabelsFromPhiNodes [] = empty

      getLabelsFromPhiNodes list_insn = ls
      getLabelsFromPhiNode insn = ls'
      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_cons
      getLabelsFromPhiNodes (list_insn, insn) = ls ; ls' 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         Uniq                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnNotinInsns_def :: '' ::=
     defn
     insnNotinInsns insn list_insn :: :: insnNotinInsns :: ''
     {{ com the ID of [[insn]] isnt in Ids of [[list_insn]] }} by

     getInsnID insn = none
     ------------------------------ :: insnNotinInsns_none
     insnNotinInsns insn list_insn    	      

     getInsnID insn = id
     ----------------------- :: insnNotinInsns_some_nil
     insnNotinInsns insn []    	      

     getInsnID insn = id
     getInsnID insn' = none
     insnNotinInsns insn list_insn'
     ------------------------------------ :: insnNotinInsns_some_none_cons
     insnNotinInsns insn (list_insn', insn')    	      

     getInsnID insn = id
     getInsnID insn' = id'
     not id == id'
     insnNotinInsns insn list_insn'
     ------------------------------------ :: insnNotinInsns_some_cons
     insnNotinInsns insn (list_insn', insn')    	      

defns
uniqInsns_def :: '' ::=
     defn
     uniqInsns list_insn :: :: uniqInsns :: ''
     {{ com IDs in [[list_insn]] are uniq }} by

     --------------------- :: uniqInsns_nil
     uniqInsns []

     insnNotinInsns insn list_insn
     uniqInsns list_insn
     ---------------------------- :: uniqInsns_cons
     uniqInsns (list_insn, insn)


defns
getInsnsFromBlocks_def :: '' ::=
     defn
     getInsnsFromBlocks list_block = list_insn :: :: getInsnsFromBlocks :: ''
     {{ com the instructions of [[list_block]] are [[list_insn]] }} by

     ---------------------------- :: getInsnsFromBlocks_nil
     getInsnsFromBlocks [] = []

     getInsnsFromBlocks list_block = list_insn
     getInsnsFromBlock block = list_insn' 
     ------------------------------------------------- :: getInsnsFromBlocks_cons
     getInsnsFromBlocks (list_block, block) = list_insn;list_insn'

defns
blockNotinBlocks_def :: '' ::=
     defn
     blockNotinBlocks block list_block :: :: blockNotinBlocks :: ''
     {{ com the label of [[block]] isnt in labels of [[list_block]] }} by

     ------------------------------------ :: blockNotinBlocks_none
     blockNotinBlocks list_insn list_block    	     

     --------------------------------- :: blockNotinBlocks_some_nil
     blockNotinBlocks (l list_insn) []    	      

     blockNotinBlocks (l list_insn) list_block'
     ------------------------------------ :: blockNotinBlocks_some_none_cons
     blockNotinBlocks (l list_insn) (list_block', list_insn')    	      

     not l == l'
     blockNotinBlocks (l list_insn) list_block'
     ------------------------------------ :: blockNotinBlocks_some_cons
     blockNotinBlocks (l list_insn) (list_block', l' list_insn')    	      


defns 
uniqLabels_def :: '' ::=
     defn
     uniqLabels list_block :: :: uniqLabels :: ''
     {{ com the labels in [[list_block]] are uniq}} by

     --------------------- :: uniqLabels_nil
     uniqLabels []

     blockNotinBlocks block list_block
     uniqLabels list_block
     ---------------------------- :: uniqLabels_cons
     uniqLabels (list_block, block)

defns
uniqBlocks_def :: '' ::=
     defn
     uniqBlocks list_block :: :: uniqBlocks :: ''
     {{ com the IDs and labels in [[list_block]] are uniq}} by
     
     getInsnsFromBlocks list_block = list_insn
     uniqInsns list_insn
     uniqLabels list_block
     ------------------------------------------------ :: uniqBlocks_intro
     uniqBlocks list_block

defns
uniqFdef_def :: '' ::=
     defn
     uniqFdef fdef :: :: uniqFdef :: ''
     {{ com the IDs in [[fdef]] are uniq}} by
   
     uniqBlocks list_block	
     ------------------------------------------------ :: uniqFdef_intro
     uniqFdef (define fheader { list_block })

defns
getProductID_def :: '' ::=
     defn 
     getProductID product = id :: :: getProductID :: ''
     {{ com return [[id]] from [[product]] }} by

     getGID g = id
     ------------------------------------ :: getProductID_fdec_g
     getProductID g = id

     getFdecID fdec = id
     ------------------------------------ :: getProductID_fdec
     getProductID fdec = id
   
     ------------------------------------ :: getProductID_fdef
     getProductID fdef = id

     getNamedtID namedt = id
     ------------------------------------ :: getProductID_namedt
     getProductID namedt = id

defns
productNotinProducts_def :: '' ::=
     defn
     productNotinProducts product list_product :: :: productNotinProducts :: ''
     {{ com the ID of [[product]] isnt in Ids of [[list_product]] }} by

     ------------------------------- :: productNotinProducts_nil
     productNotinProducts product []    	      

     getProductID product = id
     getProductID product' = id'
     not id == id'
     productNotinProducts product list_product'
     ------------------------------------ :: productNotinProducts_cons
     productNotinProducts product (list_product', product')    	      

defns
uniqProduct_def :: '' ::=
     defn 
     uniqProduct product :: :: uniqProduct :: ''
     {{ com ids in [[product]] are uniq }} by

     ------------------------------------ :: uniqProduct_g
     uniqProduct g 

     ------------------------------------ :: uniqProduct_fdec
     uniqProduct fdec 

     uniqFdef fdef     
     ------------------------------------ :: uniqProduct_fdef
     uniqProduct fdef

     ------------------------------------ :: uniqProduct_namedt
     uniqProduct namedt


defns
uniqProducts_def :: '' ::=
     defn
     uniqProducts list_product :: :: uniqProducts :: ''
     {{ com IDs in [[list_product]] are uniq }} by

     --------------------- :: uniqProducts_nil
     uniqProducts []

     productNotinProducts product list_product
     uniqProducts list_product
     uniqProduct product
     -------------------------------------- :: uniqProducts_cons
     uniqProducts (list_product, product)

defns 
uniqModule_def :: '' ::=
     defn
     uniqModule module :: :: uniqModule :: ''
     {{ com IDs in [[module]] are uniq }} by
       
     module <-> list_product
     uniqProducts list_product
     ---------------------------- :: uniqModule_intro
     uniqModule module

defns 
uniqModules_def :: '' ::=
     defn
     uniqModules list_module :: :: uniqModules :: ''
     {{ com IDs in [[list_module]] are uniq }} by
      
     ---------------------- :: uniqModules_nil
     uniqModules []

     uniqModules list_module
     uniqModule module
     ----------------------------------- :: uniqModules_cons
     uniqModules (list_module, module)

defns
uniqSystem_def :: '' ::=
     defn
     uniqSystem system :: :: uniqSystem :: ''
     {{ com IDs in [[system]] are uniq }} by

     system <-> list_module
     uniqModules list_module
     --------------------------- :: uniqSystem_intro
     uniqSystem system

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    inclusion                                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnInBlock_def :: '' ::=
     defn
     insnInBlock insn block :: :: insnInBlock :: ''
     {{ com [[block]] includes [[insn]] }} by

     getInsnsFromBlock block = list_insn
     insn in list_insn
     ------------------------------------------------- :: insnInBlock_intro
     insnInBlock insn block

defns
argInFheader_def :: '' ::=
     defn
     argInFheader arg fheader :: :: argInFheader :: ''
     {{ com [[fheader]] includes [[arg]] }} by

     arg in list_arg
     ------------------------------------- :: argInFheader_intro
     argInFheader arg (typ id ( list_arg )) 
 
defns
argInFdec_def :: '' ::=
     defn
     argInFdec arg fdec :: :: argInFdec :: ''
     {{ com [[fdec]] includes [[arg]] }} by

     argInFheader arg fheader
     ------------------------------------------------- :: argInFdec_intro
     argInFdec arg (declare fheader)

defns
argInFdef_def :: '' ::=
     defn
     argInFdef arg fdef :: :: argInFdef :: ''
     {{ com [[fdef]] includes [[arg]] }} by

     argInFheader arg fheader
     ------------------------------------------------- :: argInFdef_intro
     argInFdef arg (define fheader {list_block})

defns
blockInFdef_def :: '' ::=
     defn
     blockInFdef block fdef :: :: blockInFdef :: ''
     {{ com [[fdef]] includes [[block]] }} by

     block in list_block
     ------------------------------------------------- :: blockInFdef_intro
     blockInFdef block (define fheader {list_block})

defns
productInSystemModule_info :: '' ::=
     defn
     product in system , module_info :: :: productInSystemModule :: ''
     {{ com [[system]] [[module_info]] includes [[product]] }} by

     module in system
     product in module
     ------------------------------------------------------- :: productInSystemModule_intro
     product in system , (module, usedef_insn, usedef_block)   

defns
blockInSystemModuleFdef_info :: '' ::=
     defn
     block in system , module_info , fdef_info :: :: blockInSystemModuleFdef :: ''
     {{ com [[system]] [[module_info]] [[fdef_info]] includes [[block]] }} by

     blockInFdef block fdef
     fdef in system , module_info
     ------------------------------------------------------- :: blockInSystemModuleFdef_intro
     block in system , module_info , (fdef, dt) 

defns
insnInSystemModuleFdefBlock_info :: '' ::=
     defn
     insn in system , module_info , fdef_info , block :: :: insnInSystemModuleFdefBlock :: ''
     {{ com [[system]] [[module_info]] [[fdef_info]] [[block]] includes [[insn]] }} by

     insnInBlock insn block
     block in system , module_info , fdef_info
     ------------------------------------------------------- :: insnInSystemModuleFdefBlock_intro
     insn in system , module_info , fdef_info , block 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      ID type lookup                                     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupTypViaIDFromInsn_def :: '' ::=
     defn
     lookupTypViaIDFromInsn insn id = opt_typ :: :: lookupTypViaIDFromInsn :: ''
     {{ com look up [[id]]'s typ from [[insn]] }} by

     getInsnTyp insn = none \/ getInsnID insn = none
     ------------------------------------------------ :: lookupTypViaIDFromInsn_none
     lookupTypViaIDFromInsn insn id = none

     getInsnTyp insn = typ 
     getInsnID insn = id'
     id == id'
     -------------------------------------- :: lookupTypViaIDFromInsn_true
     lookupTypViaIDFromInsn insn id = typ

     getInsnTyp insn = typ 
     getInsnID insn = id'
     not id == id'
     --------------------------------------- :: lookupTypViaIDFromInsn_false
     lookupTypViaIDFromInsn insn id = none

defns
lookupTypViaIDFromInsns_def :: '' ::=
     defn
     lookupTypViaIDFromInsns list_insn id = opt_typ :: :: lookupTypViaIDFromInsns :: ''
     {{ com look up [[id]]'s typ from [[list_insn]] }} by

     ------------------------------------- :: lookupTypViaIDFromInsns_none
     lookupTypViaIDFromInsns [] id = none

     lookupTypViaIDFromInsn insn id = typ
     --------------------------------------------------- :: lookupTypViaIDFromInsns_true
     lookupTypViaIDFromInsns (list_insn, insn) id = typ

     lookupTypViaIDFromInsn insn id = none
     lookupTypViaIDFromInsns list_insn id = opt_typ
     --------------------------------------------------- :: lookupTypViaIDFromInsns_false
     lookupTypViaIDFromInsns (list_insn, insn) id = opt_typ

defns
lookupTypViaIDFromBlock_def :: '' ::=
     defn
     lookupTypViaIDFromBlock block id = opt_typ :: :: lookupTypViaIDFromBlock :: ''
     {{ com look up [[id]]'s typ from [[block]] }} by

     getInsnsFromBlock block = list_insn
     lookupTypViaIDFromInsns list_insn id = opt_typ
     ----------------------------------------------- :: lookupTypViaIDFromBlock_intro
     lookupTypViaIDFromBlock block id = opt_typ

defns
lookupTypViaIDFromBlocks_def :: '' ::=
     defn
     lookupTypViaIDFromBlocks list_block id = opt_typ :: :: lookupTypViaIDFromBlocks :: ''
     {{ com look up [[id]]'s typ from [[list_block]] }} by

     ---------------------------------------------- :: lookupTypViaIDFromBlocks_nil
     lookupTypViaIDFromBlocks [] id = none

     lookupTypViaIDFromBlock block id = typ
     ------------------------------------------------------ :: lookupTypViaIDFromBlocks_true
     lookupTypViaIDFromBlocks (list_block, block) id = typ

     lookupTypViaIDFromBlock block id = none
     lookupTypViaIDFromBlocks list_block id = opt_typ
     ---------------------------------------------------------- :: lookupTypViaIDFromBlocks_false
     lookupTypViaIDFromBlocks (list_block, block) id = opt_typ

defns
lookupTypViaIDFromFdef_def :: '' ::=
     defn
     lookupTypViaIDFromFdef fdef id = opt_typ :: :: lookupTypViaIDFromFdef :: ''
     {{ com look up [[id]]'s typ from [[fdef]] }} by

     lookupTypViaIDFromBlocks list_block id = opt_typ
     -------------------------------------------------------------------- :: lookupTypViaIDFromFdef_intro
     lookupTypViaIDFromFdef (define fheader {list_block}) id = opt_typ

defns
lookupTypViaIDFromProduct_def :: '' ::=
     defn
     lookupTypViaIDFromProduct product id = opt_typ :: :: lookupTypViaIDFromProduct :: ''
     {{ com look up [[id]]'s typ from [[product]] }} by

     id == id'
     ------------------------------------------------------------- :: lookupTypViaIDFromProduct_g_true
     lookupTypViaIDFromProduct (id = global typ const) id' = typ 

     not id == id'
     ------------------------------------------------------------- :: lookupTypViaIDFromProduct_g_false
     lookupTypViaIDFromProduct (id = global typ const) id' = none

     -------------------------------------- :: lookupTypViaIDFromProduct_fdec
     lookupTypViaIDFromProduct fdec id = none

     -------------------------------------- :: lookupTypViaIDFromProduct_namedt
     lookupTypViaIDFromProduct namedt id = none

     lookupTypViaIDFromFdef fdef id = opt_typ
     ------------------------------------------------------------------- :: lookupTypViaIDFromProduct_fdef
     lookupTypViaIDFromProduct fdef id = opt_typ

defns
lookupTypViaIDFromProducts_def :: '' ::=
     defn
     lookupTypViaIDFromProducts list_product id = opt_typ :: :: lookupTypViaIDFromProducts :: ''
     {{ com look up [[id]]'s typ from [[list_product]] }} by

     ---------------------------------------- :: lookupTypViaIDFromProducts_nil
     lookupTypViaIDFromProducts [] id = none

     lookupTypViaIDFromProduct product id = typ 
     ------------------------------------------------------------- :: lookupTypViaIDFromProducts_true
     lookupTypViaIDFromProducts (list_product, product) id = typ
     
     lookupTypViaIDFromProduct product id = none
     lookupTypViaIDFromProducts list_product id = opt_typ
     ---------------------------------------------------------------- :: lookupTypViaIDFromProducts_false
     lookupTypViaIDFromProducts (list_product, product) id = opt_typ

defns
lookupTypViaIDFromModule_def :: '' ::=
     defn
     lookupTypViaIDFromModule module id = opt_typ :: :: lookupTypViaIDFromModule :: ''
     {{ com look up [[id]]'s typ from [[module]] }} by

     module <-> list_product
     lookupTypViaIDFromProducts list_product id = opt_typ
     -------------------------------------------------------- :: lookupTypViaIDFromModule_intro
     lookupTypViaIDFromModule module id = opt_typ
     
defns
lookupTypViaIDFromModules_def :: '' ::=
     defn
     lookupTypViaIDFromModules list_module id = opt_typ :: :: lookupTypViaIDFromModules :: ''
     {{ com look up [[id]]'s typ from [[list_module]] }} by

     ---------------------------------------- :: lookupTypViaIDFromModules_nil
     lookupTypViaIDFromModules [] id = none

     lookupTypViaIDFromModule module id = typ
     ------------------------------------------------------------- :: lookupTypViaIDFromModules_true
     lookupTypViaIDFromModules (list_module, module) id = typ

     lookupTypViaIDFromModule module id = none
     lookupTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------------------- :: lookupTypViaIDFromModules_false
     lookupTypViaIDFromModules (list_module, module) id = opt_typ

defns
lookupTypViaIDFromSystem_def :: '' ::=
     defn
     lookupTypViaIDFromSystem system id = opt_typ :: :: lookupTypViaIDFromSystem :: ''
     {{ com look up [[id]]'s typ from [[system]] }} by

     system <-> list_module
     lookupTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------- :: lookupTypViaIDFromSystem_intro
     lookupTypViaIDFromSystem system id = opt_typ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Fun type lookup                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupFdecTypViaIDFromProduct_def :: '' ::=
     defn
     lookupFdecTypViaIDFromProduct product id = opt_typ :: :: lookupFdecTypViaIDFromProduct :: ''
     {{ com look up [[id]]'s typ from [[product]] }} by

     ------------------------------------------- :: lookupFdecTypViaIDFromProduct_g
     lookupFdecTypViaIDFromProduct g id = none

     ------------------------------------------------ :: lookupFdecTypViaIDFromProduct_namedt
     lookupFdecTypViaIDFromProduct namedt id = none

     getFdecID fdec = id'
     id == id'
     getFdecTyp fdec = typ
     ------------------------------------------------ :: lookupFdecTypViaIDFromProduct_fdec_true
     lookupFdecTypViaIDFromProduct fdec id = typ

     getFdecID fdec = id'
     not id == id'
     ------------------------------------------------ :: lookupFdecTypViaIDFromProduct_fdec_false
     lookupFdecTypViaIDFromProduct fdec id = none

     ------------------------------------------------ :: lookupFdecTypViaIDFromProduct_fdef
     lookupFdecTypViaIDFromProduct fdef id = none

defns
lookupFdefTypViaIDFromProduct_def :: '' ::=
     defn
     lookupFdefTypViaIDFromProduct product id = opt_typ :: :: lookupFdefTypViaIDFromProduct :: ''
     {{ com look up [[id]]'s typ from [[product]] }} by

     ------------------------------------------- :: lookupFdefTypViaIDFromProduct_g
     lookupFdefTypViaIDFromProduct g id = none

     ------------------------------------------------ :: lookupFdefTypViaIDFromProduct_namedt
     lookupFdefTypViaIDFromProduct namedt id = none

     getFdefID fdef = id'
     id == id'
     getFdefTyp fdef = typ
     ------------------------------------------------ :: lookupFdefTypViaIDFromProduct_fdef_true
     lookupFdefTypViaIDFromProduct fdef id = typ

     getFdefID fdef = id'
     not id == id'
     ------------------------------------------------ :: lookupFdefTypViaIDFromProduct_fdef_false
     lookupFdefTypViaIDFromProduct fdef id = none

     ------------------------------------------------ :: lookupFdefTypViaIDFromProduct_fdec
     lookupFdefTypViaIDFromProduct fdec id = none

defns
lookupFdecTypViaIDFromProducts_def :: '' ::=
     defn
     lookupFdecTypViaIDFromProducts list_product id = opt_typ :: :: lookupFdecTypViaIDFromProducts :: ''
     {{ com look up [[id]]'s fdec typ from [[list_product]] }} by

     ---------------------------------------- :: lookupFdecTypViaIDFromProducts_nil
     lookupFdecTypViaIDFromProducts [] id = none

     lookupFdecTypViaIDFromProduct product id = typ 
     ------------------------------------------------------------- :: lookupFdecTypViaIDFromProducts_true
     lookupFdecTypViaIDFromProducts (list_product, product) id = typ
     
     lookupFdecTypViaIDFromProduct product id = none
     lookupFdecTypViaIDFromProducts list_product id = opt_typ
     ---------------------------------------------------------------- :: lookupFdecTypViaIDFromProducts_false
     lookupFdecTypViaIDFromProducts (list_product, product) id = opt_typ

defns
lookupFdefTypViaIDFromProducts_def :: '' ::=
     defn
     lookupFdefTypViaIDFromProducts list_product id = opt_typ :: :: lookupFdefTypViaIDFromProducts :: ''
     {{ com look up [[id]]'s fdef typ from [[list_product]] }} by

     ---------------------------------------- :: lookupFdefTypViaIDFromProducts_nil
     lookupFdefTypViaIDFromProducts [] id = none

     lookupFdefTypViaIDFromProduct product id = typ 
     ------------------------------------------------------------- :: lookupFdefTypViaIDFromProducts_true
     lookupFdefTypViaIDFromProducts (list_product, product) id = typ
     
     lookupFdefTypViaIDFromProduct product id = none
     lookupFdefTypViaIDFromProducts list_product id = opt_typ
     ---------------------------------------------------------------- :: lookupFdefTypViaIDFromProducts_false
     lookupFdefTypViaIDFromProducts (list_product, product) id = opt_typ

defns
lookupFdecTypViaIDFromModule_def :: '' ::=
     defn
     lookupFdecTypViaIDFromModule module id = opt_typ :: :: lookupFdecTypViaIDFromModule :: ''
     {{ com look up [[id]]'s fdec typ from [[module]] }} by

     module <-> list_product
     lookupFdecTypViaIDFromProducts list_product id = opt_typ
     -------------------------------------------------------- :: lookupFdecTypViaIDFromModule_intro
     lookupFdecTypViaIDFromModule module id = opt_typ
     
defns
lookupFdefTypViaIDFromModule_def :: '' ::=
     defn
     lookupFdefTypViaIDFromModule module id = opt_typ :: :: lookupFdefTypViaIDFromModule :: ''
     {{ com look up [[id]]'s fdef typ from [[module]] }} by

     module <-> list_product
     lookupFdefTypViaIDFromProducts list_product id = opt_typ
     -------------------------------------------------------- :: lookupFdefTypViaIDFromModule_intro
     lookupFdefTypViaIDFromModule module id = opt_typ

defns
lookupFdecTypViaIDFromModules_def :: '' ::=
     defn
     lookupFdecTypViaIDFromModules list_module id = opt_typ :: :: lookupFdecTypViaIDFromModules :: ''
     {{ com look up [[id]]'s fdec typ from [[list_module]] }} by

     ---------------------------------------- :: lookupFdecTypViaIDFromModules_nil
     lookupFdecTypViaIDFromModules [] id = none

     lookupFdecTypViaIDFromModule module id = typ
     ------------------------------------------------------------- :: lookupFdecTypViaIDFromModules_true
     lookupFdecTypViaIDFromModules (list_module, module) id = typ

     lookupFdecTypViaIDFromModule module id = none
     lookupFdecTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------------------- :: lookupFdecTypViaIDFromModules_false
     lookupFdecTypViaIDFromModules (list_module, module) id = opt_typ

defns
lookupFdefTypViaIDFromModules_def :: '' ::=
     defn
     lookupFdefTypViaIDFromModules list_module id = opt_typ :: :: lookupFdefTypViaIDFromModules :: ''
     {{ com look up [[id]]'s fdef typ from [[list_module]] }} by

     ---------------------------------------- :: lookupFdefTypViaIDFromModules_nil
     lookupFdefTypViaIDFromModules [] id = none

     lookupFdefTypViaIDFromModule module id = typ
     ------------------------------------------------------------- :: lookupFdefTypViaIDFromModules_true
     lookupFdefTypViaIDFromModules (list_module, module) id = typ

     lookupFdefTypViaIDFromModule module id = none
     lookupFdefTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------------------- :: lookupFdefTypViaIDFromModules_false
     lookupFdefTypViaIDFromModules (list_module, module) id = opt_typ

defns
lookupFdecTypViaIDFromSystem_def :: '' ::=
     defn
     lookupFdecTypViaIDFromSystem system id = opt_typ :: :: lookupFdecTypViaIDFromSystem :: ''
     {{ com look up [[id]]'s dec typ from [[system]] }} by

     system <-> list_module
     lookupFdecTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------- :: lookupFdecTypViaIDFromSystem_intro
     lookupFdecTypViaIDFromSystem system id = opt_typ

defns
lookupFdefTypViaIDFromSystem_def :: '' ::=
     defn
     lookupFdefTypViaIDFromSystem system id = opt_typ :: :: lookupFdefTypViaIDFromSystem :: ''
     {{ com look up [[id]]'s def typ from [[system]] }} by

     system <-> list_module
     lookupFdefTypViaIDFromModules list_module id = opt_typ
     ---------------------------------------------------- :: lookupFdefTypViaIDFromSystem_intro
     lookupFdefTypViaIDFromSystem system id = opt_typ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Fun lookup via ID                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupFdecViaIDFromProduct_def :: '' ::=
     defn
     lookupFdecViaIDFromProduct product id = opt_fdec :: :: lookupFdecViaIDFromProduct :: ''
     {{ com look up [[id]]'s fdec from [[product]] }} by

     ------------------------------------------- :: lookupFdecViaIDFromProduct_g
     lookupFdecViaIDFromProduct g id = none

     ------------------------------------------------ :: lookupFdecViaIDFromProduct_namedt
     lookupFdecViaIDFromProduct namedt id = none

     getFdecID fdec = id'
     id == id'
     ------------------------------------------------ :: lookupFdecViaIDFromProduct_fdec_true
     lookupFdecViaIDFromProduct fdec id = fdec

     getFdecID fdec = id'
     not id == id'
     ------------------------------------------------ :: lookupFdecViaIDFromProduct_fdec_false
     lookupFdecViaIDFromProduct fdec id = none

     ------------------------------------------------ :: lookupFdecViaIDFromProduct_fdef
     lookupFdecViaIDFromProduct fdef id = none

defns
lookupFdecViaIDFromProducts_def :: '' ::=
     defn
     lookupFdecViaIDFromProducts list_product id = opt_fdec :: :: lookupFdecViaIDFromProducts :: ''
     {{ com look up [[id]]'s fdec from [[list_product]] }} by

     ---------------------------------------- :: lookupFdecViaIDFromProducts_nil
     lookupFdecViaIDFromProducts [] id = none

     lookupFdecViaIDFromProduct product id = fdec  
     ------------------------------------------------------------- :: lookupFdecViaIDFromProducts_true
     lookupFdecViaIDFromProducts (list_product, product) id = fdec
     
     lookupFdecViaIDFromProduct product id = none
     lookupFdecViaIDFromProducts list_product id = opt_fdec
     ---------------------------------------------------------------- :: lookupFdecViaIDFromProducts_false
     lookupFdecViaIDFromProducts (list_product, product) id = opt_fdec

defns
lookupFdecViaIDFromModule_def :: '' ::=
     defn
     lookupFdecViaIDFromModule module id = opt_fdec :: :: lookupFdecViaIDFromModule :: ''
     {{ com look up [[id]]'s fdec from [[module]] }} by

     module <-> list_product
     lookupFdecViaIDFromProducts list_product id = opt_fdec
     -------------------------------------------------------- :: lookupFdecViaIDFromModule_intro
     lookupFdecViaIDFromModule module id = opt_fdec
     
defns
lookupFdecViaIDFromModules_def :: '' ::=
     defn
     lookupFdecViaIDFromModules list_module id = opt_fdec :: :: lookupFdecViaIDFromModules :: ''
     {{ com look up [[id]]'s fdec from [[list_module]] }} by

     ---------------------------------------- :: lookupFdecViaIDFromModules_nil
     lookupFdecViaIDFromModules [] id = none

     lookupFdecViaIDFromModule module id = fdec
     ------------------------------------------------------------- :: lookupFdecViaIDFromModules_true
     lookupFdecViaIDFromModules (list_module, module) id = fdec

     lookupFdecViaIDFromModule module id = none
     lookupFdecViaIDFromModules list_module id = opt_fdec
     ---------------------------------------------------------------- :: lookupFdecViaIDFromModules_false
     lookupFdecViaIDFromModules (list_module, module) id = opt_fdec

defns
lookupFdecViaIDFromSystem_def :: '' ::=
     defn
     lookupFdecViaIDFromSystem system id = opt_fdec :: :: lookupFdecViaIDFromSystem :: ''
     {{ com look up [[id]]'s dec from [[system]] }} by

     system <-> list_module
     lookupFdecViaIDFromModules list_module id = opt_fdec
     ---------------------------------------------------- :: lookupFdecViaIDFromSystem_intro
     lookupFdecViaIDFromSystem system id = opt_fdec

defns
lookupFdefViaIDFromProduct_def :: '' ::=
     defn
     lookupFdefViaIDFromProduct product id = opt_fdef :: :: lookupFdefViaIDFromProduct :: ''
     {{ com look up [[id]]'s fdef from [[product]] }} by

     ------------------------------------------- :: lookupFdefViaIDFromProduct_g
     lookupFdefViaIDFromProduct g id = none

     ------------------------------------------------ :: lookupFdefViaIDFromProduct_namedt
     lookupFdefViaIDFromProduct namedt id = none

     ------------------------------------------------ :: lookupFdefViaIDFromProduct_fdec
     lookupFdefViaIDFromProduct fdec id = none

     getFdefID fdef = id'
     id == id'
     ------------------------------------------------ :: lookupFdefViaIDFromProduct_fdef_true
     lookupFdefViaIDFromProduct fdec id = fdef

     getFdefID fdef = id'
     not id == id'
     ------------------------------------------------ :: lookupFdefViaIDFromProduct_fdef_false
     lookupFdefViaIDFromProduct fdec id = none

defns
lookupFdefViaIDFromProducts_def :: '' ::=
     defn
     lookupFdefViaIDFromProducts list_product id = opt_fdef :: :: lookupFdefViaIDFromProducts :: ''
     {{ com look up [[id]]'s fdef from [[list_product]] }} by

     ---------------------------------------- :: lookupFdefViaIDFromProducts_nil
     lookupFdefViaIDFromProducts [] id = none

     lookupFdefViaIDFromProduct product id = fdef  
     ------------------------------------------------------------- :: lookupFdefViaIDFromProducts_true
     lookupFdefViaIDFromProducts (list_product, product) id = fdef
     
     lookupFdefViaIDFromProduct product id = none
     lookupFdefViaIDFromProducts list_product id = opt_fdef
     ---------------------------------------------------------------- :: lookupFdefViaIDFromProducts_false
     lookupFdefViaIDFromProducts (list_product, product) id = opt_fdef

defns
lookupFdefViaIDFromModule_def :: '' ::=
     defn
     lookupFdefViaIDFromModule module id = opt_fdef :: :: lookupFdefViaIDFromModule :: ''
     {{ com look up [[id]]'s fdef from [[module]] }} by

     module <-> list_product
     lookupFdefViaIDFromProducts list_product id = opt_fdef
     -------------------------------------------------------- :: lookupFdefViaIDFromModule_intro
     lookupFdefViaIDFromModule module id = opt_fdef
     
defns
lookupFdefViaIDFromModules_def :: '' ::=
     defn
     lookupFdefViaIDFromModules list_module id = opt_fdef :: :: lookupFdefViaIDFromModules :: ''
     {{ com look up [[id]]'s fdef from [[list_module]] }} by

     ---------------------------------------- :: lookupFdefViaIDFromModules_nil
     lookupFdefViaIDFromModules [] id = none

     lookupFdefViaIDFromModule module id = fdef
     ------------------------------------------------------------- :: lookupFdefViaIDFromModules_true
     lookupFdefViaIDFromModules (list_module, module) id = fdef

     lookupFdefViaIDFromModule module id = none
     lookupFdefViaIDFromModules list_module id = opt_fdef
     ---------------------------------------------------------------- :: lookupFdefViaIDFromModules_false
     lookupFdefViaIDFromModules (list_module, module) id = opt_fdef

defns
lookupFdefViaIDFromSystem_def :: '' ::=
     defn
     lookupFdefViaIDFromSystem system id = opt_fdef :: :: lookupFdefViaIDFromSystem :: ''
     {{ com look up [[id]]'s fdef from [[system]] }} by

     system <-> list_module
     lookupFdefViaIDFromModules list_module id = opt_fdef
     ---------------------------------------------------- :: lookupFdefViaIDFromSystem_intro
     lookupFdefViaIDFromSystem system id = opt_fdef

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      ID binding lookup                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
lookupBindingViaIDFromInsn_def :: '' ::=
     defn
     lookupBindingViaIDFromInsn insn id = id_binding :: :: lookupBindingViaIDFromInsn :: ''
     {{ com look up [[id]]'s binding from [[insn]] }} by

     getInsnID insn = none
     ------------------------------------------------ :: lookupBindingViaIDFromInsn_none
     lookupBindingViaIDFromInsn insn id = none

     getInsnID insn = id'
     id == id'
     -------------------------------------- :: lookupBindingViaIDFromInsn_true
     lookupBindingViaIDFromInsn insn id = insn

     getInsnID insn = id'
     not id == id'
     --------------------------------------- :: lookupBindingViaIDFromInsn_false
     lookupBindingViaIDFromInsn insn id = none

defns
lookupBindingViaIDFromInsns_def :: '' ::=
     defn
     lookupBindingViaIDFromInsns list_insn id = id_binding :: :: lookupBindingViaIDFromInsns :: ''
     {{ com look up [[id]]'s binding from [[list_insn]] }} by

     ------------------------------------- :: lookupBindingViaIDFromInsns_none
     lookupBindingViaIDFromInsns [] id = none

     lookupBindingViaIDFromInsn insn id = insn
     --------------------------------------------------- :: lookupBindingViaIDFromInsns_true
     lookupBindingViaIDFromInsns (list_insn, insn) id = insn

     lookupBindingViaIDFromInsn insn id = none
     lookupBindingViaIDFromInsns list_insn id = id_binding
     --------------------------------------------------- :: lookupBindingViaIDFromInsns_false
     lookupBindingViaIDFromInsns (list_insn, insn) id = id_binding

defns
lookupBindingViaIDFromBlock_def :: '' ::=
     defn
     lookupBindingViaIDFromBlock block id = id_binding :: :: lookupBindingViaIDFromBlock :: ''
     {{ com look up [[id]]'s binding from [[block]] }} by

     getInsnsFromBlock block = list_insn
     lookupBindingViaIDFromInsns list_insn id = id_binding
     ----------------------------------------------- :: lookupBindingViaIDFromBlock_intro
     lookupBindingViaIDFromBlock block id = id_binding

defns
lookupBindingViaIDFromBlocks_def :: '' ::=
     defn
     lookupBindingViaIDFromBlocks list_block id = id_binding :: :: lookupBindingViaIDFromBlocks :: ''
     {{ com look up [[id]]'s binding from [[list_block]] }} by

     ---------------------------------------------- :: lookupBindingViaIDFromBlocks_nil
     lookupBindingViaIDFromBlocks [] id = none

     lookupBindingViaIDFromBlock block id = insn
     ------------------------------------------------------ :: lookupBindingViaIDFromBlocks_true
     lookupBindingViaIDFromBlocks (list_block, block) id = insn

     lookupBindingViaIDFromBlock block id = none
     lookupBindingViaIDFromBlocks list_block id = id_binding
     ---------------------------------------------------------- :: lookupBindingViaIDFromBlocks_false
     lookupBindingViaIDFromBlocks (list_block, block) id = id_binding

defns
lookupBindingViaIDFromArg_def :: '' ::=
     defn
     lookupBindingViaIDFromArg arg id = id_binding :: :: lookupBindingViaIDFromArg :: ''
     {{ com look up [[id]]'s binding from [[arg]] }} by

     id == id'
     -------------------------------------- :: lookupBindingViaIDFromArg_true
     lookupBindingViaIDFromArg (typ id) id' = typ id

     not id == id'
     --------------------------------------- :: lookupBindingViaIDFromArg_false
     lookupBindingViaIDFromArg (typ id) id' = none

defns
lookupBindingViaIDFromArgs_def :: '' ::=
     defn
     lookupBindingViaIDFromArgs list_arg id = id_binding :: :: lookupBindingViaIDFromArgs :: ''
     {{ com look up [[id]]'s binding from [[list_arg]] }} by

     ------------------------------------- :: lookupBindingViaIDFromArgs_none
     lookupBindingViaIDFromArgs [] id = none

     lookupBindingViaIDFromArg arg id = arg'
     --------------------------------------------------- :: lookupBindingViaIDFromArgs_true
     lookupBindingViaIDFromArgs (list_arg, arg) id = arg'

     lookupBindingViaIDFromArg arg id = none
     lookupBindingViaIDFromArgs list_arg id = id_binding
     --------------------------------------------------- :: lookupBindingViaIDFromArgs_false
     lookupBindingViaIDFromArgs (list_arg, arg) id = id_binding

defns
lookupBindingViaIDFromFdec_def :: '' ::=
     defn
     lookupBindingViaIDFromFdec fdec id = id_binding :: :: lookupBindingViaIDFromFdec :: ''
     {{ com look up [[id]]'s binding from [[fdec]] }} by

     id0 == id
     -------------------------------------------------------------------- :: lookupBindingViaIDFromFdec_fdec
     lookupBindingViaIDFromFdec (declare (typ id0 (list_arg))) id = (declare (typ id0 (list_arg)))

     not id0 == id
     lookupBindingViaIDFromArgs list_arg id = id_binding
     -------------------------------------------------------------------- :: lookupBindingViaIDFromFdec_args
     lookupBindingViaIDFromFdec (declare (typ id0 (list_arg))) id = id_binding

defns
lookupBindingViaIDFromFdef_def :: '' ::=
     defn
     lookupBindingViaIDFromFdef fdef id = id_binding :: :: lookupBindingViaIDFromFdef :: ''
     {{ com look up [[id]]'s binding from [[fdef]] }} by

     lookupBindingViaIDFromBlocks list_block id = id_binding
     -------------------------------------------------------------------- :: lookupBindingViaIDFromFdef_intro
     lookupBindingViaIDFromFdef (define fheader {list_block}) id = id_binding

defns
lookupBindingViaIDFromProduct_def :: '' ::=
     defn
     lookupBindingViaIDFromProduct product id = id_binding :: :: lookupBindingViaIDFromProduct :: ''
     {{ com look up [[id]]'s binding from [[product]] }} by

     id == id'
     ------------------------------------------------------------- :: lookupBindingViaIDFromProduct_g_true
     lookupBindingViaIDFromProduct (id = global typ const) id' = (id = global typ const) 

     not id == id'
     ------------------------------------------------------------- :: lookupBindingViaIDFromProduct_g_false
     lookupBindingViaIDFromProduct (id = global typ const) id' = none

     lookupBindingViaIDFromFdec fdec id = id_binding
     --------------------------------------------------------- :: lookupBindingViaIDFromProduct_fdec
     lookupBindingViaIDFromProduct fdec id = id_binding

     -------------------------------------- :: lookupBindingViaIDFromProduct_namedt
     lookupBindingViaIDFromProduct namedt id = none

     lookupBindingViaIDFromFdef fdef id = id_binding
     ------------------------------------------------------------------- :: lookupBindingViaIDFromProduct_fdef
     lookupBindingViaIDFromProduct fdef id = id_binding

defns
lookupBindingViaIDFromProducts_def :: '' ::=
     defn
     lookupBindingViaIDFromProducts list_product id = id_binding :: :: lookupBindingViaIDFromProducts :: ''
     {{ com look up [[id]]'s binding from [[list_product]] }} by

     ---------------------------------------- :: lookupBindingViaIDFromProducts_nil
     lookupBindingViaIDFromProducts [] id = none

     lookupBindingViaIDFromProduct product id = insn 
     ------------------------------------------------------------- :: lookupBindingViaIDFromProducts_true_insn
     lookupBindingViaIDFromProducts (list_product, product) id = insn
     
     lookupBindingViaIDFromProduct product id = g
     ------------------------------------------------------------- :: lookupBindingViaIDFromProducts_true_g
     lookupBindingViaIDFromProducts (list_product, product) id = g

     lookupBindingViaIDFromProduct product id = none
     lookupBindingViaIDFromProducts list_product id = id_binding
     ---------------------------------------------------------------- :: lookupBindingViaIDFromProducts_false
     lookupBindingViaIDFromProducts (list_product, product) id = id_binding

defns
lookupBindingViaIDFromModule_def :: '' ::=
     defn
     lookupBindingViaIDFromModule module id = id_binding :: :: lookupBindingViaIDFromModule :: ''
     {{ com look up [[id]]'s binding from [[module]] }} by

     module <-> list_product
     lookupBindingViaIDFromProducts list_product id = id_binding
     --------------------------------------------------------- :: lookupBindingViaIDFromModule_intro
     lookupBindingViaIDFromModule module id = id_binding
     
defns
lookupBindingViaIDFromModules_def :: '' ::=
     defn
     lookupBindingViaIDFromModules list_module id = id_binding :: :: lookupBindingViaIDFromModules :: ''
     {{ com look up [[id]]'s binding from [[list_module]] }} by

     ---------------------------------------- :: lookupBindingViaIDFromModules_nil
     lookupBindingViaIDFromModules [] id = none

     lookupBindingViaIDFromModule module id = insn
     ------------------------------------------------------------- :: lookupBindingViaIDFromModules_true_insn
     lookupBindingViaIDFromModules (list_module, module) id = insn

     lookupBindingViaIDFromModule module id = g
     ------------------------------------------------------------- :: lookupBindingViaIDFromModules_true_g
     lookupBindingViaIDFromModules (list_module, module) id = g

     lookupBindingViaIDFromModule module id = none
     lookupBindingViaIDFromModules list_module id = id_binding
     ---------------------------------------------------------------- :: lookupBindingViaIDFromModules_false
     lookupBindingViaIDFromModules (list_module, module) id = id_binding

defns
lookupBindingViaIDFromSystem_def :: '' ::=
     defn
     lookupBindingViaIDFromSystem system id = id_binding :: :: lookupBindingViaIDFromSystem :: ''
     {{ com look up [[id]]'s binding from [[system]] }} by

     system <-> list_module
     lookupBindingViaIDFromModules list_module id = id_binding
     ---------------------------------------------------- :: lookupBindingViaIDFromSystem_intro
     lookupBindingViaIDFromSystem system id = id_binding

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Block lookup from ID                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
isIDInBlock_def :: '' ::=
     defn
     isIDInBloc id block :: :: isIDInBlock :: ''
     {{ com if the insn [[id]] is in [[block]] }} by

     lookupBindingViaIDFromBlock block id = insn     
     --------------------------------------- :: isIDInBloc_intro
     isIDInBloc id block

defns
lookupBlockViaIDFromBlocks_def :: '' ::=
     defn
     lookupBlockViaIDFromBlocks list_block id = opt_block :: :: lookupBlockViaIDFromBlocks :: ''
     {{ com if the insn [[id]] is in a block in [[list_block]] }} by 
  
     --------------------------------------- :: lookupBlockViaIDFromBlocks_nil
     lookupBlockViaIDFromBlocks [] id = none		 

     isIDInBloc id block
     ---------------------------------------------------------- :: lookupBlockViaIDFromBlocks_cons_true
     lookupBlockViaIDFromBlocks (list_block, block) id = block

     not (isIDInBloc id block)
     lookupBlockViaIDFromBlocks list_block id = opt_block
     -------------------------------------------------------------- :: lookupBlockViaIDFromBlocks_cons_false
     lookupBlockViaIDFromBlocks (list_block, block) id = opt_block

defns
lookupBlockViaIDFromFdef_def :: '' ::=
     defn
     lookupBlockViaIDFromFdef fdef id = opt_block :: :: lookupBlockViaIDFromFdef :: ''
     {{ com if the insn [[id]] is in a block in [[fdef]] }} by

     lookupBlockViaIDFromBlocks list_block id = opt_block
     ------------------------------------------------------------------ :: lookupBlockViaIDFromFdef_intro
     lookupBlockViaIDFromFdef (define fheader {list_block}) id = opt_block

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get parent                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getParentOfInsn_def :: '' ::=
     defn
     getParentOfInsn insn = block :: :: getParentOfInsn :: ''
     {{ com [[block]] is the parent of [[insn]] }} by

     insnInBlock insn block
     ------------------------------------- :: getParentOfInsn_intro
     getParentOfInsn insn = block      

defns
getParentOfBlock_def :: '' ::=
     defn
     getParentOfBlock block = fdef :: :: getParentOfBlock :: ''
     {{ com [[fdef]] is the parent of [[block]] }} by

     blockInFdef block fdef
     ------------------------------------- :: getParentOfBlock_intro
     getParentOfBlock block = fdef

defns
getParentOfFdef_def :: '' ::=
     defn
     getParentOfFdef fdef = module :: :: getParentOfFdef :: ''
     {{ com [[module]] is the parent of [[fdef]] }} by

     fdef in module
     ------------------------------------- :: getParentOfFdef_intro
     getParentOfFdef fdef = module
