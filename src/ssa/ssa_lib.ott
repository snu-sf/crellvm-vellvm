
% Supporting Defs of Static Single Assignment(SSA)


% isValidReturnType - Return true if the specified type is valid as a return type. 
% lib/VMCore/Type
defns
isNotValidReturnType_def :: '' ::=
      defn
      isNotValidReturnType typ :: :: isNotValidReturnType :: '' {{ com [[typ]] isnt a valid return type }} by  
      
      --------------------------------- :: isNotValidReturnType_label
      isNotValidReturnType label


      --------------------------------- :: isNotValidReturnType_metadata
      isNotValidReturnType metadata      

defns
isValidReturnType_def :: '' ::=
      defn
      isValidReturnType typ :: :: isValidReturnType :: '' {{ com [[typ]] is a valid return type }} by  

      not isNotValidReturnType typ
      --------------------------------- :: isValidReturnType_intro
      isValidReturnType typ

% isFirstClassType - Return true if the type is "first class", meaning it is a valid 
% type for a Value. lib/VMCore/Type 
defns
isNotFirstClassType_def :: '' ::=
      defn
      isNotFirstClassType typ :: :: isNotFirstClassType :: '' {{ com [[typ]] isnt a first class type }} by

      ---------------------------------- :: isNotFirstClassType_void
      isNotFirstClassType void

      ---------------------------------- :: isNotFirstClassType_opaque
      isNotFirstClassType opaque

      --------------------------------------------- :: isNotFirstClassType_function
      isNotFirstClassType typ ( </ typj // j /> )

defns
isFirstClassType_def :: '' ::=
      defn
      isFirstClassType typ :: :: isFirstClassType :: '' {{ com [[typ]] is a first class type }} by

      not isNotFirstClassType typ
      ----------------------------------- :: isFirstClassType_intro
      isFirstClassType typ

% isValidArgumentType - Return true if the specified type is valid as an
% argument type. lib/VMCore/Type.cpp
defns
isValidArgumentType_def :: '' ::=
      defn
      isValidArgumentType typ :: :: isValidArgumentType :: '' {{ com [[typ]] is a valid argument type }} by
 
      ----------------------------------- :: isValidArgumentType_opaque
      isValidArgumentType opaque

      isFirstClassType typ
      ----------------------------------- :: isValidArgumentType_firstclass
      isValidArgumentType typ

defns 
isNotValidElementType_def :: '' ::=
      defn
      isNotValidElementType typ :: :: isNotValidElementType :: '' {{ com [[typ]] isnt a valid elment type }} by

      ----------------------------------- :: isNotValidElementType_void
      isNotValidElementType void

      ----------------------------------- :: isNotValidElementType_label
      isNotValidElementType label
 
      ----------------------------------- :: isNotValidElementType_metadata
      isNotValidElementType metadata

      --------------------------------------------- :: isNotValidElementType_function
      isNotValidElementType typ ( </ typj // j /> )

defns 
isValidElementType_def :: '' ::=
      defn
      isValidElementType typ :: :: isValidElementType :: '' {{ com [[typ]] is a valid elment type }} by

      not isNotValidElementType typ
      ----------------------------------- :: isValidElementType_intro
      isValidElementType typ


defns
getReturnType_def :: '' ::=
      defn
      getReturnType fdef = typ :: :: getReturnType :: '' 
      {{ com [[fdef]]'s return type is [[typ]] }} by

      ----------------------------------------------------------------- :: getReturnType_intro
      getReturnType (define (typ id (list_arg)) { list_block }) = typ


defns
typeEq_def :: '' ::=
       defn
       typ == typ' :: :: typeEq :: ''
       {{ com check if [[typ]] equals to [[typ']] }} by

       N == N'
       ------------------------- :: typeEq_int
       int N == int N'

       ------------------------- :: typeEq_float
       float == float

       ------------------------- :: typeEq_double
       double == double

       ------------------------- :: typeEq_fp128
       fp128 == fp128

       ------------------------- :: typeEq_void       
       void == void

       ------------------------- :: typeEq_label
       label == label

       ------------------------- :: typeEq_metadata
       metadata == metadata

       ------------------------- :: typeEq_opaque
       opaque == opaque

       N == N'
       typ == typ'
       --------------------------------- :: typeEq_array
       [ N * typ ] == [ N' * typ' ] 

       N == N'
       typ == typ'
       --------------------------------- :: typeEq_vector
       < N * typ > == < N' * typ' > 

       typ == typ'
       --------------------------------- :: typeEq_pointer
       typ * == typ' *

       typ == typ'
       </ typj == typ'j // j />
       ----------------------------------------------------- :: typeEq_function
       typ ( </ typj // j /> ) == typ' ( </ typ'j // j /> )  

       </ typj == typ'j // j />
       ----------------------------------------------------- :: typeEq_structure
       { </ typj // j /> } == { </ typ'j // j /> }  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Check Terminator						 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
isTerminatorInsn_def :: '' ::=
      defn
      isTerminatorInsn insn :: :: isTerminatorInsn :: ''
      {{ com check is [[insn]] is a terminator insn }} by

      --------------------------------------- :: isTerminatorInsn_return
      isTerminatorInsn (ret typ value) 
      
      --------------------------------------- :: isTerminatorInsn_return_void
      isTerminatorInsn (ret void)

      --------------------------------------- :: isTerminatorInsn_br
      isTerminatorInsn (br value , l1 , l2)

      --------------------------------------- :: isTerminatorInsn_br_uncond
      isTerminatorInsn (br l)

      ----------------------------------------------------------------- :: isTerminatorInsn_switch
      isTerminatorInsn (switch value , l </ [ constj , lj ] // j />)

      ----------------------------------------------------------------- :: isTerminatorInsn_invoke
      isTerminatorInsn (id = invoke t id0 list_param to l1 unwind l2)

      ----------------------------------------------------------------- :: isTerminatorInsn_unreachable
      isTerminatorInsn unreachable

defns
insnsEndsWithTerminatorInsn_def :: '' ::=
      defn
      insnsEndsWithTerminatorInsn list_insn :: :: insnsEndsWithTerminatorInsn :: ''
      {{ com [[list_insn]] ends with terminator insnruction }} by
      
      insnsGetLast list_insn = insn
      isTerminatorInsn insn
      ----------------------------------------------- :: insnsEndsWithTerminatorInsn_intro
      insnsEndsWithTerminatorInsn list_insn 
    
defns
insnsDoesntContainTerminatorInsn_def :: '' ::=
      defn
      insnsDoesntContainTerminatorInsn list_insn :: :: insnsDoesntContainTerminatorInsn :: ''
      {{ com [[list_insn]] doesnt contain terminator insnruction }} by

      --------------------------------------- :: insnsDoesntContainTerminatorInsn_nil
      insnsDoesntContainTerminatorInsn []

      insnsDoesntContainTerminatorInsn list_insn
      not isTerminatorInsn insn
      ----------------------------------------------- :: insnsDoesntContainTerminatorInsn_cons
      insnsDoesntContainTerminatorInsn list_insn , insn

defns
insnsChecksTerminatorInsn_def :: '' ::=
      defn
      insnsChecksTerminatorInsn list_insn :: :: insnsChecksTerminatorInsn :: ''
      {{ com check if [[list_insn]] is well-formed }} by

      insnsEndsWithTerminatorInsn list_insn
      insnsRemovesLast list_insn = list_insn'    
      insnsDoesntContainTerminatorInsn list_insn'
      ----------------------------------------------- :: insnsChecksTerminatorInsn_intro
      insnsChecksTerminatorInsn list_insn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%        Check Phi							%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
isPhiNode_def :: '' ::=
      defn
      isPhiNode insn :: :: isPhiNode :: ''
      {{ com check is [[insn]] is a phi node }} by

      --------------------------------------- :: isPhiNode_intro
      isPhiNode (id = phi typ </ [ idj , lj ] // j />) 
      
defns
insnsStartsWithPhiNode_def :: '' ::=
      defn
      insnsStartsWithPhiNode list_insn :: :: insnsStartsWithPhiNode :: ''
      {{ com [[list_insn]] starts with phi insnruction }} by

      ----------------------------------------------- :: insnsStartsWithPhiNode_nil
      insnsStartsWithPhiNode []

      insnsStartsWithPhiNode list_insn      
      isPhiNode insn
      ---------------------------------------------------------------------- :: insnsStartsWithPhiNode_cons_phi
      insnsStartsWithPhiNode (list_insn, insn)
      
      insnsDoesntContainPhiNode list_insn      
      not isPhiNode insn
      ---------------------------------------------------------------------- :: insnsStartsWithPhiNode_cons_nophi
      insnsStartsWithPhiNode (list_insn, insn)

      defn
      insnsDoesntContainPhiNode list_insn :: :: insnsDoesntContainPhiNode :: ''
      {{ com [[list_insn]] doesnt contain phi insnruction }} by

      --------------------------------------- :: insnsDoesntContainPhiNode_nil
      insnsDoesntContainPhiNode []

      insnsDoesntContainPhiNode list_insn
      not isPhiNode insn 
      ----------------------------------------------------- :: insnsDoesntContainPhiNode_cons
      insnsDoesntContainPhiNode list_insn , insn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get block from label                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getBlockAtLableFromBlocks_def :: '' ::=
      defn 
      getBlockAtLableFromBlocks list_block l = opt_block :: :: getBlockAtLableFromBlocks :: ''
      {{ com [[opt_block]] is of label [[l]] in [[list_block]] }} by

      ---------------------------------------------------- :: getBlockAtLableFromBlocks_nil
      getBlockAtLableFromBlocks [] l = none

      l1 == l2 
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_true
      getBlockAtLableFromBlocks (list_block, (l1 list_insn1)) l2 = l1 list_insn1

      not l1 == l2
      getBlockAtLableFromBlocks list_block l2 = opt_block
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_rec1
      getBlockAtLableFromBlocks (list_block, (l1 list_insn1)) l2 = opt_block
			      
    
defns
getBlockAtLableFromFdef_def :: '' ::=
      defn
      getBlockAtLableFromFdef fdef l = opt_block :: :: getBlockAtLableFromFdef :: ''
      {{ com [[opt_block]] is of label [[l]] in [[fdef]] }} by

      getBlockAtLableFromBlocks list_block l = opt_block
      ---------------------------------------------------- :: getBlockAtLableFromFdef_intro
      getBlockAtLableFromFdef (define fheader { list_block }) l = opt_block


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         phi                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getPhiNodesFromListInsn_def :: '' ::=
      defn
      getPhiNodesFromListInsn list_insn = list_insn' :: :: getPhiNodesFromListInsn :: ''
      {{ com [[list_insn']] are the Phi nodes in [[list_insn]] }} by
 
      -------------------------------- :: getPhiNodesFromListInsn_nil
      getPhiNodesFromListInsn [] = []

      getPhiNodesFromListInsn list_insn = list_insn'
      isPhiNode insn       
      --------------------------------------------------- :: getPhiNodesFromListInsn_rec_true
      getPhiNodesFromListInsn (list_insn, insn) = list_insn', insn

      getPhiNodesFromListInsn list_insn = list_insn'
      not isPhiNode insn       
      --------------------------------------------------- :: getPhiNodesFromListInsn_rec_false
      getPhiNodesFromListInsn (list_insn, insn) = list_insn'

defns
getPhiNodesFromBlock_def :: '' ::=
      defn
      getPhiNodesFromBlock block = list_insn :: :: getPhiNodesFromBlock :: ''
      {{ com [[list_insn]] are the Phi nodes in [[block]] }} by
 
      getPhiNodesFromListInsn list_insn = list_insn'
      ---------------------------------------- :: getPhiNodesFromBlocks_Insn_with_label
      getPhiNodesFromBlock (l list_insn) = list_insn'

      getPhiNodesFromListInsn list_insn = list_insn'
      ---------------------------------------- :: getPhiNodesFromBlocks_Insn_without_label
      getPhiNodesFromBlock list_insn = list_insn'

defns
getLabelsFromPhiNode_def :: '' ::=
      defn
      getLabelsFromPhiNode insn = ls :: :: getLabelsFromPhiNode :: ''
      {{ com [[ls]] is the set of labels from phi [[insn]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNode_intro
      getLabelsFromPhiNode (id = phi typ </ [ idj , lj ] // j />) = </lj//j/> 
 
defns
getLabelsFromPhiNodes_def :: '' ::=
      defn
      getLabelsFromPhiNodes list_insn = ls :: :: getLabelsFromPhiNodes :: ''
      {{ com [[ls]] is the set of labels from phis [[list_insn]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_nil
      getLabelsFromPhiNodes [] = empty

      getLabelsFromPhiNodes list_insn = ls
      getLabelsFromPhiNode insn = ls'
      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_cons
      getLabelsFromPhiNodes (list_insn, insn) = ls ; ls' 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         Uniq                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
insnNotinInsns_def :: '' ::=
     defn
     insnNotinInsns insn list_insn :: :: insnNotinInsns :: ''
     {{ com the ID of [[insn]] isnt in Ids of [[list_insn]] }} by

     getInsnID insn = none
     ------------------------------ :: insnNotinInsns_none
     insnNotinInsns insn list_insn    	      

     getInsnID insn = id
     ----------------------- :: insnNotinInsns_some_nil
     insnNotinInsns insn []    	      

     getInsnID insn = id
     getInsnID insn' = none
     insnNotinInsns insn list_insn'
     ------------------------------------ :: insnNotinInsns_some_none_cons
     insnNotinInsns insn (list_insn', insn')    	      

     getInsnID insn = id
     getInsnID insn' = id'
     not id == id'
     insnNotinInsns insn list_insn'
     ------------------------------------ :: insnNotinInsns_some_cons
     insnNotinInsns insn (list_insn', insn')    	      

defns
uniqInsns_def :: '' ::=
     defn
     uniqInsns list_insn :: :: uniqInsns :: ''
     {{ com IDs in [[list_insn]] are uniq }} by

     --------------------- :: uniqInsns_nil
     uniqInsns []

     insnNotinInsns insn list_insn
     uniqInsns list_insn
     ---------------------------- :: uniqInsns_cons
     uniqInsns (list_insn, insn)

defns
getInsnsFromBlock_def :: '' ::=
     defn
     getInsnsFromBlock block = list_insn :: :: getInsnsFromBlock :: ''
     {{ com the instructions of [[block]] are [[list_insn]] }} by

     ------------------------------------------------------ :: getInsnsFromBlock_with_label
     getInsnsFromBlock (l list_insn) = list_insn

     ------------------------------------------------------ :: getInsnsFromBlock_without_label
     getInsnsFromBlock list_insn = list_insn

defns
getInsnsFromBlocks_def :: '' ::=
     defn
     getInsnsFromBlocks list_block = list_insn :: :: getInsnsFromBlocks :: ''
     {{ com the instructions of [[list_block]] are [[list_insn]] }} by

     ---------------------------- :: getInsnsFromBlocks_nil
     getInsnsFromBlocks [] = []

     getInsnsFromBlocks list_block = list_insn
     getInsnsFromBlock block = list_insn' 
     ------------------------------------------------- :: getInsnsFromBlocks_cons
     getInsnsFromBlocks (list_block, block) = list_insn;list_insn'

defns
blockNotinBlocks_def :: '' ::=
     defn
     blockNotinBlocks block list_block :: :: blockNotinBlocks :: ''
     {{ com the label of [[block]] isnt in labels of [[list_block]] }} by

     ------------------------------------ :: blockNotinBlocks_none
     blockNotinBlocks list_insn list_block    	     

     --------------------------------- :: blockNotinBlocks_some_nil
     blockNotinBlocks (l list_insn) []    	      

     blockNotinBlocks (l list_insn) list_block'
     ------------------------------------ :: blockNotinBlocks_some_none_cons
     blockNotinBlocks (l list_insn) (list_block', list_insn')    	      

     not l == l'
     blockNotinBlocks (l list_insn) list_block'
     ------------------------------------ :: blockNotinBlocks_some_cons
     blockNotinBlocks (l list_insn) (list_block', l' list_insn')    	      


defns 
uniqLabels_def :: '' ::=
     defn
     uniqLabels list_block :: :: uniqLabels :: ''
     {{ com the labels in [[list_block]] are uniq}} by

     --------------------- :: uniqLabels_nil
     uniqLabels []

     blockNotinBlocks block list_block
     uniqLabels list_block
     ---------------------------- :: uniqLabels_cons
     uniqLabels (list_block, block)

defns
uniqBlocks_def :: '' ::=
     defn
     uniqBlocks list_block :: :: uniqBlocks :: ''
     {{ com the IDs and labels in [[list_block]] are uniq}} by
     
     getInsnsFromBlocks list_block = list_insn
     uniqInsns list_insn
     uniqLabels list_block
     ------------------------------------------------ :: uniqBlocks_intro
     uniqBlocks list_block

defns
uniqFdef_def :: '' ::=
     defn
     uniqFdef fdef :: :: uniqFdef :: ''
     {{ com the IDs in [[fdef]] are uniq}} by
   
     uniqBlocks list_block	
     ------------------------------------------------ :: uniqFdef_intro
     uniqFdef (define fheader { list_block })

defns
getFheaderID_def :: '' ::=
     defn
     getFheaderID fheader = id :: :: getFheaderID :: ''
     {{ com return [[id]] from [[fheader]] }} by

     ---------------------------------------- :: getFheaderID_intro
     getFheaderID (typ id ( list_arg )) = id

defns
getFdecID_def :: '' ::=
     defn
     getFdecID fdec = id :: :: getFdecID :: ''
     {{ com return [[id]] from [[fdec]] }} by

     getFheaderID fheader = id
     ---------------------------------------- :: getFdecID_intro
     getFdecID (declare fheader) = id

defns
getFdefID_def :: '' ::=
     defn
     getFdefID fdef = id :: :: getFdefID :: ''
     {{ com return [[id]] from [[fdef]] }} by

     getFheaderID fheader = id
     ---------------------------------------------- :: getFdefID_intro
     getFdefID (define fheader {list_block}) = id

defns
getNamedtID_def :: '' ::=
     defn
     getNamedtID namedt = id :: :: getNamedtID :: ''
     {{ com return [[id]] from [[namedt]] }} by

     ----------------------------------- :: getNamedtID_intro
     getNamedtID (id = type typ) = id   			

defns
getGID_def :: '' ::=
     defn
     getGID g = id :: :: getgID :: ''
     {{ com return [[id]] from [[g]] }} by

     ------------------------------------ :: getGID_intro
     getGID (id = global typ const) = id 

defns
getProductID_def :: '' ::=
     defn 
     getProductID product = id :: :: getProductID :: ''
     {{ com return [[id]] from [[product]] }} by

     getGID g = id
     ------------------------------------ :: getProductID_g
     getProductID g = id

     getFdecID fdec = id
     ------------------------------------ :: getProductID_fdec
     getProductID fdec = id

     getFdefID fdef = id     
     ------------------------------------ :: getProductID_fdef
     getProductID fdef = id

     getNamedtID namedt = id
     ------------------------------------ :: getProductID_namedt
     getProductID namedt = id

defns
productNotinProducts_def :: '' ::=
     defn
     productNotinProducts product products :: :: productNotinProducts :: ''
     {{ com the ID of [[product]] isnt in Ids of [[products]] }} by

     ------------------------------- :: productNotinProducts_nil
     productNotinProducts product []    	      

     getProductID product = id
     getProductID product' = id'
     not id == id'
     productNotinProducts product products'
     ------------------------------------ :: productNotinProducts_cons
     productNotinProducts product (products', product')    	      
defns
uniqProduct_def :: '' ::=
     defn 
     uniqProduct product :: :: uniqProduct :: ''
     {{ com ids in [[product]] are uniq }} by

     ------------------------------------ :: uniqProduct_g
     uniqProduct g 

     ------------------------------------ :: uniqProduct_fdec
     uniqProduct fdec 

     uniqFdef fdef     
     ------------------------------------ :: uniqProduct_fdef
     uniqProduct fdef

     ------------------------------------ :: uniqProduct_namedt
     uniqProduct namedt


defns
uniqProducts_def :: '' ::=
     defn
     uniqProducts products :: :: uniqProducts :: ''
     {{ com IDs in [[products]] are uniq }} by

     --------------------- :: uniqProducts_nil
     uniqProducts []

     productNotinProducts product products
     uniqProducts products
     uniqProduct product
     -------------------------------------- :: uniqProducts_cons
     uniqProducts (products, product)

defns 
uniqModule_def :: '' ::=
     defn
     uniqModule module :: :: uniqModule :: ''
     {{ com IDs in [[module]] are uniq }} by
     
     uniqProducts products 
     ---------------------- :: uniqModule_intro
     uniqModule products

defns 
uniqModules_def :: '' ::=
     defn
     uniqModules list_module :: :: uniqModules :: ''
     {{ com IDs in [[list_module]] are uniq }} by
      
     ---------------------- :: uniqModules_nil
     uniqModules []

     uniqModules list_module
     uniqModule module
     ----------------------------------- :: uniqModules_cons
     uniqModules (list_module, module)

defns
uniqSystem_def :: '' ::=
     defn
     uniqSystem system :: :: uniqSystem :: ''
     {{ com IDs in [[system]] are uniq }} by

     uniqModules list_module
     --------------------------- :: uniqSystem_intro
     uniqSystem list_module