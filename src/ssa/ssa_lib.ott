
% Supporting Defs of Static Single Assignment(SSA)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 classes                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
isPointerTyp_def :: '' ::=
     defn
     isPointerTyp typ :: :: isPointerTyp :: '' {{ com is [[typ]] a pointer typ }} by

     ------------------------------------------------------------- :: isPointerTyp_intro
     isPointerTyp (typ *) 

% defns
% isInvokeInsn_def :: '' ::=
%      defn
%      isInvokeInsn insn :: :: isInvokeInsn :: '' {{ com is [[insn]] an invoke instruction }} by

%      ------------------------------------------------------------- :: isInvokeInsn_intro
%      isInvokeInsn (id = invoke typ0 id0 list_param to l1 unwind l2) 

defns
isReturnTerminator_def :: '' ::=
     defn
     isReturnTerminator terminator :: :: isReturnTerminator :: '' {{ com is [[terminator]] a return terminator }} by

     ------------------------------------- :: isReturnTerminator_nonvoid
     isReturnTerminator (id = ret typ value) 

     --------------------------------- :: isReturnTerminator_void
     isReturnTerminator (id = ret void) 

% isValidReturnTyp - Return true if the specified type is valid as a return type. 
% lib/VMCore/Typ
defns
isNotValidReturnTyp_def :: '' ::=
      defn
      isNotValidReturnTyp typ :: :: isNotValidReturnTyp :: '' {{ com [[typ]] isnt a valid return type }} by  
      
      --------------------------------- :: isNotValidReturnTyp_label
      isNotValidReturnTyp label


      --------------------------------- :: isNotValidReturnTyp_metadata
      isNotValidReturnTyp metadata      

defns
isValidReturnTyp_def :: '' ::=
      defn
      isValidReturnTyp typ :: :: isValidReturnTyp :: '' {{ com [[typ]] is a valid return type }} by  

      not isNotValidReturnTyp typ
      --------------------------------- :: isValidReturnTyp_intro
      isValidReturnTyp typ

% isFirstClassTyp - Return true if the type is "first class", meaning it is a valid 
% type for a Value. lib/VMCore/Typ 
defns
isNotFirstClassTyp_def :: '' ::=
      defn
      isNotFirstClassTyp typ :: :: isNotFirstClassTyp :: '' {{ com [[typ]] isnt a first class type }} by

      ---------------------------------- :: isNotFirstClassTyp_void
      isNotFirstClassTyp void

%       ---------------------------------- :: isNotFirstClassTyp_opaque
%       isNotFirstClassTyp opaque

       --------------------------------------------- :: isNotFirstClassTyp_function
       isNotFirstClassTyp typ ( </ typj // j /> )

defns
isFirstClassTyp_def :: '' ::=
      defn
      isFirstClassTyp typ :: :: isFirstClassTyp :: '' {{ com [[typ]] is a first class type }} by

      not isNotFirstClassTyp typ
      ----------------------------------- :: isFirstClassTyp_intro
      isFirstClassTyp typ

% isValidArgumentTyp - Return true if the specified type is valid as an
% argument type. lib/VMCore/Typ.cpp
defns
isValidArgumentTyp_def :: '' ::=
      defn
      isValidArgumentTyp typ :: :: isValidArgumentTyp :: '' {{ com [[typ]] is a valid argument type }} by
 
%       ----------------------------------- :: isValidArgumentTyp_opaque
%       isValidArgumentTyp opaque

      isFirstClassTyp typ
      ----------------------------------- :: isValidArgumentTyp_firstclass
      isValidArgumentTyp typ

defns 
isNotValidElementTyp_def :: '' ::=
      defn
      isNotValidElementTyp typ :: :: isNotValidElementTyp :: '' {{ com [[typ]] isnt a valid elment type }} by

      ----------------------------------- :: isNotValidElementTyp_void
      isNotValidElementTyp void

      ----------------------------------- :: isNotValidElementTyp_label
      isNotValidElementTyp label
 
      ----------------------------------- :: isNotValidElementTyp_metadata
      isNotValidElementTyp metadata

      --------------------------------------------- :: isNotValidElementTyp_function
      isNotValidElementTyp typ ( </ typj // j /> )

defns 
isValidElementTyp_def :: '' ::=
      defn
      isValidElementTyp typ :: :: isValidElementTyp :: '' {{ com [[typ]] is a valid elment type }} by

      not isNotValidElementTyp typ
      ----------------------------------- :: isValidElementTyp_intro
      isValidElementTyp typ

defns
isBindingFdec_def :: '' ::=
      defn
      isBindingFdec id_binding = fdec :: :: isBindingFdec :: ''
      {{ com is [[id_binding]] a [[fdec]] }} by

      ------------------------- :: isBindingFdec_intro
      isBindingFdec fdec = fdec

defns
isBindingArg_def :: '' ::=
      defn
      isBindingArg id_binding = arg :: :: isBindingArg :: ''
      {{ com is [[id_binding]] an [[arg]] }} by

      ------------------------- :: isBindingArg_intro
      isBindingArg arg = arg

defns
isBindingGvar_def :: '' ::=
      defn
      isBindingGvar id_binding = gvar :: :: isBindingGvar :: ''
      {{ com is [[id_binding]] a [[gvar]] }} by

      ------------------------- :: isBindingGvar_intro
      isBindingGvar gvar = gvar

defns
isBindingCmd_def :: '' ::=
      defn
      isBindingCmd id_binding = cmd :: :: isBindingCmd :: ''
      {{ com is [[id_binding]] an [[cmd]] }} by

      ------------------------- :: isBindingCmd_intro
      isBindingCmd cmd = cmd

defns
isBindingPhiNode_def :: '' ::=
      defn
      isBindingPhiNode id_binding = phinode :: :: isBindingPhiNode :: ''
      {{ com is [[id_binding]] an [[phinode]] }} by

      ------------------------- :: isBindingPhiNode_intro
      isBindingPhiNode phinode = phinode

defns
isBindingtTerminator_def :: '' ::=
      defn
      isBindingTerminator id_binding = terminator :: :: isBindingTerminator :: ''
      {{ com is [[id_binding]] an [[terminator]] }} by

      ------------------------- :: isBindingTerminator_intro
      isBindingTerminator terminator = terminator

defns
isBindingInsn_def :: '' ::=
      defn
      isBindingInsn id_binding = insn :: :: isBindingInsn :: ''
      {{ com is [[id_binding]] an [[insn]] }} by

      ------------------------- :: isBindingInsn_cmd
      isBindingInsn cmd = cmd

      -------------------------------- :: isBindingInsn_phinode
      isBindingInsn phinode = phinode

      --------------------------------------- :: isBindingInsn_terminator
      isBindingInsn terminator = terminator

defns
isBindingPhinode_def :: '' ::=
      defn
      isBindingPhinode id_binding = phinode :: :: isBindingPhinode :: ''
      {{ com is [[id_binding]] an [[phinode]] }} by

      ------------------------- :: isBindingPhinode_intro
      isBindingPhinode phinode = phinode

defns
isAggregateTyp_def :: '' ::=
      defn
      isAggregateTyp typ :: :: isAggregateTyp :: '' {{ com [[typ]] is an aggregate type }} by

      -------------------------------------------- :: isAggregateTyp_struct
      isAggregateTyp {</ typj // j />}

      --------------------------------------------- :: isAggregateTyp_array
      isAggregateTyp [sz * typ] 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         get block from label                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
getBlockAtLableFromBlocks_def :: '' ::=
      defn 
      getBlockAtLableFromBlocks list_block l = opt_block :: :: getBlockAtLableFromBlocks :: ''
      {{ com [[opt_block]] is of label [[l]] in [[list_block]] }} by

      ---------------------------------------------------- :: getBlockAtLableFromBlocks_nil
      getBlockAtLableFromBlocks [] l = none

      l1 = l2 
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_true
      getBlockAtLableFromBlocks (list_block, (l1 list_phinode1 list_cmd1 terminator1)) l2 = l1 list_phinode1 list_cmd1 terminator1

      not l1 = l2
      getBlockAtLableFromBlocks list_block l2 = opt_block
      -------------------------------------------------------------- :: getBlockAtLableFromBlocks_rec1
      getBlockAtLableFromBlocks (list_block, (l1 list_phinode1 list_cmd1 terminator1)) l2 = opt_block
			      
    
defns
getBlockAtLableFromFdef_def :: '' ::=
      defn
      getBlockAtLableFromFdef fdef l = opt_block :: :: getBlockAtLableFromFdef :: ''
      {{ com [[opt_block]] is of label [[l]] in [[fdef]] }} by

      getBlockAtLableFromBlocks list_block l = opt_block
      ---------------------------------------------------- :: getBlockAtLableFromFdef_intro
      getBlockAtLableFromFdef (define fheader { list_block }) l = opt_block


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         phi                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
defns
getLabelsFromPhiNodes_def :: '' ::=
      defn
      getLabelsFromPhiNodes list_phinode = ls :: :: getLabelsFromPhiNodes :: ''
      {{ com [[ls]] is the set of labels from phis [[list_phinode]] }} by

      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_nil
      getLabelsFromPhiNodes [] = empty

      getLabelsFromPhiNodes list_phinode = ls
      getLabelsFromPhiNode phinode = ls'
      -------------------------------------------------------------------------------- :: getLabelsFromPhiNodes_cons
      getLabelsFromPhiNodes (list_phinode, phinode) = ls ; ls' 

