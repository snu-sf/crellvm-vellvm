
% Static Semantics of Static Single Assignment(SSA)

defns
Jwf_typ :: '' ::=
      defn
      |- typ :: :: wf_typ :: '' {{ com [[typ]] is well-formed }} by  

      -------------------- :: wf_typ_int
      |- int sz

      % -------------------- :: wf_typ_float
      % |- float

      % -------------------- :: wf_typ_double
      % |- double

      % -------------------- :: wf_typ_fp128
      % |- fp128

      -------------------- :: wf_typ_void
      |- void

      -------------------- :: wf_typ_label
      |- label

      -------------------- :: wf_typ_metadate
      |- metadata

      % -------------------- :: wf_typ_opaque
      % |- opaque

      isValidReturnTyp typ     
      |- typ
      </ isValidArgumentTyp typj // j />
      </ |- typj // j /> 
      -------------------------------------------------- :: wf_typ_function
      |- typ ( </ typj // j /> ) 
     
      </ isValidElementTyp typj // j />
      </ |- typj // j /> 
      -------------------------------------------------- :: wf_typ_structure
      |- { </ typj // j /> }

      |- typ
      isValidElementTyp typ
      ------------------- :: wf_typ_array
      |- [ sz * typ ]

      |- typ
      isValidElementTyp typ
      ------------------- :: wf_typ_pointer
      |- typ * 

      % |- typ
      % isValidElementTyp typ
      % ------------------- :: wf_typ_vector
      % |- < INT * typ >


defns
Jwf_operand_insn :: '' ::=
      defn
      intrinsic_funs , system , module_info , fdef_info , block , insn |- insn' :: :: wf_operand_insn :: ''
      {{ com [[insn']] is well-formed w.r.t [[insn]] [[block]] in [[fdef_info]] in [[module_info]] [[system]] }} by

      getInsnID insn' = id'
      lookupBlockViaIDFromFdef fdef id' = block'
      (notT isPhiNode insn) implies (insnDominates insn' insn \/ (not (isReachableFromEntry (fdef, dt) block)))
      ------------------------------------------------------------------------------------------------------------- :: wf_operand_insn_intro
      intrinsic_funs , system , module_info , (fdef, dt) , block , insn |- insn' 

defns
Jwf_operand :: '' ::=
      defn
      intrinsic_funs , system , module_info , fdef_info , block , insn |- id' :: :: wf_operand :: ''
      {{ com [[id']] is well-formed w.r.t [[insn]] [[block]] in [[fdef_info]] in [[module_info]] [[system]] }} by

      module = (list_layout list_product)
      insn in system , (module, usedef_insn, usedef_block) , (fdef, dt) , block
      getInsnOperands insn = ids
      id' in ids
      lookupBindingViaIDFromSystem system id' = id_binding'
      % Check to make sure that only first-class-values are operands to instructions.
      getBindingTyp id_binding' = typ'     
      isFirstClassTyp typ'
      % Valid use of metadata pointer.
      (getPointerEltTyp typ' = typ'') implies (not typ'' == metadata)
      % Check to make sure that the "address of" an intrinsic function is never
      % taken, and referencing function exists in current module!
      (isBindingFdec id_binding' = fdec) implies (getFdecID fdec = id0 /\ (id0 notin intrinsic_funs \/ getCallName insn = id0) /\ fdec in list_product)
      % Referring to an argument in the current function
      (isBindingArg id_binding' = arg) implies (argInFdef arg fdef)
      % Referencing global in the current module
      % (isBindingG id_binding' = g) implies (g in module)
      % Check when id_binding' is insn
      (isBindingInsn id_binding' = insn') implies (intrinsic_funs , system , module_info , fdef_info , block , insn |- insn')
      ----------------------------------------------------------------------------------------------------------------------- :: wf_operand_intro
      intrinsic_funs , system , (module, usedef_insn, usedef_block) , (fdef, dt) , block , insn |- id'

defns
Jwf_label :: '' ::=
      defn
      intrinsic_funs , system , module_info , fdef_info , block , insn |- l :: :: wf_label :: ''
      {{ com [[l]] is well-formed w.r.t [[insn]] [[block]] in [[fdef_info]] in [[module_info]] [[system]] }} by

      insn in system , (module, usedef_insn, usedef_block) , (fdef, dt) , block
      getInsnLabels insn = ls
      l in ls
      lookupBlockViaLabelFromSystem system l = block
      % Referring to a basic block in the current function
      blockInFdef block fdef
      ----------------------------------------------------------------------- :: wf_label_intro
      intrinsic_funs , system , (module, usedef_insn, usedef_block) , (fdef, dt) , block , insn |- l

defns
JvisitInstruction :: '' ::=
      defn
      intrinsic_funs , system , module_info , fdef_info , block |-i insn :: :: visitInstruction :: '' 
      {{ com [[insn]] is well-formed w.r.t [[block]] in [[fdef_info]] in [[module_info]] [[system]] }} by  
      % Verifier::visitInstruction

      %%%% Instruction must be embedded in basic block!
      insn in system , (module, usedef_insn, usedef_block) , (fdef, dt) , block
      %%%% Check that non-phi nodes are not self referential
      getInsnUseDef usedef_insn insn = list_insn 
      list_insn <-> </ insnj // j />
      (notT isPhiNode insn) implies </ (not insn =id= insnj) \/ (isReachableFromEntry (fdef, dt) block) // j />
      %%%% Verify that if this is a terminator that it is at the end of the block
      (isTerminatorInsn insn /\ getTerminator block = insn') implies (insn =id= insn')
      %%%% Check that void typed values don't have names
      %%%% We dont need to check this in Ott
      %%%%
      %%%% Check that the return value of the instruction is either void or a legal value type.
      getInsnTyp insn = typ
      typ == void \/ isFirstClassTyp typ
      %%%% Check that the instruction doesn't produce metadata or metadata*. Calls
      %%%% all already checked against the callee type.
      % (not typ == metadata) \/ isInvokeInsn insn \/ isCallInsn insn 
      (not typ == metadata) \/ isCallInsn insn 
      %%%% Instructions may not produce pointer to metadata.
      (isPointerTyp typ) implies (getPointerEltTyp typ = typ' /\ (not typ' == metadata)) 
      %%%% Check that all uses of the instruction, if they are instructions
      %%%% themselves, actually have parent basic blocks.  If the use is not an
      %%%% instruction, it is an error!
      %%%% We should prove a lemma for this later.
      %%%%
      %%%% Check operands
      getInsnOperands insn = ids
      ids <-> </ idj // j />
      </ intrinsic_funs , system , module_info , fdef_info , block , insn |- idj // j />
      %%%%
      %%%% Check labels
      getInsnLabels insn = ls
      ls <-> </ lj // j />
      </ intrinsic_funs , system , module_info , fdef_info , block , insn |- lj // j />
      -------------------------------------------------------------------------------------- :: wf_insn_base_intro
      intrinsic_funs , system , (module, usedef_insn, usedef_block) , (fdef, dt) , block |-i insn

defns
Jwf_insn :: '' ::=
      defn
      intrinsic_funs , system , module_info , fdef_info , block |- insn :: :: wf_insn :: '' 
      {{ com [[insn]] is well-formed w.r.t [[block]] in [[fdef_info]] in [[module_info]] [[system]] }} by  

      intrinsic_funs , system , module_info , (fdef, dt) , block |-i ret typ value
      ------------------------------------------------------ :: wf_insn_return
      intrinsic_funs , system , module_info , (fdef, dt) , block |- ret typ value

      % intrinsic_funs , system , module_info , (fdef, dt) , block |-i ret void
      % ------------------------------------------------------ :: wf_insn_return_void
      % intrinsic_funs , system , module_info , (fdef, dt) , block |- ret void

      intrinsic_funs , system , module_info , (fdef, dt) , block |-i br value , l1 , l2
      -------------------------------------------------------------------------------------- :: wf_insn_br
      intrinsic_funs , system , (module, usedef_insn, usedef_block), fdef_info , block |- br value , l1 , l2	

      intrinsic_funs , system , module_info , (fdef, dt) , block |-i br l
      -------------------------------------------------------------------------------------- :: wf_insn_br_uncond
      intrinsic_funs , system , (module, usedef_insn, usedef_block), fdef_info , block |- br l		

      % intrinsic_funs , system , module_info , (fdef, dt) , block |-i id = invoke typ0 id0 list_param to l1 unwind l2
      % -------------------------------------------------------------------------------------- :: wf_insn_invoke
      % intrinsic_funs , system , (module, usedef_insn, usedef_block), fdef_info , block |- id = invoke typ0 id0 list_param to l1 unwind l2

      intrinsic_funs , system , module_info , (fdef, dt) , block |-i id = call typ0 id0 list_param
      -------------------------------------------------------------------------------------- :: wf_insn_call
      intrinsic_funs , system , (module, usedef_insn, usedef_block), fdef_info , block |- id = call typ0 id0 list_param

      intrinsic_funs , system , module_info , (fdef, dt) , block |-i unreachable
      -------------------------------------------------------------------------------------- :: wf_insn_unreachable
      intrinsic_funs , system , (module, usedef_insn, usedef_block), fdef_info , block |- unreachable

      intrinsic_funs , system , module_info , (fdef, dt) , block |-i id = add (int sz) value1 value2
      -------------------------------------------------------------------------------------- :: wf_insn_add
      intrinsic_funs , system , (module, usedef_insn, usedef_block), fdef_info , block |- id = add (int sz) value1 value2

      intrinsic_funs , system , module_info , (fdef, dt) , block |-i id = phi typ </ [ idj , lj ] // j />
      -------------------------------------------------------------------------------------- :: wf_insn_phi
      intrinsic_funs , system , (module, usedef_insn, usedef_block), fdef_info , block |- id = phi typ </ [ idj , lj ] // j />
			        
defns
Jwf_list_insn :: '' ::=
      defn
      intrinsic_funs , system , module_info , fdef_info , block |- list_insn :: :: wf_list_insn :: ''
      {{ com [[list_insn]] is well-formed w.r.t. [[block]] [[fdef_info]] in [[module_info]] [[system]] }} by

      --------------------------------------- :: wf_list_insn_nil
      intrinsic_funs , system , module_info , fdef_info , block |- []

      intrinsic_funs , system , module_info , fdef_info , block |- insn
      intrinsic_funs , system , module_info , fdef_info , block |- list_insn
      ------------------------------------------------------- :: wf_list_insn_cons
      intrinsic_funs , system , module_info , fdef_info , block |- list_insn , insn
 
defns
Jwf_block :: '' ::=
      defn
      intrinsic_funs , system , module_info , fdef_info |- block :: :: wf_block :: '' 
      {{ com [[block]] is well-formed w.r.t. [[fdef_info]] in [[module_info]] [[system]] }} by

      (l list_insn) in system , module_info , fdef_info
      getInsnsFromBlock block = list_insn
      intrinsic_funs , system , module_info , fdef_info , block |- list_insn
      insnsChecksTerminatorInsn list_insn
      insnsStartsWithPhiNode list_insn
      --------------------------------------------------------- :: wf_block_intro
      intrinsic_funs , system , module_info , fdef_info |- block

defns
Jwf_list_block :: '' ::=
      defn
      intrinsic_funs , system , module_info , fdef_info |- list_block :: :: wf_list_block :: ''
      {{ com [[list_block]] is well-formed w.r.t. [[fdef_info]] in [[module_info]] [[system]] }} by

      --------------------------------------- :: wf_list_block_nil
      intrinsic_funs , system , module_info , fdef_info |- []

      intrinsic_funs , system , module_info , fdef_info |- block
      intrinsic_funs , system , module_info , fdef_info |- list_block
      ------------------------------------------------------- :: wf_list_block_cons
      intrinsic_funs , system , module_info , fdef_info |- list_block , block
 

defns
Jwf_fdef :: '' ::=
      defn
      intrinsic_funs , system , module_info |-f fdef :: :: wf_fdef :: ''
      {{ com [[fdef]] is well-formed w.r.t. [[module_info]] [[system]] }} by

      (define fheader { list_block} ) in system , (module, usedef_insn, usedef_block)
      {{ genDominatorTree [[:user_syntax__fdef:define fheader { list_block }]] [[module]] = [[dt]] }}
      intrinsic_funs , system , (module, usedef_insn, usedef_block) , (define fheader { list_block }, dt) |- list_block      
      ------------------------------------------------------ :: wf_fdef_intro
      intrinsic_funs , system , (module, usedef_insn, usedef_block) |-f define fheader { list_block }

defns
Jwf_prod :: '' ::=
      defn
      intrinsic_funs , system , module_info |- product :: :: wf_prod :: ''
      {{ com [[product]] is well-formed w.r.t. [[module_info]] [[system]]}} by 

      % ----------------------------- :: wf_prod_global_var
      % intrinsic_funs , system , module_info |- g

      ----------------------------- :: wf_prod_function_dec
      intrinsic_funs , system , module_info |- fdec

      intrinsic_funs , system , module_info |-f fdef
      ----------------------------- :: wf_prod_function_def
      intrinsic_funs , system , module_info |- fdef   

      % -------------------------------------- :: wf_prod_namedtype
      % intrinsic_funs , system , module_info |- namedt     

defns
Jwf_prods :: '' ::=
      defn
      intrinsic_funs , system , module_info |- list_product :: :: wf_prods :: ''
      {{ com [[list_product]] is well-formed w.r.t. [[module_info]] [[system]]}} by 

      --------------------------- :: wf_prods_nil
      intrinsic_funs , system , module_info |- []

      intrinsic_funs , system , module_info |- list_product
      intrinsic_funs , system , module_info |- product
      ------------------------------------------- :: wf_prods_cons
      intrinsic_funs , system , module_info |- list_product , product

defns
Jwf_module :: '' ::=
      defn
      intrinsic_funs , system |- module :: :: wf_module :: ''
      {{ com [[module]] is well-formed w.r.t. [[system]] }} by

      (list_layout list_product) in system
      {{ genInsnUseDef [[:user_syntax__module:(list_layout list_product)]] = [[usedef_insn]] }}
      {{ genBlockUseDef [[:user_syntax__module:(list_layout list_product)]] = [[usedef_block]] }}
      intrinsic_funs , system , ((list_layout list_product), usedef_insn, usedef_block) |- list_product
      ----------------------------------------------------- :: wf_module_intro
      intrinsic_funs , system |- list_layout list_product

defns
Jwf_list_module :: '' ::=
      defn
      intrinsic_funs , system |- list_module :: :: wf_list_module :: ''
      {{ com [[list_module]] is well-formed w.r.t. [[system]] }} by  

      ------------------------ :: wf_list_module_nil
      intrinsic_funs , system |- []

      intrinsic_funs , system |- module 
      intrinsic_funs , system |- list_module
      ---------------------------------- :: wf_list_module_cons
      intrinsic_funs, system |- list_module , module
 
defns
Jwf_system :: '' ::=
      defn
      intrinsic_funs |- system :: :: wf_system :: ''
      {{ com [[system]] is well-formed }} by

      intrinsic_funs , list_module |- list_module
      uniqSystem list_module
      ------------------------------ :: wf_system_intro
      intrinsic_funs |- list_module 
     

