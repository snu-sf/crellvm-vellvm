./testcases/t10.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     void @foo () nounwind{
entry:
  ret void
}
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  store i32 0, i32* %p
  call   void ()* @foo () 
  %_tmp_3 = load i32* %p
  br label %bb 
bb:
  store i32 %_tmp_3, i32* %p
  %0 = load i32* %p
  %_tmp_2 = load i32* %p
  br label %end 
end:
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  ret i32 %0
}

real	0m0.043s
user	0m0.024s
sys	0m0.015s
./testcases/t11.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     void @foo () nounwind{
entry:
  ret void
}
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %0 = load i32* %p
  call   void ()* @foo () 
  %_tmp_3 = load i32* %p
  br label %bb 
bb:
  store i32 %_tmp_3, i32* %p
  %1 = load i32* %p
  %_tmp_2 = load i32* %p
  br label %end 
end:
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  ret i32 %1
}

real	0m0.045s
user	0m0.012s
sys	0m0.016s
./testcases/t12.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  store i32 0, i32* %p
  %_tmp_3 = load i32* %p
  br label %bb 
bb:
  %_tmp_6 = phi i32 [%_tmp_2, %bb],[%_tmp_3, %entry]
  store i32 %_tmp_6, i32* %p
  %0 = load i32* %p
  store i32 1, i32* %p
  %_tmp_2 = load i32* %p
  br i1 -1, label %end, label %bb
end:
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  ret i32 %0
}

real	0m0.039s
user	0m0.021s
sys	0m0.016s
./testcases/t13.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  store i32 0, i32* %p
  %_tmp_4 = load i32* %p
  br label %bb1 
bb:
  store i32 %_tmp_2, i32* %p
  store i32 1, i32* %p
  %_tmp_3 = load i32* %p
  br label %bb1 
bb1:
  %_tmp_7 = phi i32 [%_tmp_3, %bb],[%_tmp_4, %entry]
  store i32 %_tmp_7, i32* %p
  %0 = load i32* %p
  %_tmp_2 = load i32* %p
  br i1 -1, label %end, label %bb
end:
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  ret i32 %0
}

real	0m0.041s
user	0m0.025s
sys	0m0.014s
./testcases/t14.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %q = alloca i32, i32 1
  %0 = load i32* %p
  %1 = load i32* %q
  %c = trunc i32 %0 to i1
  %a1 = add i32 %0, %1
  %a2 = add i32 %0, %1
  %a3 = add i32 %1, %0
  %a4 = add i32 %1, %0
  %_tmp_5 = load i32* %p
  %_tmp_18 = load i32* %q
  br label %loop 
loop:
  %_tmp_25 = phi i32 [%_tmp_15, %bb2],[%_tmp_18, %entry]
  %_tmp_12 = phi i32 [%_tmp_2, %bb2],[%_tmp_5, %entry]
  store i32 %_tmp_25, i32* %q
  store i32 %_tmp_12, i32* %p
  %_tmp_4 = load i32* %p
  %_tmp_17 = load i32* %q
  br i1 %c, label %bb1, label %bb2
bb1:
  store i32 %_tmp_17, i32* %q
  store i32 %_tmp_4, i32* %p
  %2 = add i32 %a1, %a3
  %3 = add i32 %a2, %a4
  %_tmp_3 = load i32* %p
  %_tmp_16 = load i32* %q
  br label %end 
bb2:
  store i32 %_tmp_17, i32* %q
  store i32 %_tmp_4, i32* %p
  %4 = add i32 %a1, %a3
  %5 = add i32 %a2, %a4
  %_tmp_2 = load i32* %p
  %_tmp_15 = load i32* %q
  br i1 -1, label %end, label %loop
end:
  %_tmp_19 = phi i32 [%_tmp_15, %bb2],[%_tmp_16, %bb1]
  %_tmp_6 = phi i32 [%_tmp_2, %bb2],[%_tmp_3, %bb1]
  %6 = phi i32 [%2, %bb1],[%4, %bb2]
  %7 = phi i32 [%3, %bb1],[%5, %bb2]
  store i32 %_tmp_19, i32* %q
  store i32 %_tmp_6, i32* %p
  %8 = add i32 %6, %7
  %_tmp_1 = load i32* %p
  %_tmp_14 = load i32* %q
  ret i32 %8
}

real	0m0.039s
user	0m0.012s
sys	0m0.006s
./testcases/t15.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %0 = load i32* %p
  %q = alloca i32, i32 1
  %_tmp_3 = load i32* %p
  %_tmp_10 = load i32* %q
  br label %bb 
bb:
  store i32 %_tmp_10, i32* %q
  store i32 %_tmp_3, i32* %p
  %1 = load i32* %p
  %2 = add i32 %0, %1
  %_tmp_2 = load i32* %p
  %_tmp_9 = load i32* %q
  br label %end 
end:
  store i32 %_tmp_9, i32* %q
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  %_tmp_8 = load i32* %q
  ret i32 %2
}

real	0m0.039s
user	0m0.011s
sys	0m0.006s
./testcases/t16.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     void @foo () nounwind{
entry:
  ret void
}
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  store i32 0, i32* %p
  %_tmp_4 = load i32* %p
  br i1 -1, label %bb1, label %bb2
bb1:
  store i32 %_tmp_4, i32* %p
  call   void ()* @foo () 
  %_tmp_3 = load i32* %p
  br label %end 
bb2:
  store i32 %_tmp_4, i32* %p
  %_tmp_2 = load i32* %p
  br label %end 
end:
  %_tmp_5 = phi i32 [%_tmp_2, %bb2],[%_tmp_3, %bb1]
  store i32 %_tmp_5, i32* %p
  %0 = load i32* %p
  %_tmp_1 = load i32* %p
  ret i32 %0
}

real	0m0.040s
user	0m0.013s
sys	0m0.005s
./testcases/t17.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %q = alloca i32, i32 1
  %0 = load i32* %p
  %1 = load i32* %q
  %2 = add i32 %0, %1
  %_tmp_10 = load i32* %p
  %_tmp_38 = load i32* %q
  br i1 -1, label %bb1, label %bb2
bb1:
  store i32 %_tmp_38, i32* %q
  store i32 %_tmp_10, i32* %p
  %3 = add i32 %0, %1
  %_tmp_9 = load i32* %p
  %_tmp_37 = load i32* %q
  br label %merge1 
bb2:
  store i32 %_tmp_38, i32* %q
  store i32 %_tmp_10, i32* %p
  %4 = add i32 %0, %1
  %_tmp_8 = load i32* %p
  %_tmp_36 = load i32* %q
  br label %merge1 
merge1:
  %_tmp_51 = phi i32 [%_tmp_36, %bb2],[%_tmp_37, %bb1]
  %_tmp_23 = phi i32 [%_tmp_8, %bb2],[%_tmp_9, %bb1]
  %5 = phi i32 [%3, %bb1],[%4, %bb2]
  store i32 %_tmp_51, i32* %q
  store i32 %_tmp_23, i32* %p
  %_tmp_7 = load i32* %p
  %_tmp_35 = load i32* %q
  br i1 -1, label %bb3, label %bb4
bb3:
  store i32 %_tmp_35, i32* %q
  store i32 %_tmp_7, i32* %p
  %6 = add i32 %0, %1
  %_tmp_6 = load i32* %p
  %_tmp_34 = load i32* %q
  br label %merge2 
bb4:
  store i32 %_tmp_35, i32* %q
  store i32 %_tmp_7, i32* %p
  %7 = add i32 %0, %1
  %_tmp_5 = load i32* %p
  %_tmp_33 = load i32* %q
  br label %merge2 
merge2:
  %_tmp_45 = phi i32 [%_tmp_33, %bb4],[%_tmp_34, %bb3]
  %_tmp_17 = phi i32 [%_tmp_5, %bb4],[%_tmp_6, %bb3]
  %8 = phi i32 [%6, %bb3],[%7, %bb4]
  store i32 %_tmp_45, i32* %q
  store i32 %_tmp_17, i32* %p
  %_tmp_4 = load i32* %p
  %_tmp_32 = load i32* %q
  br i1 -1, label %bb5, label %bb6
bb5:
  store i32 %_tmp_32, i32* %q
  store i32 %_tmp_4, i32* %p
  %9 = add i32 %0, %1
  %_tmp_3 = load i32* %p
  %_tmp_31 = load i32* %q
  br label %end 
bb6:
  store i32 %_tmp_32, i32* %q
  store i32 %_tmp_4, i32* %p
  %10 = add i32 %0, %1
  %_tmp_2 = load i32* %p
  %_tmp_30 = load i32* %q
  br label %end 
end:
  %_tmp_39 = phi i32 [%_tmp_30, %bb6],[%_tmp_31, %bb5]
  %_tmp_11 = phi i32 [%_tmp_2, %bb6],[%_tmp_3, %bb5]
  %11 = phi i32 [%9, %bb5],[%10, %bb6]
  store i32 %_tmp_39, i32* %q
  store i32 %_tmp_11, i32* %p
  %_tmp_1 = load i32* %p
  %_tmp_29 = load i32* %q
  ret i32 %11
}

real	0m0.046s
user	0m0.020s
sys	0m0.014s
./testcases/t18.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %0 = load i32* @g
  br i1 -1, label %bb1, label %bb2
bb1:
  store i32 0, i32* @g
  br label %bb2 
bb2:
  br i1 -1, label %bb3, label %end
bb3:
  %1 = load i32* @g
  br label %end 
end:
  %2 = phi i32 [%1, %bb3],[undef, %bb2]
  ret i32 %2
}
@g =  global i32 16

real	0m0.045s
user	0m0.017s
sys	0m0.017s
./testcases/t19.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
%struct.tree = type { i32,double,double,%struct.tree*,%struct.tree*,%struct.tree*,%struct.tree* }
define     i32 @tsp (%struct.tree*  %t,i32  %sz,i32  %nproc) nounwind{
entry:
  %sz_addr = alloca i32, i32 1
  %nproc_addr = alloca i32, i32 1
  store i32 %sz, i32* %sz_addr
  store i32 %nproc, i32* %nproc_addr
  %t1 = load i32* %nproc_addr, align 4
  %t2 = sdiv i32 %t1, 2
  %_tmp_2 = load i32* %sz_addr
  %_tmp_6 = load i32* %nproc_addr
  br label %end 
end:
  store i32 %_tmp_6, i32* %nproc_addr
  store i32 %_tmp_2, i32* %sz_addr
  %_tmp_1 = load i32* %sz_addr
  %_tmp_5 = load i32* %nproc_addr
  ret i32 0
}
define     i32 @main () nounwind{
entry:
  ret i32 0
}

real	0m0.040s
user	0m0.008s
sys	0m0.009s
./testcases/t1.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %0 = add i32 4, 5
  br label %bb 
bb:
  br label %end 
end:
  ret i32 %0
}

real	0m0.041s
user	0m0.010s
sys	0m0.008s
./testcases/t20.ll: target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32"
%struct.tree = type { i32,double,double,%struct.tree*,%struct.tree*,%struct.tree*,%struct.tree* }
define internal    %struct.tree* @makelist (%struct.tree*  %t) nounwind{
entry:
  %retval1 = alloca %struct.tree*, i32 1
  %right = alloca %struct.tree*, i32 1
  %_tmp_3 = load %struct.tree** %retval1
  %_tmp_10 = load %struct.tree** %right
  br i1 -1, label %bb4, label %end
bb4:
  store %struct.tree* %_tmp_10, %struct.tree** %right
  store %struct.tree* %_tmp_3, %struct.tree** %retval1
  %0 = load %struct.tree** %right, align 4
  store %struct.tree* %0, %struct.tree** %retval1, align 4
  %_tmp_2 = load %struct.tree** %retval1
  %_tmp_9 = load %struct.tree** %right
  br label %end 
end:
  %_tmp_11 = phi %struct.tree* [%_tmp_9, %bb4],[%_tmp_10, %entry]
  %_tmp_4 = phi %struct.tree* [%_tmp_2, %bb4],[%_tmp_3, %entry]
  store %struct.tree* %_tmp_11, %struct.tree** %right
  store %struct.tree* %_tmp_4, %struct.tree** %retval1
  %_tmp_1 = load %struct.tree** %retval1
  %_tmp_8 = load %struct.tree** %right
  ret %struct.tree* null
}
define     i32 @main () nounwind{
entry:
  ret i32 0
}

real	0m0.041s
user	0m0.006s
sys	0m0.012s
./testcases/t21.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @onintr () nounwind{
entry:
  %retval = alloca i32, i32 1
  %_tmp_1 = load i32* %retval
  unreachable
return:
  %retval1 = load i32* %retval
  ret i32 %retval1
}
define     i32 @main () nounwind{
entry:
  ret i32 0
}

real	0m0.045s
user	0m0.018s
sys	0m0.017s
./testcases/t2.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %q = alloca i32, i32 1
  %0 = load i32* %p
  %1 = load i32* %q
  %2 = add i32 %0, %1
  %_tmp_3 = load i32* %p
  %_tmp_10 = load i32* %q
  br label %bb 
bb:
  store i32 %_tmp_10, i32* %q
  store i32 %_tmp_3, i32* %p
  %3 = add i32 %0, %1
  %4 = add i32 %2, %3
  %_tmp_2 = load i32* %p
  %_tmp_9 = load i32* %q
  br label %end 
end:
  store i32 %_tmp_9, i32* %q
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  %_tmp_8 = load i32* %q
  ret i32 %4
}

real	0m0.044s
user	0m0.022s
sys	0m0.013s
./testcases/t3.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %0 = load i32* %p
  %_tmp_3 = load i32* %p
  br label %bb 
bb:
  store i32 %_tmp_3, i32* %p
  %1 = load i32* %p
  %2 = add i32 %0, %1
  %_tmp_2 = load i32* %p
  br label %end 
end:
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  ret i32 %2
}

real	0m0.044s
user	0m0.020s
sys	0m0.014s
./testcases/t4.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %q = alloca i32, i32 1
  %0 = load i32* %p
  %1 = load i32* %q
  %c = trunc i32 %0 to i1
  %a1 = add i32 %0, %1
  %a2 = add i32 %0, %1
  %a3 = add i32 %1, %0
  %a4 = add i32 %1, %0
  %_tmp_4 = load i32* %p
  %_tmp_14 = load i32* %q
  br i1 %c, label %bb1, label %bb2
bb1:
  store i32 %_tmp_14, i32* %q
  store i32 %_tmp_4, i32* %p
  %2 = add i32 %a1, %a3
  %3 = add i32 %a2, %a4
  %_tmp_3 = load i32* %p
  %_tmp_13 = load i32* %q
  br label %end 
bb2:
  store i32 %_tmp_14, i32* %q
  store i32 %_tmp_4, i32* %p
  %4 = add i32 %a1, %a3
  %5 = add i32 %a2, %a4
  %_tmp_2 = load i32* %p
  %_tmp_12 = load i32* %q
  br label %end 
end:
  %_tmp_15 = phi i32 [%_tmp_12, %bb2],[%_tmp_13, %bb1]
  %_tmp_5 = phi i32 [%_tmp_2, %bb2],[%_tmp_3, %bb1]
  %6 = phi i32 [%2, %bb1],[%4, %bb2]
  %7 = phi i32 [%3, %bb1],[%5, %bb2]
  store i32 %_tmp_15, i32* %q
  store i32 %_tmp_5, i32* %p
  %8 = add i32 %6, %7
  %_tmp_1 = load i32* %p
  %_tmp_11 = load i32* %q
  ret i32 %8
}

real	0m0.054s
user	0m0.016s
sys	0m0.017s
./testcases/t5.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %q = alloca i32, i32 1
  %0 = load i32* %p
  store i32 0, i32* %q
  %_tmp_3 = load i32* %p
  %_tmp_10 = load i32* %q
  br label %bb 
bb:
  store i32 %_tmp_10, i32* %q
  store i32 %_tmp_3, i32* %p
  %1 = load i32* %p
  %2 = add i32 %0, %1
  %_tmp_2 = load i32* %p
  %_tmp_9 = load i32* %q
  br label %end 
end:
  store i32 %_tmp_9, i32* %q
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  %_tmp_8 = load i32* %q
  ret i32 %2
}

real	0m0.041s
user	0m0.017s
sys	0m0.024s
./testcases/t6.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %0 = load i32* %p
  %_tmp_4 = load i32* %p
  br i1 -1, label %bb1, label %bb2
bb1:
  store i32 %_tmp_4, i32* %p
  %1 = add i32 %0, %0
  %_tmp_3 = load i32* %p
  br label %end 
bb2:
  store i32 %_tmp_4, i32* %p
  %2 = add i32 %0, %0
  %_tmp_2 = load i32* %p
  br label %end 
end:
  %_tmp_5 = phi i32 [%_tmp_2, %bb2],[%_tmp_3, %bb1]
  %3 = phi i32 [%1, %bb1],[%2, %bb2]
  store i32 %_tmp_5, i32* %p
  %_tmp_1 = load i32* %p
  ret i32 %3
}

real	0m0.040s
user	0m0.020s
sys	0m0.019s
./testcases/t7.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %_tmp_4 = load i32* %p
  br i1 -1, label %bb1, label %bb2
bb1:
  store i32 %_tmp_4, i32* %p
  %0 = load i32* %p
  %_tmp_3 = load i32* %p
  br label %end 
bb2:
  store i32 %_tmp_4, i32* %p
  %_tmp_2 = load i32* %p
  br label %end 
end:
  %_tmp_5 = phi i32 [%_tmp_2, %bb2],[%_tmp_3, %bb1]
  %1 = phi i32 [%0, %bb1],[1, %bb2]
  store i32 %_tmp_5, i32* %p
  %2 = load i32* %p
  %3 = add i32 %2, %1
  %_tmp_1 = load i32* %p
  ret i32 %3
}

real	0m0.052s
user	0m0.015s
sys	0m0.021s
./testcases/t8.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  store i32 0, i32* %p
  %_tmp_3 = load i32* %p
  br label %bb 
bb:
  store i32 %_tmp_3, i32* %p
  %0 = load i32* %p
  %_tmp_2 = load i32* %p
  br label %end 
end:
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  ret i32 %0
}

real	0m0.148s
user	0m0.020s
sys	0m0.020s
./testcases/t9.ll: target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
define     i32 @main () nounwind{
entry:
  %p = alloca i32, i32 1
  %q = alloca i32, i32 1
  store i32 0, i32* %p
  store i32 0, i32* %q
  %_tmp_3 = load i32* %p
  %_tmp_10 = load i32* %q
  br label %bb 
bb:
  store i32 %_tmp_10, i32* %q
  store i32 %_tmp_3, i32* %p
  %0 = load i32* %p
  %_tmp_2 = load i32* %p
  %_tmp_9 = load i32* %q
  br label %end 
end:
  store i32 %_tmp_9, i32* %q
  store i32 %_tmp_2, i32* %p
  %_tmp_1 = load i32* %p
  %_tmp_8 = load i32* %q
  ret i32 %0
}

real	0m0.042s
user	0m0.021s
sys	0m0.013s
bh: Coq M2R

real	0m33.458s
user	0m11.070s
sys	0m0.024s
LLVM ld1
/tmp/ccuEyrLS.o: In function `getparam':
bha.exe.bc:(.text+0x1c78f): warning: the `gets' function is dangerous and should not be used.

real	0m13.719s
user	0m6.873s
sys	0m0.059s
LLVM ld3
/tmp/ccRGUUZB.o: In function `getparam':
bhb.exe.bc:(.text+0x3aaf): warning: the `gets' function is dangerous and should not be used.

real	0m2.607s
user	0m2.188s
sys	0m0.051s
bisort: Coq M2R

real	0m0.166s
user	0m0.148s
sys	0m0.011s
LLVM ld1

real	0m0.982s
user	0m0.865s
sys	0m0.070s
LLVM ld3

real	0m0.576s
user	0m0.496s
sys	0m0.070s
em3d: Coq M2R

real	0m0.111s
user	0m0.097s
sys	0m0.013s
LLVM ld1

real	0m0.860s
user	0m0.767s
sys	0m0.066s
LLVM ld3

real	0m0.598s
user	0m0.476s
sys	0m0.067s
health: Coq M2R

real	0m0.219s
user	0m0.161s
sys	0m0.018s
LLVM ld1

real	0m1.134s
user	0m0.913s
sys	0m0.062s
LLVM ld3

real	0m0.599s
user	0m0.350s
sys	0m0.035s
mst: Coq M2R

real	0m0.250s
user	0m0.077s
sys	0m0.010s
LLVM ld1

real	0m1.135s
user	0m0.989s
sys	0m0.056s
LLVM ld3

real	0m0.579s
user	0m0.211s
sys	0m0.043s
perimeter: Coq M2R

real	0m0.549s
user	0m0.174s
sys	0m0.008s
LLVM ld1

real	0m1.769s
user	0m1.518s
sys	0m0.052s
LLVM ld3

real	0m0.744s
user	0m0.476s
sys	0m0.032s
power: Coq M2R

real	0m0.440s
user	0m0.387s
sys	0m0.030s
LLVM ld1

real	0m1.793s
user	0m1.469s
sys	0m0.063s
LLVM ld3

real	0m1.536s
user	0m1.434s
sys	0m0.070s
treeadd: Coq M2R

real	0m0.059s
user	0m0.014s
sys	0m0.006s
LLVM ld1

real	0m0.516s
user	0m0.288s
sys	0m0.039s
LLVM ld3

real	0m0.328s
user	0m0.132s
sys	0m0.060s
tsp: Coq M2R

real	0m4.686s
user	0m4.380s
sys	0m0.023s
LLVM ld1

real	0m3.198s
user	0m2.944s
sys	0m0.078s
LLVM ld3

real	0m0.899s
user	0m0.772s
sys	0m0.073s
bh b: 
real	0m20.467s
user	0m19.150s
sys	0m0.006s
bh a: 
real	0m48.223s
user	0m46.560s
sys	0m0.022s
bisort b: 
real	0m33.257s
user	0m31.776s
sys	0m0.160s
bisort a: 
real	1m8.408s
user	1m5.624s
sys	0m0.155s
em3d b: 
real	1m8.460s
user	1m5.655s
sys	0m0.668s
em3d a: 
real	2m38.109s
user	2m22.836s
sys	0m0.668s
health b: 
real	0m25.737s
user	0m8.415s
sys	0m0.108s
health a: 
real	0m32.816s
user	0m31.309s
sys	0m0.310s
mst b: 
real	0m7.702s
user	0m6.020s
sys	0m0.403s
mst a: 
real	0m13.656s
user	0m12.709s
sys	0m0.497s
perimeter b: 
real	1m30.411s
user	1m27.444s
sys	0m0.049s
perimeter a: 
real	3m47.490s
user	3m39.931s
sys	0m0.072s
power b: 
real	0m1.921s
user	0m1.887s
sys	0m0.003s
power a: 
real	0m2.081s
user	0m1.937s
sys	0m0.003s
treeadd b: 
real	0m9.277s
user	0m8.483s
sys	0m0.568s
treeadd a: 
real	0m22.439s
user	0m21.185s
sys	0m0.490s
tsp b: 
real	0m12.134s
user	0m11.574s
sys	0m0.160s
tsp a: 
real	0m34.927s
user	0m33.386s
sys	0m0.146s
129.compress: Coq M2R

real	0m0.896s
user	0m0.856s
sys	0m0.033s
LLVM ld1

real	0m3.125s
user	0m2.849s
sys	0m0.083s
LLVM ld3

real	0m1.258s
user	0m0.614s
sys	0m0.069s
099.go: Coq M2R

real	12m2.092s
user	11m35.665s
sys	0m1.342s
LLVM ld1

real	3m9.031s
user	1m45.468s
sys	0m0.416s
LLVM ld3

real	0m34.039s
user	0m32.614s
sys	0m0.193s
130.li: Coq M2R

real	0m15.661s
user	0m14.945s
sys	0m0.193s
LLVM ld1

real	0m23.814s
user	0m21.582s
sys	0m0.096s
LLVM ld3

real	0m10.868s
user	0m9.928s
sys	0m0.072s
132.ijpeg: Coq M2R

real	1m39.026s
user	1m22.654s
sys	0m0.446s
LLVM ld1

real	1m19.835s
user	1m16.678s
sys	0m0.272s
LLVM ld3

real	0m21.646s
user	0m20.551s
sys	0m0.136s
099.go b: 
real	0m18.407s
user	0m17.764s
sys	0m0.009s
099.go a: 
real	1m11.522s
user	0m31.320s
sys	0m0.009s
129.compress b: 
real	1m23.962s
user	0m54.509s
sys	0m0.065s
129.compress a: 
real	2m31.121s
user	1m10.577s
sys	0m0.110s
132.ijpeg b: 
real	0m45.008s
user	0m14.892s
sys	0m0.129s
132.ijpeg a: 
real	2m22.810s
user	2m17.779s
sys	0m0.412s
